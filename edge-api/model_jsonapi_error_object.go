/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
)

// checks if the JSONAPIErrorObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONAPIErrorObject{}

// JSONAPIErrorObject Serializer for a single JSON:API error object.
type JSONAPIErrorObject struct {
	// The HTTP status code applicable to this problem
	Status *string `json:"status,omitempty" validate:"regexp=^\\\\d{3}$"`
	// An application-specific error code
	Code *string `json:"code,omitempty" validate:"regexp=^\\\\d{5}$"`
	// A short, human-readable summary of the problem
	Title *string `json:"title,omitempty" validate:"regexp=^.*$"`
	// A human-readable explanation specific to this occurrence of the problem
	Detail *string `json:"detail,omitempty" validate:"regexp=^.*$"`
	// References to the primary source of the error
	Source *JSONAPIErrorSource `json:"source,omitempty"`
	// Non-standard meta-information about the error
	Meta map[string]interface{} `json:"meta,omitempty"`
}

// NewJSONAPIErrorObject instantiates a new JSONAPIErrorObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONAPIErrorObject() *JSONAPIErrorObject {
	this := JSONAPIErrorObject{}
	return &this
}

// NewJSONAPIErrorObjectWithDefaults instantiates a new JSONAPIErrorObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONAPIErrorObjectWithDefaults() *JSONAPIErrorObject {
	this := JSONAPIErrorObject{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *JSONAPIErrorObject) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONAPIErrorObject) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *JSONAPIErrorObject) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *JSONAPIErrorObject) SetStatus(v string) {
	o.Status = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *JSONAPIErrorObject) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONAPIErrorObject) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *JSONAPIErrorObject) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *JSONAPIErrorObject) SetCode(v string) {
	o.Code = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *JSONAPIErrorObject) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONAPIErrorObject) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *JSONAPIErrorObject) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *JSONAPIErrorObject) SetTitle(v string) {
	o.Title = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *JSONAPIErrorObject) GetDetail() string {
	if o == nil || IsNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONAPIErrorObject) GetDetailOk() (*string, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *JSONAPIErrorObject) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *JSONAPIErrorObject) SetDetail(v string) {
	o.Detail = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *JSONAPIErrorObject) GetSource() JSONAPIErrorSource {
	if o == nil || IsNil(o.Source) {
		var ret JSONAPIErrorSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONAPIErrorObject) GetSourceOk() (*JSONAPIErrorSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *JSONAPIErrorObject) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given JSONAPIErrorSource and assigns it to the Source field.
func (o *JSONAPIErrorObject) SetSource(v JSONAPIErrorSource) {
	o.Source = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *JSONAPIErrorObject) GetMeta() map[string]interface{} {
	if o == nil || IsNil(o.Meta) {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONAPIErrorObject) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *JSONAPIErrorObject) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *JSONAPIErrorObject) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

func (o JSONAPIErrorObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONAPIErrorObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableJSONAPIErrorObject struct {
	value *JSONAPIErrorObject
	isSet bool
}

func (v NullableJSONAPIErrorObject) Get() *JSONAPIErrorObject {
	return v.value
}

func (v *NullableJSONAPIErrorObject) Set(val *JSONAPIErrorObject) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONAPIErrorObject) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONAPIErrorObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONAPIErrorObject(val *JSONAPIErrorObject) *NullableJSONAPIErrorObject {
	return &NullableJSONAPIErrorObject{value: val, isSet: true}
}

func (v NullableJSONAPIErrorObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONAPIErrorObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CacheSettingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheSettingRequest{}

// CacheSettingRequest struct for CacheSettingRequest
type CacheSettingRequest struct {
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9 \\\\-\\\\.\\\\'\\\\,|]+$"`
	BrowserCache BrowserCacheModuleRequest `json:"browser_cache"`
	EdgeCache EdgeCacheModuleRequest `json:"edge_cache"`
	ApplicationControls ApplicationControlsModuleRequest `json:"application_controls"`
	SliceControls SliceControlsModuleRequest `json:"slice_controls"`
}

type _CacheSettingRequest CacheSettingRequest

// NewCacheSettingRequest instantiates a new CacheSettingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheSettingRequest(name string, browserCache BrowserCacheModuleRequest, edgeCache EdgeCacheModuleRequest, applicationControls ApplicationControlsModuleRequest, sliceControls SliceControlsModuleRequest) *CacheSettingRequest {
	this := CacheSettingRequest{}
	this.Name = name
	this.BrowserCache = browserCache
	this.EdgeCache = edgeCache
	this.ApplicationControls = applicationControls
	this.SliceControls = sliceControls
	return &this
}

// NewCacheSettingRequestWithDefaults instantiates a new CacheSettingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheSettingRequestWithDefaults() *CacheSettingRequest {
	this := CacheSettingRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CacheSettingRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CacheSettingRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CacheSettingRequest) SetName(v string) {
	o.Name = v
}

// GetBrowserCache returns the BrowserCache field value
func (o *CacheSettingRequest) GetBrowserCache() BrowserCacheModuleRequest {
	if o == nil {
		var ret BrowserCacheModuleRequest
		return ret
	}

	return o.BrowserCache
}

// GetBrowserCacheOk returns a tuple with the BrowserCache field value
// and a boolean to check if the value has been set.
func (o *CacheSettingRequest) GetBrowserCacheOk() (*BrowserCacheModuleRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrowserCache, true
}

// SetBrowserCache sets field value
func (o *CacheSettingRequest) SetBrowserCache(v BrowserCacheModuleRequest) {
	o.BrowserCache = v
}

// GetEdgeCache returns the EdgeCache field value
func (o *CacheSettingRequest) GetEdgeCache() EdgeCacheModuleRequest {
	if o == nil {
		var ret EdgeCacheModuleRequest
		return ret
	}

	return o.EdgeCache
}

// GetEdgeCacheOk returns a tuple with the EdgeCache field value
// and a boolean to check if the value has been set.
func (o *CacheSettingRequest) GetEdgeCacheOk() (*EdgeCacheModuleRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EdgeCache, true
}

// SetEdgeCache sets field value
func (o *CacheSettingRequest) SetEdgeCache(v EdgeCacheModuleRequest) {
	o.EdgeCache = v
}

// GetApplicationControls returns the ApplicationControls field value
func (o *CacheSettingRequest) GetApplicationControls() ApplicationControlsModuleRequest {
	if o == nil {
		var ret ApplicationControlsModuleRequest
		return ret
	}

	return o.ApplicationControls
}

// GetApplicationControlsOk returns a tuple with the ApplicationControls field value
// and a boolean to check if the value has been set.
func (o *CacheSettingRequest) GetApplicationControlsOk() (*ApplicationControlsModuleRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationControls, true
}

// SetApplicationControls sets field value
func (o *CacheSettingRequest) SetApplicationControls(v ApplicationControlsModuleRequest) {
	o.ApplicationControls = v
}

// GetSliceControls returns the SliceControls field value
func (o *CacheSettingRequest) GetSliceControls() SliceControlsModuleRequest {
	if o == nil {
		var ret SliceControlsModuleRequest
		return ret
	}

	return o.SliceControls
}

// GetSliceControlsOk returns a tuple with the SliceControls field value
// and a boolean to check if the value has been set.
func (o *CacheSettingRequest) GetSliceControlsOk() (*SliceControlsModuleRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SliceControls, true
}

// SetSliceControls sets field value
func (o *CacheSettingRequest) SetSliceControls(v SliceControlsModuleRequest) {
	o.SliceControls = v
}

func (o CacheSettingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheSettingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["browser_cache"] = o.BrowserCache
	toSerialize["edge_cache"] = o.EdgeCache
	toSerialize["application_controls"] = o.ApplicationControls
	toSerialize["slice_controls"] = o.SliceControls
	return toSerialize, nil
}

func (o *CacheSettingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"browser_cache",
		"edge_cache",
		"application_controls",
		"slice_controls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCacheSettingRequest := _CacheSettingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCacheSettingRequest)

	if err != nil {
		return err
	}

	*o = CacheSettingRequest(varCacheSettingRequest)

	return err
}

type NullableCacheSettingRequest struct {
	value *CacheSettingRequest
	isSet bool
}

func (v NullableCacheSettingRequest) Get() *CacheSettingRequest {
	return v.value
}

func (v *NullableCacheSettingRequest) Set(val *CacheSettingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheSettingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheSettingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheSettingRequest(val *CacheSettingRequest) *NullableCacheSettingRequest {
	return &NullableCacheSettingRequest{value: val, isSet: true}
}

func (v NullableCacheSettingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheSettingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
)

// checks if the HTTPConnectionOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HTTPConnectionOptions{}

// HTTPConnectionOptions struct for HTTPConnectionOptions
type HTTPConnectionOptions struct {
	// DNS resolution policy: preserve, force IPv4, or force IPv6 usage when connecting.  * `preserve` - Preserve * `force_ipv4` - Force IPv4 * `force_ipv6` - Force IPv6
	DnsResolution *string `json:"dns_resolution,omitempty"`
	// Transport protocol policy: preserve current scheme, force HTTP, or force HTTPS.  * `preserve` - Preserve * `force_https` - Force HTTPS * `force_http` - Force HTTP
	TransportPolicy *string `json:"transport_policy,omitempty"`
	// Defines the HTTP version preference for outbound connections (e.g., HTTP/1.1).  * `http1_1` - HTTP/1.1
	HttpVersionPolicy *string `json:"http_version_policy,omitempty"`
	// Optional custom host used to override the default target hostname during connection.
	Host *string `json:"host,omitempty"`
	// Optional prefix to add to all request paths (e.g., '/v1').
	PathPrefix *string `json:"path_prefix,omitempty"`
	// If true, automatically follows HTTP redirects from the target server.
	FollowingRedirect *bool `json:"following_redirect,omitempty"`
	// Header name used to forward the original client IP address.
	RealIpHeader *string `json:"real_ip_header,omitempty"`
	// Header name used to forward the original client port.
	RealPortHeader *string `json:"real_port_header,omitempty"`
}

// NewHTTPConnectionOptions instantiates a new HTTPConnectionOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHTTPConnectionOptions() *HTTPConnectionOptions {
	this := HTTPConnectionOptions{}
	return &this
}

// NewHTTPConnectionOptionsWithDefaults instantiates a new HTTPConnectionOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHTTPConnectionOptionsWithDefaults() *HTTPConnectionOptions {
	this := HTTPConnectionOptions{}
	return &this
}

// GetDnsResolution returns the DnsResolution field value if set, zero value otherwise.
func (o *HTTPConnectionOptions) GetDnsResolution() string {
	if o == nil || IsNil(o.DnsResolution) {
		var ret string
		return ret
	}
	return *o.DnsResolution
}

// GetDnsResolutionOk returns a tuple with the DnsResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPConnectionOptions) GetDnsResolutionOk() (*string, bool) {
	if o == nil || IsNil(o.DnsResolution) {
		return nil, false
	}
	return o.DnsResolution, true
}

// HasDnsResolution returns a boolean if a field has been set.
func (o *HTTPConnectionOptions) HasDnsResolution() bool {
	if o != nil && !IsNil(o.DnsResolution) {
		return true
	}

	return false
}

// SetDnsResolution gets a reference to the given string and assigns it to the DnsResolution field.
func (o *HTTPConnectionOptions) SetDnsResolution(v string) {
	o.DnsResolution = &v
}

// GetTransportPolicy returns the TransportPolicy field value if set, zero value otherwise.
func (o *HTTPConnectionOptions) GetTransportPolicy() string {
	if o == nil || IsNil(o.TransportPolicy) {
		var ret string
		return ret
	}
	return *o.TransportPolicy
}

// GetTransportPolicyOk returns a tuple with the TransportPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPConnectionOptions) GetTransportPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.TransportPolicy) {
		return nil, false
	}
	return o.TransportPolicy, true
}

// HasTransportPolicy returns a boolean if a field has been set.
func (o *HTTPConnectionOptions) HasTransportPolicy() bool {
	if o != nil && !IsNil(o.TransportPolicy) {
		return true
	}

	return false
}

// SetTransportPolicy gets a reference to the given string and assigns it to the TransportPolicy field.
func (o *HTTPConnectionOptions) SetTransportPolicy(v string) {
	o.TransportPolicy = &v
}

// GetHttpVersionPolicy returns the HttpVersionPolicy field value if set, zero value otherwise.
func (o *HTTPConnectionOptions) GetHttpVersionPolicy() string {
	if o == nil || IsNil(o.HttpVersionPolicy) {
		var ret string
		return ret
	}
	return *o.HttpVersionPolicy
}

// GetHttpVersionPolicyOk returns a tuple with the HttpVersionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPConnectionOptions) GetHttpVersionPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.HttpVersionPolicy) {
		return nil, false
	}
	return o.HttpVersionPolicy, true
}

// HasHttpVersionPolicy returns a boolean if a field has been set.
func (o *HTTPConnectionOptions) HasHttpVersionPolicy() bool {
	if o != nil && !IsNil(o.HttpVersionPolicy) {
		return true
	}

	return false
}

// SetHttpVersionPolicy gets a reference to the given string and assigns it to the HttpVersionPolicy field.
func (o *HTTPConnectionOptions) SetHttpVersionPolicy(v string) {
	o.HttpVersionPolicy = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *HTTPConnectionOptions) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPConnectionOptions) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *HTTPConnectionOptions) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *HTTPConnectionOptions) SetHost(v string) {
	o.Host = &v
}

// GetPathPrefix returns the PathPrefix field value if set, zero value otherwise.
func (o *HTTPConnectionOptions) GetPathPrefix() string {
	if o == nil || IsNil(o.PathPrefix) {
		var ret string
		return ret
	}
	return *o.PathPrefix
}

// GetPathPrefixOk returns a tuple with the PathPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPConnectionOptions) GetPathPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.PathPrefix) {
		return nil, false
	}
	return o.PathPrefix, true
}

// HasPathPrefix returns a boolean if a field has been set.
func (o *HTTPConnectionOptions) HasPathPrefix() bool {
	if o != nil && !IsNil(o.PathPrefix) {
		return true
	}

	return false
}

// SetPathPrefix gets a reference to the given string and assigns it to the PathPrefix field.
func (o *HTTPConnectionOptions) SetPathPrefix(v string) {
	o.PathPrefix = &v
}

// GetFollowingRedirect returns the FollowingRedirect field value if set, zero value otherwise.
func (o *HTTPConnectionOptions) GetFollowingRedirect() bool {
	if o == nil || IsNil(o.FollowingRedirect) {
		var ret bool
		return ret
	}
	return *o.FollowingRedirect
}

// GetFollowingRedirectOk returns a tuple with the FollowingRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPConnectionOptions) GetFollowingRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.FollowingRedirect) {
		return nil, false
	}
	return o.FollowingRedirect, true
}

// HasFollowingRedirect returns a boolean if a field has been set.
func (o *HTTPConnectionOptions) HasFollowingRedirect() bool {
	if o != nil && !IsNil(o.FollowingRedirect) {
		return true
	}

	return false
}

// SetFollowingRedirect gets a reference to the given bool and assigns it to the FollowingRedirect field.
func (o *HTTPConnectionOptions) SetFollowingRedirect(v bool) {
	o.FollowingRedirect = &v
}

// GetRealIpHeader returns the RealIpHeader field value if set, zero value otherwise.
func (o *HTTPConnectionOptions) GetRealIpHeader() string {
	if o == nil || IsNil(o.RealIpHeader) {
		var ret string
		return ret
	}
	return *o.RealIpHeader
}

// GetRealIpHeaderOk returns a tuple with the RealIpHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPConnectionOptions) GetRealIpHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.RealIpHeader) {
		return nil, false
	}
	return o.RealIpHeader, true
}

// HasRealIpHeader returns a boolean if a field has been set.
func (o *HTTPConnectionOptions) HasRealIpHeader() bool {
	if o != nil && !IsNil(o.RealIpHeader) {
		return true
	}

	return false
}

// SetRealIpHeader gets a reference to the given string and assigns it to the RealIpHeader field.
func (o *HTTPConnectionOptions) SetRealIpHeader(v string) {
	o.RealIpHeader = &v
}

// GetRealPortHeader returns the RealPortHeader field value if set, zero value otherwise.
func (o *HTTPConnectionOptions) GetRealPortHeader() string {
	if o == nil || IsNil(o.RealPortHeader) {
		var ret string
		return ret
	}
	return *o.RealPortHeader
}

// GetRealPortHeaderOk returns a tuple with the RealPortHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPConnectionOptions) GetRealPortHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.RealPortHeader) {
		return nil, false
	}
	return o.RealPortHeader, true
}

// HasRealPortHeader returns a boolean if a field has been set.
func (o *HTTPConnectionOptions) HasRealPortHeader() bool {
	if o != nil && !IsNil(o.RealPortHeader) {
		return true
	}

	return false
}

// SetRealPortHeader gets a reference to the given string and assigns it to the RealPortHeader field.
func (o *HTTPConnectionOptions) SetRealPortHeader(v string) {
	o.RealPortHeader = &v
}

func (o HTTPConnectionOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HTTPConnectionOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsResolution) {
		toSerialize["dns_resolution"] = o.DnsResolution
	}
	if !IsNil(o.TransportPolicy) {
		toSerialize["transport_policy"] = o.TransportPolicy
	}
	if !IsNil(o.HttpVersionPolicy) {
		toSerialize["http_version_policy"] = o.HttpVersionPolicy
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.PathPrefix) {
		toSerialize["path_prefix"] = o.PathPrefix
	}
	if !IsNil(o.FollowingRedirect) {
		toSerialize["following_redirect"] = o.FollowingRedirect
	}
	if !IsNil(o.RealIpHeader) {
		toSerialize["real_ip_header"] = o.RealIpHeader
	}
	if !IsNil(o.RealPortHeader) {
		toSerialize["real_port_header"] = o.RealPortHeader
	}
	return toSerialize, nil
}

type NullableHTTPConnectionOptions struct {
	value *HTTPConnectionOptions
	isSet bool
}

func (v NullableHTTPConnectionOptions) Get() *HTTPConnectionOptions {
	return v.value
}

func (v *NullableHTTPConnectionOptions) Set(val *HTTPConnectionOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableHTTPConnectionOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableHTTPConnectionOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTTPConnectionOptions(val *HTTPConnectionOptions) *NullableHTTPConnectionOptions {
	return &NullableHTTPConnectionOptions{value: val, isSet: true}
}

func (v NullableHTTPConnectionOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTTPConnectionOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



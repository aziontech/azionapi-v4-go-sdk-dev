/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ApplicationFunctionInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationFunctionInstance{}

// ApplicationFunctionInstance Serializer for Application Function Instances
type ApplicationFunctionInstance struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	Args interface{} `json:"args,omitempty"`
	AzionForm *ApplicationFunctionInstanceAzionForm `json:"azion_form,omitempty"`
	Function int64 `json:"function"`
	Active *bool `json:"active,omitempty"`
	LastEditor string `json:"last_editor"`
	LastModified time.Time `json:"last_modified"`
}

type _ApplicationFunctionInstance ApplicationFunctionInstance

// NewApplicationFunctionInstance instantiates a new ApplicationFunctionInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationFunctionInstance(id int64, name string, function int64, lastEditor string, lastModified time.Time) *ApplicationFunctionInstance {
	this := ApplicationFunctionInstance{}
	this.Id = id
	this.Name = name
	this.Function = function
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	return &this
}

// NewApplicationFunctionInstanceWithDefaults instantiates a new ApplicationFunctionInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationFunctionInstanceWithDefaults() *ApplicationFunctionInstance {
	this := ApplicationFunctionInstance{}
	return &this
}

// GetId returns the Id field value
func (o *ApplicationFunctionInstance) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApplicationFunctionInstance) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApplicationFunctionInstance) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ApplicationFunctionInstance) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationFunctionInstance) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationFunctionInstance) SetName(v string) {
	o.Name = v
}

// GetArgs returns the Args field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationFunctionInstance) GetArgs() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationFunctionInstance) GetArgsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return &o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *ApplicationFunctionInstance) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given interface{} and assigns it to the Args field.
func (o *ApplicationFunctionInstance) SetArgs(v interface{}) {
	o.Args = v
}

// GetAzionForm returns the AzionForm field value if set, zero value otherwise.
func (o *ApplicationFunctionInstance) GetAzionForm() ApplicationFunctionInstanceAzionForm {
	if o == nil || IsNil(o.AzionForm) {
		var ret ApplicationFunctionInstanceAzionForm
		return ret
	}
	return *o.AzionForm
}

// GetAzionFormOk returns a tuple with the AzionForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFunctionInstance) GetAzionFormOk() (*ApplicationFunctionInstanceAzionForm, bool) {
	if o == nil || IsNil(o.AzionForm) {
		return nil, false
	}
	return o.AzionForm, true
}

// HasAzionForm returns a boolean if a field has been set.
func (o *ApplicationFunctionInstance) HasAzionForm() bool {
	if o != nil && !IsNil(o.AzionForm) {
		return true
	}

	return false
}

// SetAzionForm gets a reference to the given ApplicationFunctionInstanceAzionForm and assigns it to the AzionForm field.
func (o *ApplicationFunctionInstance) SetAzionForm(v ApplicationFunctionInstanceAzionForm) {
	o.AzionForm = &v
}

// GetFunction returns the Function field value
func (o *ApplicationFunctionInstance) GetFunction() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Function
}

// GetFunctionOk returns a tuple with the Function field value
// and a boolean to check if the value has been set.
func (o *ApplicationFunctionInstance) GetFunctionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Function, true
}

// SetFunction sets field value
func (o *ApplicationFunctionInstance) SetFunction(v int64) {
	o.Function = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ApplicationFunctionInstance) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFunctionInstance) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ApplicationFunctionInstance) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ApplicationFunctionInstance) SetActive(v bool) {
	o.Active = &v
}

// GetLastEditor returns the LastEditor field value
func (o *ApplicationFunctionInstance) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *ApplicationFunctionInstance) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *ApplicationFunctionInstance) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *ApplicationFunctionInstance) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *ApplicationFunctionInstance) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *ApplicationFunctionInstance) SetLastModified(v time.Time) {
	o.LastModified = v
}

func (o ApplicationFunctionInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationFunctionInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	if !IsNil(o.AzionForm) {
		toSerialize["azion_form"] = o.AzionForm
	}
	toSerialize["function"] = o.Function
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	return toSerialize, nil
}

func (o *ApplicationFunctionInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"function",
		"last_editor",
		"last_modified",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationFunctionInstance := _ApplicationFunctionInstance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplicationFunctionInstance)

	if err != nil {
		return err
	}

	*o = ApplicationFunctionInstance(varApplicationFunctionInstance)

	return err
}

type NullableApplicationFunctionInstance struct {
	value *ApplicationFunctionInstance
	isSet bool
}

func (v NullableApplicationFunctionInstance) Get() *ApplicationFunctionInstance {
	return v.value
}

func (v *NullableApplicationFunctionInstance) Set(val *ApplicationFunctionInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationFunctionInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationFunctionInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationFunctionInstance(val *ApplicationFunctionInstance) *NullableApplicationFunctionInstance {
	return &NullableApplicationFunctionInstance{value: val, isSet: true}
}

func (v NullableApplicationFunctionInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationFunctionInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CacheSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheSetting{}

// CacheSetting struct for CacheSetting
type CacheSetting struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	BrowserCache *BrowserCacheModule `json:"browser_cache,omitempty"`
	Modules *CacheSettingsModules `json:"modules,omitempty"`
}

type _CacheSetting CacheSetting

// NewCacheSetting instantiates a new CacheSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheSetting(id int64, name string) *CacheSetting {
	this := CacheSetting{}
	this.Id = id
	this.Name = name
	return &this
}

// NewCacheSettingWithDefaults instantiates a new CacheSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheSettingWithDefaults() *CacheSetting {
	this := CacheSetting{}
	return &this
}

// GetId returns the Id field value
func (o *CacheSetting) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CacheSetting) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CacheSetting) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CacheSetting) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CacheSetting) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CacheSetting) SetName(v string) {
	o.Name = v
}

// GetBrowserCache returns the BrowserCache field value if set, zero value otherwise.
func (o *CacheSetting) GetBrowserCache() BrowserCacheModule {
	if o == nil || IsNil(o.BrowserCache) {
		var ret BrowserCacheModule
		return ret
	}
	return *o.BrowserCache
}

// GetBrowserCacheOk returns a tuple with the BrowserCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSetting) GetBrowserCacheOk() (*BrowserCacheModule, bool) {
	if o == nil || IsNil(o.BrowserCache) {
		return nil, false
	}
	return o.BrowserCache, true
}

// HasBrowserCache returns a boolean if a field has been set.
func (o *CacheSetting) HasBrowserCache() bool {
	if o != nil && !IsNil(o.BrowserCache) {
		return true
	}

	return false
}

// SetBrowserCache gets a reference to the given BrowserCacheModule and assigns it to the BrowserCache field.
func (o *CacheSetting) SetBrowserCache(v BrowserCacheModule) {
	o.BrowserCache = &v
}

// GetModules returns the Modules field value if set, zero value otherwise.
func (o *CacheSetting) GetModules() CacheSettingsModules {
	if o == nil || IsNil(o.Modules) {
		var ret CacheSettingsModules
		return ret
	}
	return *o.Modules
}

// GetModulesOk returns a tuple with the Modules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSetting) GetModulesOk() (*CacheSettingsModules, bool) {
	if o == nil || IsNil(o.Modules) {
		return nil, false
	}
	return o.Modules, true
}

// HasModules returns a boolean if a field has been set.
func (o *CacheSetting) HasModules() bool {
	if o != nil && !IsNil(o.Modules) {
		return true
	}

	return false
}

// SetModules gets a reference to the given CacheSettingsModules and assigns it to the Modules field.
func (o *CacheSetting) SetModules(v CacheSettingsModules) {
	o.Modules = &v
}

func (o CacheSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.BrowserCache) {
		toSerialize["browser_cache"] = o.BrowserCache
	}
	if !IsNil(o.Modules) {
		toSerialize["modules"] = o.Modules
	}
	return toSerialize, nil
}

func (o *CacheSetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCacheSetting := _CacheSetting{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCacheSetting)

	if err != nil {
		return err
	}

	*o = CacheSetting(varCacheSetting)

	return err
}

type NullableCacheSetting struct {
	value *CacheSetting
	isSet bool
}

func (v NullableCacheSetting) Get() *CacheSetting {
	return v.value
}

func (v *NullableCacheSetting) Set(val *CacheSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheSetting(val *CacheSetting) *NullableCacheSetting {
	return &NullableCacheSetting{value: val, isSet: true}
}

func (v NullableCacheSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



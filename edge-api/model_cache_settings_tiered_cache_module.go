/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CacheSettingsTieredCacheModule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheSettingsTieredCacheModule{}

// CacheSettingsTieredCacheModule struct for CacheSettingsTieredCacheModule
type CacheSettingsTieredCacheModule struct {
	// * `override` - override
	Behavior string `json:"behavior"`
	MaxAge int64 `json:"max_age"`
	// * `near-edge` - near-edge * `br-east-1` - br-east-1 * `us-east-1` - us-east-1
	Topology *string `json:"topology,omitempty"`
}

type _CacheSettingsTieredCacheModule CacheSettingsTieredCacheModule

// NewCacheSettingsTieredCacheModule instantiates a new CacheSettingsTieredCacheModule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheSettingsTieredCacheModule(behavior string, maxAge int64) *CacheSettingsTieredCacheModule {
	this := CacheSettingsTieredCacheModule{}
	this.Behavior = behavior
	this.MaxAge = maxAge
	return &this
}

// NewCacheSettingsTieredCacheModuleWithDefaults instantiates a new CacheSettingsTieredCacheModule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheSettingsTieredCacheModuleWithDefaults() *CacheSettingsTieredCacheModule {
	this := CacheSettingsTieredCacheModule{}
	return &this
}

// GetBehavior returns the Behavior field value
func (o *CacheSettingsTieredCacheModule) GetBehavior() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Behavior
}

// GetBehaviorOk returns a tuple with the Behavior field value
// and a boolean to check if the value has been set.
func (o *CacheSettingsTieredCacheModule) GetBehaviorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Behavior, true
}

// SetBehavior sets field value
func (o *CacheSettingsTieredCacheModule) SetBehavior(v string) {
	o.Behavior = v
}

// GetMaxAge returns the MaxAge field value
func (o *CacheSettingsTieredCacheModule) GetMaxAge() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxAge
}

// GetMaxAgeOk returns a tuple with the MaxAge field value
// and a boolean to check if the value has been set.
func (o *CacheSettingsTieredCacheModule) GetMaxAgeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxAge, true
}

// SetMaxAge sets field value
func (o *CacheSettingsTieredCacheModule) SetMaxAge(v int64) {
	o.MaxAge = v
}

// GetTopology returns the Topology field value if set, zero value otherwise.
func (o *CacheSettingsTieredCacheModule) GetTopology() string {
	if o == nil || IsNil(o.Topology) {
		var ret string
		return ret
	}
	return *o.Topology
}

// GetTopologyOk returns a tuple with the Topology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsTieredCacheModule) GetTopologyOk() (*string, bool) {
	if o == nil || IsNil(o.Topology) {
		return nil, false
	}
	return o.Topology, true
}

// HasTopology returns a boolean if a field has been set.
func (o *CacheSettingsTieredCacheModule) HasTopology() bool {
	if o != nil && !IsNil(o.Topology) {
		return true
	}

	return false
}

// SetTopology gets a reference to the given string and assigns it to the Topology field.
func (o *CacheSettingsTieredCacheModule) SetTopology(v string) {
	o.Topology = &v
}

func (o CacheSettingsTieredCacheModule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheSettingsTieredCacheModule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["behavior"] = o.Behavior
	toSerialize["max_age"] = o.MaxAge
	if !IsNil(o.Topology) {
		toSerialize["topology"] = o.Topology
	}
	return toSerialize, nil
}

func (o *CacheSettingsTieredCacheModule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"behavior",
		"max_age",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCacheSettingsTieredCacheModule := _CacheSettingsTieredCacheModule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCacheSettingsTieredCacheModule)

	if err != nil {
		return err
	}

	*o = CacheSettingsTieredCacheModule(varCacheSettingsTieredCacheModule)

	return err
}

type NullableCacheSettingsTieredCacheModule struct {
	value *CacheSettingsTieredCacheModule
	isSet bool
}

func (v NullableCacheSettingsTieredCacheModule) Get() *CacheSettingsTieredCacheModule {
	return v.value
}

func (v *NullableCacheSettingsTieredCacheModule) Set(val *CacheSettingsTieredCacheModule) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheSettingsTieredCacheModule) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheSettingsTieredCacheModule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheSettingsTieredCacheModule(val *CacheSettingsTieredCacheModule) *NullableCacheSettingsTieredCacheModule {
	return &NullableCacheSettingsTieredCacheModule{value: val, isSet: true}
}

func (v NullableCacheSettingsTieredCacheModule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheSettingsTieredCacheModule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
)

// checks if the CacheSettingsTieredCacheModule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheSettingsTieredCacheModule{}

// CacheSettingsTieredCacheModule struct for CacheSettingsTieredCacheModule
type CacheSettingsTieredCacheModule struct {
	// * `global` - global
	Topology *string `json:"topology,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

// NewCacheSettingsTieredCacheModule instantiates a new CacheSettingsTieredCacheModule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheSettingsTieredCacheModule() *CacheSettingsTieredCacheModule {
	this := CacheSettingsTieredCacheModule{}
	return &this
}

// NewCacheSettingsTieredCacheModuleWithDefaults instantiates a new CacheSettingsTieredCacheModule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheSettingsTieredCacheModuleWithDefaults() *CacheSettingsTieredCacheModule {
	this := CacheSettingsTieredCacheModule{}
	return &this
}

// GetTopology returns the Topology field value if set, zero value otherwise.
func (o *CacheSettingsTieredCacheModule) GetTopology() string {
	if o == nil || IsNil(o.Topology) {
		var ret string
		return ret
	}
	return *o.Topology
}

// GetTopologyOk returns a tuple with the Topology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsTieredCacheModule) GetTopologyOk() (*string, bool) {
	if o == nil || IsNil(o.Topology) {
		return nil, false
	}
	return o.Topology, true
}

// HasTopology returns a boolean if a field has been set.
func (o *CacheSettingsTieredCacheModule) HasTopology() bool {
	if o != nil && !IsNil(o.Topology) {
		return true
	}

	return false
}

// SetTopology gets a reference to the given string and assigns it to the Topology field.
func (o *CacheSettingsTieredCacheModule) SetTopology(v string) {
	o.Topology = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CacheSettingsTieredCacheModule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsTieredCacheModule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CacheSettingsTieredCacheModule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CacheSettingsTieredCacheModule) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o CacheSettingsTieredCacheModule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheSettingsTieredCacheModule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Topology) {
		toSerialize["topology"] = o.Topology
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableCacheSettingsTieredCacheModule struct {
	value *CacheSettingsTieredCacheModule
	isSet bool
}

func (v NullableCacheSettingsTieredCacheModule) Get() *CacheSettingsTieredCacheModule {
	return v.value
}

func (v *NullableCacheSettingsTieredCacheModule) Set(val *CacheSettingsTieredCacheModule) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheSettingsTieredCacheModule) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheSettingsTieredCacheModule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheSettingsTieredCacheModule(val *CacheSettingsTieredCacheModule) *NullableCacheSettingsTieredCacheModule {
	return &NullableCacheSettingsTieredCacheModule{value: val, isSet: true}
}

func (v NullableCacheSettingsTieredCacheModule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheSettingsTieredCacheModule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



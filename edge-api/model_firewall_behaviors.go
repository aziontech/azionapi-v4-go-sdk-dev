/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FirewallBehaviors - struct for FirewallBehaviors
type FirewallBehaviors struct {
	FirewallBehaviorsFirewallBehaviorNoArguments *FirewallBehaviorsFirewallBehaviorNoArguments
	FirewallBehaviorsFirewallBehaviorRunFunction *FirewallBehaviorsFirewallBehaviorRunFunction
	FirewallBehaviorsFirewallBehaviorSetCustomResponse *FirewallBehaviorsFirewallBehaviorSetCustomResponse
	FirewallBehaviorsFirewallBehaviorSetRateLimit *FirewallBehaviorsFirewallBehaviorSetRateLimit
	FirewallBehaviorsFirewallBehaviorSetWaf *FirewallBehaviorsFirewallBehaviorSetWaf
	FirewallBehaviorsFirewallBehaviorTagEvent *FirewallBehaviorsFirewallBehaviorTagEvent
}

// FirewallBehaviorsFirewallBehaviorNoArgumentsAsFirewallBehaviors is a convenience function that returns FirewallBehaviorsFirewallBehaviorNoArguments wrapped in FirewallBehaviors
func FirewallBehaviorsFirewallBehaviorNoArgumentsAsFirewallBehaviors(v *FirewallBehaviorsFirewallBehaviorNoArguments) FirewallBehaviors {
	return FirewallBehaviors{
		FirewallBehaviorsFirewallBehaviorNoArguments: v,
	}
}

// FirewallBehaviorsFirewallBehaviorRunFunctionAsFirewallBehaviors is a convenience function that returns FirewallBehaviorsFirewallBehaviorRunFunction wrapped in FirewallBehaviors
func FirewallBehaviorsFirewallBehaviorRunFunctionAsFirewallBehaviors(v *FirewallBehaviorsFirewallBehaviorRunFunction) FirewallBehaviors {
	return FirewallBehaviors{
		FirewallBehaviorsFirewallBehaviorRunFunction: v,
	}
}

// FirewallBehaviorsFirewallBehaviorSetCustomResponseAsFirewallBehaviors is a convenience function that returns FirewallBehaviorsFirewallBehaviorSetCustomResponse wrapped in FirewallBehaviors
func FirewallBehaviorsFirewallBehaviorSetCustomResponseAsFirewallBehaviors(v *FirewallBehaviorsFirewallBehaviorSetCustomResponse) FirewallBehaviors {
	return FirewallBehaviors{
		FirewallBehaviorsFirewallBehaviorSetCustomResponse: v,
	}
}

// FirewallBehaviorsFirewallBehaviorSetRateLimitAsFirewallBehaviors is a convenience function that returns FirewallBehaviorsFirewallBehaviorSetRateLimit wrapped in FirewallBehaviors
func FirewallBehaviorsFirewallBehaviorSetRateLimitAsFirewallBehaviors(v *FirewallBehaviorsFirewallBehaviorSetRateLimit) FirewallBehaviors {
	return FirewallBehaviors{
		FirewallBehaviorsFirewallBehaviorSetRateLimit: v,
	}
}

// FirewallBehaviorsFirewallBehaviorSetWafAsFirewallBehaviors is a convenience function that returns FirewallBehaviorsFirewallBehaviorSetWaf wrapped in FirewallBehaviors
func FirewallBehaviorsFirewallBehaviorSetWafAsFirewallBehaviors(v *FirewallBehaviorsFirewallBehaviorSetWaf) FirewallBehaviors {
	return FirewallBehaviors{
		FirewallBehaviorsFirewallBehaviorSetWaf: v,
	}
}

// FirewallBehaviorsFirewallBehaviorTagEventAsFirewallBehaviors is a convenience function that returns FirewallBehaviorsFirewallBehaviorTagEvent wrapped in FirewallBehaviors
func FirewallBehaviorsFirewallBehaviorTagEventAsFirewallBehaviors(v *FirewallBehaviorsFirewallBehaviorTagEvent) FirewallBehaviors {
	return FirewallBehaviors{
		FirewallBehaviorsFirewallBehaviorTagEvent: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FirewallBehaviors) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FirewallBehaviorsFirewallBehaviorNoArguments
	err = newStrictDecoder(data).Decode(&dst.FirewallBehaviorsFirewallBehaviorNoArguments)
	if err == nil {
		jsonFirewallBehaviorsFirewallBehaviorNoArguments, _ := json.Marshal(dst.FirewallBehaviorsFirewallBehaviorNoArguments)
		if string(jsonFirewallBehaviorsFirewallBehaviorNoArguments) == "{}" { // empty struct
			dst.FirewallBehaviorsFirewallBehaviorNoArguments = nil
		} else {
			if err = validator.Validate(dst.FirewallBehaviorsFirewallBehaviorNoArguments); err != nil {
				dst.FirewallBehaviorsFirewallBehaviorNoArguments = nil
			} else {
				match++
			}
		}
	} else {
		dst.FirewallBehaviorsFirewallBehaviorNoArguments = nil
	}

	// try to unmarshal data into FirewallBehaviorsFirewallBehaviorRunFunction
	err = newStrictDecoder(data).Decode(&dst.FirewallBehaviorsFirewallBehaviorRunFunction)
	if err == nil {
		jsonFirewallBehaviorsFirewallBehaviorRunFunction, _ := json.Marshal(dst.FirewallBehaviorsFirewallBehaviorRunFunction)
		if string(jsonFirewallBehaviorsFirewallBehaviorRunFunction) == "{}" { // empty struct
			dst.FirewallBehaviorsFirewallBehaviorRunFunction = nil
		} else {
			if err = validator.Validate(dst.FirewallBehaviorsFirewallBehaviorRunFunction); err != nil {
				dst.FirewallBehaviorsFirewallBehaviorRunFunction = nil
			} else {
				match++
			}
		}
	} else {
		dst.FirewallBehaviorsFirewallBehaviorRunFunction = nil
	}

	// try to unmarshal data into FirewallBehaviorsFirewallBehaviorSetCustomResponse
	err = newStrictDecoder(data).Decode(&dst.FirewallBehaviorsFirewallBehaviorSetCustomResponse)
	if err == nil {
		jsonFirewallBehaviorsFirewallBehaviorSetCustomResponse, _ := json.Marshal(dst.FirewallBehaviorsFirewallBehaviorSetCustomResponse)
		if string(jsonFirewallBehaviorsFirewallBehaviorSetCustomResponse) == "{}" { // empty struct
			dst.FirewallBehaviorsFirewallBehaviorSetCustomResponse = nil
		} else {
			if err = validator.Validate(dst.FirewallBehaviorsFirewallBehaviorSetCustomResponse); err != nil {
				dst.FirewallBehaviorsFirewallBehaviorSetCustomResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.FirewallBehaviorsFirewallBehaviorSetCustomResponse = nil
	}

	// try to unmarshal data into FirewallBehaviorsFirewallBehaviorSetRateLimit
	err = newStrictDecoder(data).Decode(&dst.FirewallBehaviorsFirewallBehaviorSetRateLimit)
	if err == nil {
		jsonFirewallBehaviorsFirewallBehaviorSetRateLimit, _ := json.Marshal(dst.FirewallBehaviorsFirewallBehaviorSetRateLimit)
		if string(jsonFirewallBehaviorsFirewallBehaviorSetRateLimit) == "{}" { // empty struct
			dst.FirewallBehaviorsFirewallBehaviorSetRateLimit = nil
		} else {
			if err = validator.Validate(dst.FirewallBehaviorsFirewallBehaviorSetRateLimit); err != nil {
				dst.FirewallBehaviorsFirewallBehaviorSetRateLimit = nil
			} else {
				match++
			}
		}
	} else {
		dst.FirewallBehaviorsFirewallBehaviorSetRateLimit = nil
	}

	// try to unmarshal data into FirewallBehaviorsFirewallBehaviorSetWaf
	err = newStrictDecoder(data).Decode(&dst.FirewallBehaviorsFirewallBehaviorSetWaf)
	if err == nil {
		jsonFirewallBehaviorsFirewallBehaviorSetWaf, _ := json.Marshal(dst.FirewallBehaviorsFirewallBehaviorSetWaf)
		if string(jsonFirewallBehaviorsFirewallBehaviorSetWaf) == "{}" { // empty struct
			dst.FirewallBehaviorsFirewallBehaviorSetWaf = nil
		} else {
			if err = validator.Validate(dst.FirewallBehaviorsFirewallBehaviorSetWaf); err != nil {
				dst.FirewallBehaviorsFirewallBehaviorSetWaf = nil
			} else {
				match++
			}
		}
	} else {
		dst.FirewallBehaviorsFirewallBehaviorSetWaf = nil
	}

	// try to unmarshal data into FirewallBehaviorsFirewallBehaviorTagEvent
	err = newStrictDecoder(data).Decode(&dst.FirewallBehaviorsFirewallBehaviorTagEvent)
	if err == nil {
		jsonFirewallBehaviorsFirewallBehaviorTagEvent, _ := json.Marshal(dst.FirewallBehaviorsFirewallBehaviorTagEvent)
		if string(jsonFirewallBehaviorsFirewallBehaviorTagEvent) == "{}" { // empty struct
			dst.FirewallBehaviorsFirewallBehaviorTagEvent = nil
		} else {
			if err = validator.Validate(dst.FirewallBehaviorsFirewallBehaviorTagEvent); err != nil {
				dst.FirewallBehaviorsFirewallBehaviorTagEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.FirewallBehaviorsFirewallBehaviorTagEvent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FirewallBehaviorsFirewallBehaviorNoArguments = nil
		dst.FirewallBehaviorsFirewallBehaviorRunFunction = nil
		dst.FirewallBehaviorsFirewallBehaviorSetCustomResponse = nil
		dst.FirewallBehaviorsFirewallBehaviorSetRateLimit = nil
		dst.FirewallBehaviorsFirewallBehaviorSetWaf = nil
		dst.FirewallBehaviorsFirewallBehaviorTagEvent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FirewallBehaviors)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FirewallBehaviors)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FirewallBehaviors) MarshalJSON() ([]byte, error) {
	if src.FirewallBehaviorsFirewallBehaviorNoArguments != nil {
		return json.Marshal(&src.FirewallBehaviorsFirewallBehaviorNoArguments)
	}

	if src.FirewallBehaviorsFirewallBehaviorRunFunction != nil {
		return json.Marshal(&src.FirewallBehaviorsFirewallBehaviorRunFunction)
	}

	if src.FirewallBehaviorsFirewallBehaviorSetCustomResponse != nil {
		return json.Marshal(&src.FirewallBehaviorsFirewallBehaviorSetCustomResponse)
	}

	if src.FirewallBehaviorsFirewallBehaviorSetRateLimit != nil {
		return json.Marshal(&src.FirewallBehaviorsFirewallBehaviorSetRateLimit)
	}

	if src.FirewallBehaviorsFirewallBehaviorSetWaf != nil {
		return json.Marshal(&src.FirewallBehaviorsFirewallBehaviorSetWaf)
	}

	if src.FirewallBehaviorsFirewallBehaviorTagEvent != nil {
		return json.Marshal(&src.FirewallBehaviorsFirewallBehaviorTagEvent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FirewallBehaviors) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FirewallBehaviorsFirewallBehaviorNoArguments != nil {
		return obj.FirewallBehaviorsFirewallBehaviorNoArguments
	}

	if obj.FirewallBehaviorsFirewallBehaviorRunFunction != nil {
		return obj.FirewallBehaviorsFirewallBehaviorRunFunction
	}

	if obj.FirewallBehaviorsFirewallBehaviorSetCustomResponse != nil {
		return obj.FirewallBehaviorsFirewallBehaviorSetCustomResponse
	}

	if obj.FirewallBehaviorsFirewallBehaviorSetRateLimit != nil {
		return obj.FirewallBehaviorsFirewallBehaviorSetRateLimit
	}

	if obj.FirewallBehaviorsFirewallBehaviorSetWaf != nil {
		return obj.FirewallBehaviorsFirewallBehaviorSetWaf
	}

	if obj.FirewallBehaviorsFirewallBehaviorTagEvent != nil {
		return obj.FirewallBehaviorsFirewallBehaviorTagEvent
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FirewallBehaviors) GetActualInstanceValue() (interface{}) {
	if obj.FirewallBehaviorsFirewallBehaviorNoArguments != nil {
		return *obj.FirewallBehaviorsFirewallBehaviorNoArguments
	}

	if obj.FirewallBehaviorsFirewallBehaviorRunFunction != nil {
		return *obj.FirewallBehaviorsFirewallBehaviorRunFunction
	}

	if obj.FirewallBehaviorsFirewallBehaviorSetCustomResponse != nil {
		return *obj.FirewallBehaviorsFirewallBehaviorSetCustomResponse
	}

	if obj.FirewallBehaviorsFirewallBehaviorSetRateLimit != nil {
		return *obj.FirewallBehaviorsFirewallBehaviorSetRateLimit
	}

	if obj.FirewallBehaviorsFirewallBehaviorSetWaf != nil {
		return *obj.FirewallBehaviorsFirewallBehaviorSetWaf
	}

	if obj.FirewallBehaviorsFirewallBehaviorTagEvent != nil {
		return *obj.FirewallBehaviorsFirewallBehaviorTagEvent
	}

	// all schemas are nil
	return nil
}

type NullableFirewallBehaviors struct {
	value *FirewallBehaviors
	isSet bool
}

func (v NullableFirewallBehaviors) Get() *FirewallBehaviors {
	return v.value
}

func (v *NullableFirewallBehaviors) Set(val *FirewallBehaviors) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallBehaviors) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallBehaviors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallBehaviors(val *FirewallBehaviors) *NullableFirewallBehaviors {
	return &NullableFirewallBehaviors{value: val, isSet: true}
}

func (v NullableFirewallBehaviors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallBehaviors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



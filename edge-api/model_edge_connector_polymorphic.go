/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// EdgeConnectorPolymorphic - struct for EdgeConnectorPolymorphic
type EdgeConnectorPolymorphic struct {
	EdgeConnectorHTTP *EdgeConnectorHTTP
	EdgeConnectorLiveIngest *EdgeConnectorLiveIngest
	EdgeConnectorStorage *EdgeConnectorStorage
}

// EdgeConnectorHTTPAsEdgeConnectorPolymorphic is a convenience function that returns EdgeConnectorHTTP wrapped in EdgeConnectorPolymorphic
func EdgeConnectorHTTPAsEdgeConnectorPolymorphic(v *EdgeConnectorHTTP) EdgeConnectorPolymorphic {
	return EdgeConnectorPolymorphic{
		EdgeConnectorHTTP: v,
	}
}

// EdgeConnectorLiveIngestAsEdgeConnectorPolymorphic is a convenience function that returns EdgeConnectorLiveIngest wrapped in EdgeConnectorPolymorphic
func EdgeConnectorLiveIngestAsEdgeConnectorPolymorphic(v *EdgeConnectorLiveIngest) EdgeConnectorPolymorphic {
	return EdgeConnectorPolymorphic{
		EdgeConnectorLiveIngest: v,
	}
}

// EdgeConnectorStorageAsEdgeConnectorPolymorphic is a convenience function that returns EdgeConnectorStorage wrapped in EdgeConnectorPolymorphic
func EdgeConnectorStorageAsEdgeConnectorPolymorphic(v *EdgeConnectorStorage) EdgeConnectorPolymorphic {
	return EdgeConnectorPolymorphic{
		EdgeConnectorStorage: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EdgeConnectorPolymorphic) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EdgeConnectorHTTP
	err = newStrictDecoder(data).Decode(&dst.EdgeConnectorHTTP)
	if err == nil {
		jsonEdgeConnectorHTTP, _ := json.Marshal(dst.EdgeConnectorHTTP)
		if string(jsonEdgeConnectorHTTP) == "{}" { // empty struct
			dst.EdgeConnectorHTTP = nil
		} else {
			if err = validator.Validate(dst.EdgeConnectorHTTP); err != nil {
				dst.EdgeConnectorHTTP = nil
			} else {
				match++
			}
		}
	} else {
		dst.EdgeConnectorHTTP = nil
	}

	// try to unmarshal data into EdgeConnectorLiveIngest
	err = newStrictDecoder(data).Decode(&dst.EdgeConnectorLiveIngest)
	if err == nil {
		jsonEdgeConnectorLiveIngest, _ := json.Marshal(dst.EdgeConnectorLiveIngest)
		if string(jsonEdgeConnectorLiveIngest) == "{}" { // empty struct
			dst.EdgeConnectorLiveIngest = nil
		} else {
			if err = validator.Validate(dst.EdgeConnectorLiveIngest); err != nil {
				dst.EdgeConnectorLiveIngest = nil
			} else {
				match++
			}
		}
	} else {
		dst.EdgeConnectorLiveIngest = nil
	}

	// try to unmarshal data into EdgeConnectorStorage
	err = newStrictDecoder(data).Decode(&dst.EdgeConnectorStorage)
	if err == nil {
		jsonEdgeConnectorStorage, _ := json.Marshal(dst.EdgeConnectorStorage)
		if string(jsonEdgeConnectorStorage) == "{}" { // empty struct
			dst.EdgeConnectorStorage = nil
		} else {
			if err = validator.Validate(dst.EdgeConnectorStorage); err != nil {
				dst.EdgeConnectorStorage = nil
			} else {
				match++
			}
		}
	} else {
		dst.EdgeConnectorStorage = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EdgeConnectorHTTP = nil
		dst.EdgeConnectorLiveIngest = nil
		dst.EdgeConnectorStorage = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EdgeConnectorPolymorphic)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EdgeConnectorPolymorphic)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EdgeConnectorPolymorphic) MarshalJSON() ([]byte, error) {
	if src.EdgeConnectorHTTP != nil {
		return json.Marshal(&src.EdgeConnectorHTTP)
	}

	if src.EdgeConnectorLiveIngest != nil {
		return json.Marshal(&src.EdgeConnectorLiveIngest)
	}

	if src.EdgeConnectorStorage != nil {
		return json.Marshal(&src.EdgeConnectorStorage)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EdgeConnectorPolymorphic) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EdgeConnectorHTTP != nil {
		return obj.EdgeConnectorHTTP
	}

	if obj.EdgeConnectorLiveIngest != nil {
		return obj.EdgeConnectorLiveIngest
	}

	if obj.EdgeConnectorStorage != nil {
		return obj.EdgeConnectorStorage
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EdgeConnectorPolymorphic) GetActualInstanceValue() (interface{}) {
	if obj.EdgeConnectorHTTP != nil {
		return *obj.EdgeConnectorHTTP
	}

	if obj.EdgeConnectorLiveIngest != nil {
		return *obj.EdgeConnectorLiveIngest
	}

	if obj.EdgeConnectorStorage != nil {
		return *obj.EdgeConnectorStorage
	}

	// all schemas are nil
	return nil
}

type NullableEdgeConnectorPolymorphic struct {
	value *EdgeConnectorPolymorphic
	isSet bool
}

func (v NullableEdgeConnectorPolymorphic) Get() *EdgeConnectorPolymorphic {
	return v.value
}

func (v *NullableEdgeConnectorPolymorphic) Set(val *EdgeConnectorPolymorphic) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeConnectorPolymorphic) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeConnectorPolymorphic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeConnectorPolymorphic(val *EdgeConnectorPolymorphic) *NullableEdgeConnectorPolymorphic {
	return &NullableEdgeConnectorPolymorphic{value: val, isSet: true}
}

func (v NullableEdgeConnectorPolymorphic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeConnectorPolymorphic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



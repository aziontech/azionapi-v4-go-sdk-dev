/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomPageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomPageRequest{}

// CustomPageRequest struct for CustomPageRequest
type CustomPageRequest struct {
	Name string `json:"name"`
	Active *bool `json:"active,omitempty"`
	Pages []PageRequest `json:"pages"`
}

type _CustomPageRequest CustomPageRequest

// NewCustomPageRequest instantiates a new CustomPageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomPageRequest(name string, pages []PageRequest) *CustomPageRequest {
	this := CustomPageRequest{}
	this.Name = name
	this.Pages = pages
	return &this
}

// NewCustomPageRequestWithDefaults instantiates a new CustomPageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomPageRequestWithDefaults() *CustomPageRequest {
	this := CustomPageRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CustomPageRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomPageRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomPageRequest) SetName(v string) {
	o.Name = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CustomPageRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomPageRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CustomPageRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CustomPageRequest) SetActive(v bool) {
	o.Active = &v
}

// GetPages returns the Pages field value
func (o *CustomPageRequest) GetPages() []PageRequest {
	if o == nil {
		var ret []PageRequest
		return ret
	}

	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value
// and a boolean to check if the value has been set.
func (o *CustomPageRequest) GetPagesOk() ([]PageRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pages, true
}

// SetPages sets field value
func (o *CustomPageRequest) SetPages(v []PageRequest) {
	o.Pages = v
}

func (o CustomPageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomPageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["pages"] = o.Pages
	return toSerialize, nil
}

func (o *CustomPageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"pages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomPageRequest := _CustomPageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomPageRequest)

	if err != nil {
		return err
	}

	*o = CustomPageRequest(varCustomPageRequest)

	return err
}

type NullableCustomPageRequest struct {
	value *CustomPageRequest
	isSet bool
}

func (v NullableCustomPageRequest) Get() *CustomPageRequest {
	return v.value
}

func (v *NullableCustomPageRequest) Set(val *CustomPageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomPageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomPageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomPageRequest(val *CustomPageRequest) *NullableCustomPageRequest {
	return &NullableCustomPageRequest{value: val, isSet: true}
}

func (v NullableCustomPageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomPageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



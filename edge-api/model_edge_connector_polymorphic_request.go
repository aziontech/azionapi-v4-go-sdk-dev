/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// EdgeConnectorPolymorphicRequest - struct for EdgeConnectorPolymorphicRequest
type EdgeConnectorPolymorphicRequest struct {
	EdgeConnectorHTTPRequest *EdgeConnectorHTTPRequest
	EdgeConnectorLiveIngestRequest *EdgeConnectorLiveIngestRequest
	EdgeConnectorStorageRequest *EdgeConnectorStorageRequest
}

// EdgeConnectorHTTPRequestAsEdgeConnectorPolymorphicRequest is a convenience function that returns EdgeConnectorHTTPRequest wrapped in EdgeConnectorPolymorphicRequest
func EdgeConnectorHTTPRequestAsEdgeConnectorPolymorphicRequest(v *EdgeConnectorHTTPRequest) EdgeConnectorPolymorphicRequest {
	return EdgeConnectorPolymorphicRequest{
		EdgeConnectorHTTPRequest: v,
	}
}

// EdgeConnectorLiveIngestRequestAsEdgeConnectorPolymorphicRequest is a convenience function that returns EdgeConnectorLiveIngestRequest wrapped in EdgeConnectorPolymorphicRequest
func EdgeConnectorLiveIngestRequestAsEdgeConnectorPolymorphicRequest(v *EdgeConnectorLiveIngestRequest) EdgeConnectorPolymorphicRequest {
	return EdgeConnectorPolymorphicRequest{
		EdgeConnectorLiveIngestRequest: v,
	}
}

// EdgeConnectorStorageRequestAsEdgeConnectorPolymorphicRequest is a convenience function that returns EdgeConnectorStorageRequest wrapped in EdgeConnectorPolymorphicRequest
func EdgeConnectorStorageRequestAsEdgeConnectorPolymorphicRequest(v *EdgeConnectorStorageRequest) EdgeConnectorPolymorphicRequest {
	return EdgeConnectorPolymorphicRequest{
		EdgeConnectorStorageRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EdgeConnectorPolymorphicRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EdgeConnectorHTTPRequest
	err = newStrictDecoder(data).Decode(&dst.EdgeConnectorHTTPRequest)
	if err == nil {
		jsonEdgeConnectorHTTPRequest, _ := json.Marshal(dst.EdgeConnectorHTTPRequest)
		if string(jsonEdgeConnectorHTTPRequest) == "{}" { // empty struct
			dst.EdgeConnectorHTTPRequest = nil
		} else {
			if err = validator.Validate(dst.EdgeConnectorHTTPRequest); err != nil {
				dst.EdgeConnectorHTTPRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.EdgeConnectorHTTPRequest = nil
	}

	// try to unmarshal data into EdgeConnectorLiveIngestRequest
	err = newStrictDecoder(data).Decode(&dst.EdgeConnectorLiveIngestRequest)
	if err == nil {
		jsonEdgeConnectorLiveIngestRequest, _ := json.Marshal(dst.EdgeConnectorLiveIngestRequest)
		if string(jsonEdgeConnectorLiveIngestRequest) == "{}" { // empty struct
			dst.EdgeConnectorLiveIngestRequest = nil
		} else {
			if err = validator.Validate(dst.EdgeConnectorLiveIngestRequest); err != nil {
				dst.EdgeConnectorLiveIngestRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.EdgeConnectorLiveIngestRequest = nil
	}

	// try to unmarshal data into EdgeConnectorStorageRequest
	err = newStrictDecoder(data).Decode(&dst.EdgeConnectorStorageRequest)
	if err == nil {
		jsonEdgeConnectorStorageRequest, _ := json.Marshal(dst.EdgeConnectorStorageRequest)
		if string(jsonEdgeConnectorStorageRequest) == "{}" { // empty struct
			dst.EdgeConnectorStorageRequest = nil
		} else {
			if err = validator.Validate(dst.EdgeConnectorStorageRequest); err != nil {
				dst.EdgeConnectorStorageRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.EdgeConnectorStorageRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EdgeConnectorHTTPRequest = nil
		dst.EdgeConnectorLiveIngestRequest = nil
		dst.EdgeConnectorStorageRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EdgeConnectorPolymorphicRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EdgeConnectorPolymorphicRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EdgeConnectorPolymorphicRequest) MarshalJSON() ([]byte, error) {
	if src.EdgeConnectorHTTPRequest != nil {
		return json.Marshal(&src.EdgeConnectorHTTPRequest)
	}

	if src.EdgeConnectorLiveIngestRequest != nil {
		return json.Marshal(&src.EdgeConnectorLiveIngestRequest)
	}

	if src.EdgeConnectorStorageRequest != nil {
		return json.Marshal(&src.EdgeConnectorStorageRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EdgeConnectorPolymorphicRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EdgeConnectorHTTPRequest != nil {
		return obj.EdgeConnectorHTTPRequest
	}

	if obj.EdgeConnectorLiveIngestRequest != nil {
		return obj.EdgeConnectorLiveIngestRequest
	}

	if obj.EdgeConnectorStorageRequest != nil {
		return obj.EdgeConnectorStorageRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EdgeConnectorPolymorphicRequest) GetActualInstanceValue() (interface{}) {
	if obj.EdgeConnectorHTTPRequest != nil {
		return *obj.EdgeConnectorHTTPRequest
	}

	if obj.EdgeConnectorLiveIngestRequest != nil {
		return *obj.EdgeConnectorLiveIngestRequest
	}

	if obj.EdgeConnectorStorageRequest != nil {
		return *obj.EdgeConnectorStorageRequest
	}

	// all schemas are nil
	return nil
}

type NullableEdgeConnectorPolymorphicRequest struct {
	value *EdgeConnectorPolymorphicRequest
	isSet bool
}

func (v NullableEdgeConnectorPolymorphicRequest) Get() *EdgeConnectorPolymorphicRequest {
	return v.value
}

func (v *NullableEdgeConnectorPolymorphicRequest) Set(val *EdgeConnectorPolymorphicRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeConnectorPolymorphicRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeConnectorPolymorphicRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeConnectorPolymorphicRequest(val *EdgeConnectorPolymorphicRequest) *NullableEdgeConnectorPolymorphicRequest {
	return &NullableEdgeConnectorPolymorphicRequest{value: val, isSet: true}
}

func (v NullableEdgeConnectorPolymorphicRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeConnectorPolymorphicRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ConnectorPolymorphicRequest - struct for ConnectorPolymorphicRequest
type ConnectorPolymorphicRequest struct {
	ConnectorHTTPRequest *ConnectorHTTPRequest
	ConnectorLiveIngestRequest *ConnectorLiveIngestRequest
	ConnectorStorageRequest *ConnectorStorageRequest
}

// ConnectorHTTPRequestAsConnectorPolymorphicRequest is a convenience function that returns ConnectorHTTPRequest wrapped in ConnectorPolymorphicRequest
func ConnectorHTTPRequestAsConnectorPolymorphicRequest(v *ConnectorHTTPRequest) ConnectorPolymorphicRequest {
	return ConnectorPolymorphicRequest{
		ConnectorHTTPRequest: v,
	}
}

// ConnectorLiveIngestRequestAsConnectorPolymorphicRequest is a convenience function that returns ConnectorLiveIngestRequest wrapped in ConnectorPolymorphicRequest
func ConnectorLiveIngestRequestAsConnectorPolymorphicRequest(v *ConnectorLiveIngestRequest) ConnectorPolymorphicRequest {
	return ConnectorPolymorphicRequest{
		ConnectorLiveIngestRequest: v,
	}
}

// ConnectorStorageRequestAsConnectorPolymorphicRequest is a convenience function that returns ConnectorStorageRequest wrapped in ConnectorPolymorphicRequest
func ConnectorStorageRequestAsConnectorPolymorphicRequest(v *ConnectorStorageRequest) ConnectorPolymorphicRequest {
	return ConnectorPolymorphicRequest{
		ConnectorStorageRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConnectorPolymorphicRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ConnectorHTTPRequest
	err = newStrictDecoder(data).Decode(&dst.ConnectorHTTPRequest)
	if err == nil {
		jsonConnectorHTTPRequest, _ := json.Marshal(dst.ConnectorHTTPRequest)
		if string(jsonConnectorHTTPRequest) == "{}" { // empty struct
			dst.ConnectorHTTPRequest = nil
		} else {
			if err = validator.Validate(dst.ConnectorHTTPRequest); err != nil {
				dst.ConnectorHTTPRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConnectorHTTPRequest = nil
	}

	// try to unmarshal data into ConnectorLiveIngestRequest
	err = newStrictDecoder(data).Decode(&dst.ConnectorLiveIngestRequest)
	if err == nil {
		jsonConnectorLiveIngestRequest, _ := json.Marshal(dst.ConnectorLiveIngestRequest)
		if string(jsonConnectorLiveIngestRequest) == "{}" { // empty struct
			dst.ConnectorLiveIngestRequest = nil
		} else {
			if err = validator.Validate(dst.ConnectorLiveIngestRequest); err != nil {
				dst.ConnectorLiveIngestRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConnectorLiveIngestRequest = nil
	}

	// try to unmarshal data into ConnectorStorageRequest
	err = newStrictDecoder(data).Decode(&dst.ConnectorStorageRequest)
	if err == nil {
		jsonConnectorStorageRequest, _ := json.Marshal(dst.ConnectorStorageRequest)
		if string(jsonConnectorStorageRequest) == "{}" { // empty struct
			dst.ConnectorStorageRequest = nil
		} else {
			if err = validator.Validate(dst.ConnectorStorageRequest); err != nil {
				dst.ConnectorStorageRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConnectorStorageRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ConnectorHTTPRequest = nil
		dst.ConnectorLiveIngestRequest = nil
		dst.ConnectorStorageRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ConnectorPolymorphicRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ConnectorPolymorphicRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConnectorPolymorphicRequest) MarshalJSON() ([]byte, error) {
	if src.ConnectorHTTPRequest != nil {
		return json.Marshal(&src.ConnectorHTTPRequest)
	}

	if src.ConnectorLiveIngestRequest != nil {
		return json.Marshal(&src.ConnectorLiveIngestRequest)
	}

	if src.ConnectorStorageRequest != nil {
		return json.Marshal(&src.ConnectorStorageRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConnectorPolymorphicRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ConnectorHTTPRequest != nil {
		return obj.ConnectorHTTPRequest
	}

	if obj.ConnectorLiveIngestRequest != nil {
		return obj.ConnectorLiveIngestRequest
	}

	if obj.ConnectorStorageRequest != nil {
		return obj.ConnectorStorageRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ConnectorPolymorphicRequest) GetActualInstanceValue() (interface{}) {
	if obj.ConnectorHTTPRequest != nil {
		return *obj.ConnectorHTTPRequest
	}

	if obj.ConnectorLiveIngestRequest != nil {
		return *obj.ConnectorLiveIngestRequest
	}

	if obj.ConnectorStorageRequest != nil {
		return *obj.ConnectorStorageRequest
	}

	// all schemas are nil
	return nil
}

type NullableConnectorPolymorphicRequest struct {
	value *ConnectorPolymorphicRequest
	isSet bool
}

func (v NullableConnectorPolymorphicRequest) Get() *ConnectorPolymorphicRequest {
	return v.value
}

func (v *NullableConnectorPolymorphicRequest) Set(val *ConnectorPolymorphicRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorPolymorphicRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorPolymorphicRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorPolymorphicRequest(val *ConnectorPolymorphicRequest) *NullableConnectorPolymorphicRequest {
	return &NullableConnectorPolymorphicRequest{value: val, isSet: true}
}

func (v NullableConnectorPolymorphicRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorPolymorphicRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



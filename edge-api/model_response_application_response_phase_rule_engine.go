/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResponseApplicationResponsePhaseRuleEngine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseApplicationResponsePhaseRuleEngine{}

// ResponseApplicationResponsePhaseRuleEngine struct for ResponseApplicationResponsePhaseRuleEngine
type ResponseApplicationResponsePhaseRuleEngine struct {
	State *string `json:"state,omitempty"`
	Data ApplicationResponsePhaseRuleEngine `json:"data"`
}

type _ResponseApplicationResponsePhaseRuleEngine ResponseApplicationResponsePhaseRuleEngine

// NewResponseApplicationResponsePhaseRuleEngine instantiates a new ResponseApplicationResponsePhaseRuleEngine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseApplicationResponsePhaseRuleEngine(data ApplicationResponsePhaseRuleEngine) *ResponseApplicationResponsePhaseRuleEngine {
	this := ResponseApplicationResponsePhaseRuleEngine{}
	this.Data = data
	return &this
}

// NewResponseApplicationResponsePhaseRuleEngineWithDefaults instantiates a new ResponseApplicationResponsePhaseRuleEngine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseApplicationResponsePhaseRuleEngineWithDefaults() *ResponseApplicationResponsePhaseRuleEngine {
	this := ResponseApplicationResponsePhaseRuleEngine{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ResponseApplicationResponsePhaseRuleEngine) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseApplicationResponsePhaseRuleEngine) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ResponseApplicationResponsePhaseRuleEngine) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ResponseApplicationResponsePhaseRuleEngine) SetState(v string) {
	o.State = &v
}

// GetData returns the Data field value
func (o *ResponseApplicationResponsePhaseRuleEngine) GetData() ApplicationResponsePhaseRuleEngine {
	if o == nil {
		var ret ApplicationResponsePhaseRuleEngine
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ResponseApplicationResponsePhaseRuleEngine) GetDataOk() (*ApplicationResponsePhaseRuleEngine, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ResponseApplicationResponsePhaseRuleEngine) SetData(v ApplicationResponsePhaseRuleEngine) {
	o.Data = v
}

func (o ResponseApplicationResponsePhaseRuleEngine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseApplicationResponsePhaseRuleEngine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *ResponseApplicationResponsePhaseRuleEngine) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseApplicationResponsePhaseRuleEngine := _ResponseApplicationResponsePhaseRuleEngine{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResponseApplicationResponsePhaseRuleEngine)

	if err != nil {
		return err
	}

	*o = ResponseApplicationResponsePhaseRuleEngine(varResponseApplicationResponsePhaseRuleEngine)

	return err
}

type NullableResponseApplicationResponsePhaseRuleEngine struct {
	value *ResponseApplicationResponsePhaseRuleEngine
	isSet bool
}

func (v NullableResponseApplicationResponsePhaseRuleEngine) Get() *ResponseApplicationResponsePhaseRuleEngine {
	return v.value
}

func (v *NullableResponseApplicationResponsePhaseRuleEngine) Set(val *ResponseApplicationResponsePhaseRuleEngine) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseApplicationResponsePhaseRuleEngine) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseApplicationResponsePhaseRuleEngine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseApplicationResponsePhaseRuleEngine(val *ResponseApplicationResponsePhaseRuleEngine) *NullableResponseApplicationResponsePhaseRuleEngine {
	return &NullableResponseApplicationResponsePhaseRuleEngine{value: val, isSet: true}
}

func (v NullableResponseApplicationResponsePhaseRuleEngine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseApplicationResponsePhaseRuleEngine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge-api

import (
	"encoding/json"
)

// checks if the HttpProtocol type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpProtocol{}

// HttpProtocol struct for HttpProtocol
type HttpProtocol struct {
	Versions []string `json:"versions,omitempty"`
	HttpPorts []int64 `json:"http_ports,omitempty"`
	HttpsPorts []int64 `json:"https_ports,omitempty"`
	QuicPorts []int64 `json:"quic_ports,omitempty"`
}

// NewHttpProtocol instantiates a new HttpProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpProtocol() *HttpProtocol {
	this := HttpProtocol{}
	return &this
}

// NewHttpProtocolWithDefaults instantiates a new HttpProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpProtocolWithDefaults() *HttpProtocol {
	this := HttpProtocol{}
	return &this
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *HttpProtocol) GetVersions() []string {
	if o == nil || IsNil(o.Versions) {
		var ret []string
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpProtocol) GetVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *HttpProtocol) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *HttpProtocol) SetVersions(v []string) {
	o.Versions = v
}

// GetHttpPorts returns the HttpPorts field value if set, zero value otherwise.
func (o *HttpProtocol) GetHttpPorts() []int64 {
	if o == nil || IsNil(o.HttpPorts) {
		var ret []int64
		return ret
	}
	return o.HttpPorts
}

// GetHttpPortsOk returns a tuple with the HttpPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpProtocol) GetHttpPortsOk() ([]int64, bool) {
	if o == nil || IsNil(o.HttpPorts) {
		return nil, false
	}
	return o.HttpPorts, true
}

// HasHttpPorts returns a boolean if a field has been set.
func (o *HttpProtocol) HasHttpPorts() bool {
	if o != nil && !IsNil(o.HttpPorts) {
		return true
	}

	return false
}

// SetHttpPorts gets a reference to the given []int64 and assigns it to the HttpPorts field.
func (o *HttpProtocol) SetHttpPorts(v []int64) {
	o.HttpPorts = v
}

// GetHttpsPorts returns the HttpsPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HttpProtocol) GetHttpsPorts() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.HttpsPorts
}

// GetHttpsPortsOk returns a tuple with the HttpsPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HttpProtocol) GetHttpsPortsOk() ([]int64, bool) {
	if o == nil || IsNil(o.HttpsPorts) {
		return nil, false
	}
	return o.HttpsPorts, true
}

// HasHttpsPorts returns a boolean if a field has been set.
func (o *HttpProtocol) HasHttpsPorts() bool {
	if o != nil && !IsNil(o.HttpsPorts) {
		return true
	}

	return false
}

// SetHttpsPorts gets a reference to the given []int64 and assigns it to the HttpsPorts field.
func (o *HttpProtocol) SetHttpsPorts(v []int64) {
	o.HttpsPorts = v
}

// GetQuicPorts returns the QuicPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HttpProtocol) GetQuicPorts() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.QuicPorts
}

// GetQuicPortsOk returns a tuple with the QuicPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HttpProtocol) GetQuicPortsOk() ([]int64, bool) {
	if o == nil || IsNil(o.QuicPorts) {
		return nil, false
	}
	return o.QuicPorts, true
}

// HasQuicPorts returns a boolean if a field has been set.
func (o *HttpProtocol) HasQuicPorts() bool {
	if o != nil && !IsNil(o.QuicPorts) {
		return true
	}

	return false
}

// SetQuicPorts gets a reference to the given []int64 and assigns it to the QuicPorts field.
func (o *HttpProtocol) SetQuicPorts(v []int64) {
	o.QuicPorts = v
}

func (o HttpProtocol) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpProtocol) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	if !IsNil(o.HttpPorts) {
		toSerialize["http_ports"] = o.HttpPorts
	}
	if o.HttpsPorts != nil {
		toSerialize["https_ports"] = o.HttpsPorts
	}
	if o.QuicPorts != nil {
		toSerialize["quic_ports"] = o.QuicPorts
	}
	return toSerialize, nil
}

type NullableHttpProtocol struct {
	value *HttpProtocol
	isSet bool
}

func (v NullableHttpProtocol) Get() *HttpProtocol {
	return v.value
}

func (v *NullableHttpProtocol) Set(val *HttpProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpProtocol(val *HttpProtocol) *NullableHttpProtocol {
	return &NullableHttpProtocol{value: val, isSet: true}
}

func (v NullableHttpProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



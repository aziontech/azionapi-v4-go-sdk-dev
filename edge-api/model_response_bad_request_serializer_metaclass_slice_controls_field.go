/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge-api

import (
	"encoding/json"
)

// checks if the ResponseBadRequestSerializerMetaclassSliceControlsField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseBadRequestSerializerMetaclassSliceControlsField{}

// ResponseBadRequestSerializerMetaclassSliceControlsField struct for ResponseBadRequestSerializerMetaclassSliceControlsField
type ResponseBadRequestSerializerMetaclassSliceControlsField struct {
	SliceConfigurationEnabled []string `json:"slice_configuration_enabled,omitempty"`
	SliceEdgeCachingEnabled []string `json:"slice_edge_caching_enabled,omitempty"`
	SliceTieredCachingEnabled []string `json:"slice_tiered_caching_enabled,omitempty"`
	SliceConfigurationRange []string `json:"slice_configuration_range,omitempty"`
}

// NewResponseBadRequestSerializerMetaclassSliceControlsField instantiates a new ResponseBadRequestSerializerMetaclassSliceControlsField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseBadRequestSerializerMetaclassSliceControlsField() *ResponseBadRequestSerializerMetaclassSliceControlsField {
	this := ResponseBadRequestSerializerMetaclassSliceControlsField{}
	return &this
}

// NewResponseBadRequestSerializerMetaclassSliceControlsFieldWithDefaults instantiates a new ResponseBadRequestSerializerMetaclassSliceControlsField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseBadRequestSerializerMetaclassSliceControlsFieldWithDefaults() *ResponseBadRequestSerializerMetaclassSliceControlsField {
	this := ResponseBadRequestSerializerMetaclassSliceControlsField{}
	return &this
}

// GetSliceConfigurationEnabled returns the SliceConfigurationEnabled field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) GetSliceConfigurationEnabled() []string {
	if o == nil || IsNil(o.SliceConfigurationEnabled) {
		var ret []string
		return ret
	}
	return o.SliceConfigurationEnabled
}

// GetSliceConfigurationEnabledOk returns a tuple with the SliceConfigurationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) GetSliceConfigurationEnabledOk() ([]string, bool) {
	if o == nil || IsNil(o.SliceConfigurationEnabled) {
		return nil, false
	}
	return o.SliceConfigurationEnabled, true
}

// HasSliceConfigurationEnabled returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) HasSliceConfigurationEnabled() bool {
	if o != nil && !IsNil(o.SliceConfigurationEnabled) {
		return true
	}

	return false
}

// SetSliceConfigurationEnabled gets a reference to the given []string and assigns it to the SliceConfigurationEnabled field.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) SetSliceConfigurationEnabled(v []string) {
	o.SliceConfigurationEnabled = v
}

// GetSliceEdgeCachingEnabled returns the SliceEdgeCachingEnabled field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) GetSliceEdgeCachingEnabled() []string {
	if o == nil || IsNil(o.SliceEdgeCachingEnabled) {
		var ret []string
		return ret
	}
	return o.SliceEdgeCachingEnabled
}

// GetSliceEdgeCachingEnabledOk returns a tuple with the SliceEdgeCachingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) GetSliceEdgeCachingEnabledOk() ([]string, bool) {
	if o == nil || IsNil(o.SliceEdgeCachingEnabled) {
		return nil, false
	}
	return o.SliceEdgeCachingEnabled, true
}

// HasSliceEdgeCachingEnabled returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) HasSliceEdgeCachingEnabled() bool {
	if o != nil && !IsNil(o.SliceEdgeCachingEnabled) {
		return true
	}

	return false
}

// SetSliceEdgeCachingEnabled gets a reference to the given []string and assigns it to the SliceEdgeCachingEnabled field.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) SetSliceEdgeCachingEnabled(v []string) {
	o.SliceEdgeCachingEnabled = v
}

// GetSliceTieredCachingEnabled returns the SliceTieredCachingEnabled field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) GetSliceTieredCachingEnabled() []string {
	if o == nil || IsNil(o.SliceTieredCachingEnabled) {
		var ret []string
		return ret
	}
	return o.SliceTieredCachingEnabled
}

// GetSliceTieredCachingEnabledOk returns a tuple with the SliceTieredCachingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) GetSliceTieredCachingEnabledOk() ([]string, bool) {
	if o == nil || IsNil(o.SliceTieredCachingEnabled) {
		return nil, false
	}
	return o.SliceTieredCachingEnabled, true
}

// HasSliceTieredCachingEnabled returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) HasSliceTieredCachingEnabled() bool {
	if o != nil && !IsNil(o.SliceTieredCachingEnabled) {
		return true
	}

	return false
}

// SetSliceTieredCachingEnabled gets a reference to the given []string and assigns it to the SliceTieredCachingEnabled field.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) SetSliceTieredCachingEnabled(v []string) {
	o.SliceTieredCachingEnabled = v
}

// GetSliceConfigurationRange returns the SliceConfigurationRange field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) GetSliceConfigurationRange() []string {
	if o == nil || IsNil(o.SliceConfigurationRange) {
		var ret []string
		return ret
	}
	return o.SliceConfigurationRange
}

// GetSliceConfigurationRangeOk returns a tuple with the SliceConfigurationRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) GetSliceConfigurationRangeOk() ([]string, bool) {
	if o == nil || IsNil(o.SliceConfigurationRange) {
		return nil, false
	}
	return o.SliceConfigurationRange, true
}

// HasSliceConfigurationRange returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) HasSliceConfigurationRange() bool {
	if o != nil && !IsNil(o.SliceConfigurationRange) {
		return true
	}

	return false
}

// SetSliceConfigurationRange gets a reference to the given []string and assigns it to the SliceConfigurationRange field.
func (o *ResponseBadRequestSerializerMetaclassSliceControlsField) SetSliceConfigurationRange(v []string) {
	o.SliceConfigurationRange = v
}

func (o ResponseBadRequestSerializerMetaclassSliceControlsField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseBadRequestSerializerMetaclassSliceControlsField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SliceConfigurationEnabled) {
		toSerialize["slice_configuration_enabled"] = o.SliceConfigurationEnabled
	}
	if !IsNil(o.SliceEdgeCachingEnabled) {
		toSerialize["slice_edge_caching_enabled"] = o.SliceEdgeCachingEnabled
	}
	if !IsNil(o.SliceTieredCachingEnabled) {
		toSerialize["slice_tiered_caching_enabled"] = o.SliceTieredCachingEnabled
	}
	if !IsNil(o.SliceConfigurationRange) {
		toSerialize["slice_configuration_range"] = o.SliceConfigurationRange
	}
	return toSerialize, nil
}

type NullableResponseBadRequestSerializerMetaclassSliceControlsField struct {
	value *ResponseBadRequestSerializerMetaclassSliceControlsField
	isSet bool
}

func (v NullableResponseBadRequestSerializerMetaclassSliceControlsField) Get() *ResponseBadRequestSerializerMetaclassSliceControlsField {
	return v.value
}

func (v *NullableResponseBadRequestSerializerMetaclassSliceControlsField) Set(val *ResponseBadRequestSerializerMetaclassSliceControlsField) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseBadRequestSerializerMetaclassSliceControlsField) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseBadRequestSerializerMetaclassSliceControlsField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseBadRequestSerializerMetaclassSliceControlsField(val *ResponseBadRequestSerializerMetaclassSliceControlsField) *NullableResponseBadRequestSerializerMetaclassSliceControlsField {
	return &NullableResponseBadRequestSerializerMetaclassSliceControlsField{value: val, isSet: true}
}

func (v NullableResponseBadRequestSerializerMetaclassSliceControlsField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseBadRequestSerializerMetaclassSliceControlsField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EdgeApplicationCriterionFieldRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EdgeApplicationCriterionFieldRequest{}

// EdgeApplicationCriterionFieldRequest The criterion which will be evaluated to define if the configured behaviors for this rule can be executed.  | Variable | Description | Phase | Operators | Argument | | -------- | ----------- | ----- | --------- | ---------| | ${arg_&lt;name&gt;} | Use this variable to match a query param. Replace &lt;name&gt; with the specific query param you want to match, replacing any '-' with '_'. Examples: ${arg_search}, ${arg_next}. | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${args} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${cookie_&lt;name&gt;} | Use this variable to match cookies sent by the browser Cookie headers.Replace &lt;name&gt; with the specific cookie name you want to match, replacing any '-' with '_'. Examples: cookie_session_id, cookie_user_pref. | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${device_group} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${geoip_city_continent_code} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${geoip_city_country_code} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${geoip_city_country_name} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${geoip_city} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${geoip_continent_code} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${geoip_country_code} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${geoip_country_name} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${geoip_region_name} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${geoip_region} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${host} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${domain} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${http_&lt;header_name&gt;} | Use this variable to match HTTP headers. Replace &lt;header_name&gt; with the specific header you want to match, replacing any '-' with '_'. Examples: http_authorization, http_accept, http_x_debug. | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${remote_addr} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${remote_user} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${request_method} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${request_uri} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${request} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${scheme} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${sent_http_&lt;header_name&gt;} | Use this variable to match HTTP headers sent to origin server. Replace &lt;header_name&gt; with the specific header you want to match, replacing any '-' with '_'. Examples: http_authorization, http_accept, http_x_debug. | response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${status} |  | response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${upstream_addr} |  | response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${upstream_cookie_&lt;name&gt;} | Use this variable to match cookies sent by the origin server in Set-Cookie headers.Replace &lt;name&gt; with the specific cookie you want to match, replacing any '-' with '_'. Examples: ${upstream_cookie_mycookie}, ${upstream_cookie_user_info}. | response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${upstream_http_&lt;header_name&gt;} | Use this variable to match origin HTTP headers. Replace &lt;header_name&gt; with the specific header you want to match, replacing any '-' with '_'. If many origins are consulted while the request is processed, only headers from the last origin are stored. Examples: http_authorization, http_accept, http_x_debug. | response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${upstream_status} |  | response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${uri} | The normalized (urldecoded) URI of the request. | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${server_addr} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${server_port} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${ssl_client_cert} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${ssl_client_escaped_cert} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${ssl_client_fingerprint} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${ssl_client_i_dn} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${ssl_client_s_dn_parsed} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${ssl_client_s_dn} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${ssl_client_serial} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${ssl_client_v_end} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${ssl_client_v_remain} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${ssl_client_v_start} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${ssl_client_verify} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${tcpinfo_rtt} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${remote_port} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string | | ${request_body} |  | default, request, response | is_equal, is_not_equal, starts_with, does_not_start_with, matches, does_not_match, exists, does_not_exist | string |   About `operator` field: it's the operator to be used to evaluate the current criterion. When used in the first criterion of a block it should be always the `if` operator.
type EdgeApplicationCriterionFieldRequest struct {
	// * `if` - if * `or` - or * `and` - and
	Conditional string `json:"conditional"`
	// * `${arg_<name>}` - ${arg_<name>} * `${args}` - ${args} * `${cookie_<name>}` - ${cookie_<name>} * `${device_group}` - ${device_group} * `${geoip_city_continent_code}` - ${geoip_city_continent_code} * `${geoip_city_country_code}` - ${geoip_city_country_code} * `${geoip_city_country_name}` - ${geoip_city_country_name} * `${geoip_city}` - ${geoip_city} * `${geoip_continent_code}` - ${geoip_continent_code} * `${geoip_country_code}` - ${geoip_country_code} * `${geoip_country_name}` - ${geoip_country_name} * `${geoip_region_name}` - ${geoip_region_name} * `${geoip_region}` - ${geoip_region} * `${host}` - ${host} * `${domain}` - ${domain} * `${http_<header_name>}` - ${http_<header_name>} * `${remote_addr}` - ${remote_addr} * `${remote_user}` - ${remote_user} * `${request_method}` - ${request_method} * `${request_uri}` - ${request_uri} * `${request}` - ${request} * `${scheme}` - ${scheme} * `${sent_http_<header_name>}` - ${sent_http_<header_name>} * `${status}` - ${status} * `${upstream_addr}` - ${upstream_addr} * `${upstream_cookie_<name>}` - ${upstream_cookie_<name>} * `${upstream_http_<header_name>}` - ${upstream_http_<header_name>} * `${upstream_status}` - ${upstream_status} * `${uri}` - ${uri} * `${server_addr}` - ${server_addr} * `${server_port}` - ${server_port} * `${ssl_client_cert}` - ${ssl_client_cert} * `${ssl_client_escaped_cert}` - ${ssl_client_escaped_cert} * `${ssl_client_fingerprint}` - ${ssl_client_fingerprint} * `${ssl_client_i_dn}` - ${ssl_client_i_dn} * `${ssl_client_s_dn_parsed}` - ${ssl_client_s_dn_parsed} * `${ssl_client_s_dn}` - ${ssl_client_s_dn} * `${ssl_client_serial}` - ${ssl_client_serial} * `${ssl_client_v_end}` - ${ssl_client_v_end} * `${ssl_client_v_remain}` - ${ssl_client_v_remain} * `${ssl_client_v_start}` - ${ssl_client_v_start} * `${ssl_client_verify}` - ${ssl_client_verify} * `${tcpinfo_rtt}` - ${tcpinfo_rtt} * `${remote_port}` - ${remote_port} * `${request_body}` - ${request_body}
	Variable string `json:"variable"`
	// * `does_not_exist` - does_not_exist * `does_not_match` - does_not_match * `does_not_start_with` - does_not_start_with * `exists` - exists * `is_equal` - is_equal * `is_in_list` - is_in_list * `is_not_equal` - is_not_equal * `is_not_in_list` - is_not_in_list * `matches` - matches * `starts_with` - starts_with
	Operator string `json:"operator"`
	Argument NullableEdgeApplicationCriterionPolymorphicArgumentRequest `json:"argument,omitempty"`
}

type _EdgeApplicationCriterionFieldRequest EdgeApplicationCriterionFieldRequest

// NewEdgeApplicationCriterionFieldRequest instantiates a new EdgeApplicationCriterionFieldRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdgeApplicationCriterionFieldRequest(conditional string, variable string, operator string) *EdgeApplicationCriterionFieldRequest {
	this := EdgeApplicationCriterionFieldRequest{}
	this.Conditional = conditional
	this.Variable = variable
	this.Operator = operator
	return &this
}

// NewEdgeApplicationCriterionFieldRequestWithDefaults instantiates a new EdgeApplicationCriterionFieldRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdgeApplicationCriterionFieldRequestWithDefaults() *EdgeApplicationCriterionFieldRequest {
	this := EdgeApplicationCriterionFieldRequest{}
	return &this
}

// GetConditional returns the Conditional field value
func (o *EdgeApplicationCriterionFieldRequest) GetConditional() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Conditional
}

// GetConditionalOk returns a tuple with the Conditional field value
// and a boolean to check if the value has been set.
func (o *EdgeApplicationCriterionFieldRequest) GetConditionalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Conditional, true
}

// SetConditional sets field value
func (o *EdgeApplicationCriterionFieldRequest) SetConditional(v string) {
	o.Conditional = v
}

// GetVariable returns the Variable field value
func (o *EdgeApplicationCriterionFieldRequest) GetVariable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Variable
}

// GetVariableOk returns a tuple with the Variable field value
// and a boolean to check if the value has been set.
func (o *EdgeApplicationCriterionFieldRequest) GetVariableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Variable, true
}

// SetVariable sets field value
func (o *EdgeApplicationCriterionFieldRequest) SetVariable(v string) {
	o.Variable = v
}

// GetOperator returns the Operator field value
func (o *EdgeApplicationCriterionFieldRequest) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *EdgeApplicationCriterionFieldRequest) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *EdgeApplicationCriterionFieldRequest) SetOperator(v string) {
	o.Operator = v
}

// GetArgument returns the Argument field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EdgeApplicationCriterionFieldRequest) GetArgument() EdgeApplicationCriterionPolymorphicArgumentRequest {
	if o == nil || IsNil(o.Argument.Get()) {
		var ret EdgeApplicationCriterionPolymorphicArgumentRequest
		return ret
	}
	return *o.Argument.Get()
}

// GetArgumentOk returns a tuple with the Argument field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EdgeApplicationCriterionFieldRequest) GetArgumentOk() (*EdgeApplicationCriterionPolymorphicArgumentRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Argument.Get(), o.Argument.IsSet()
}

// HasArgument returns a boolean if a field has been set.
func (o *EdgeApplicationCriterionFieldRequest) HasArgument() bool {
	if o != nil && o.Argument.IsSet() {
		return true
	}

	return false
}

// SetArgument gets a reference to the given NullableEdgeApplicationCriterionPolymorphicArgumentRequest and assigns it to the Argument field.
func (o *EdgeApplicationCriterionFieldRequest) SetArgument(v EdgeApplicationCriterionPolymorphicArgumentRequest) {
	o.Argument.Set(&v)
}
// SetArgumentNil sets the value for Argument to be an explicit nil
func (o *EdgeApplicationCriterionFieldRequest) SetArgumentNil() {
	o.Argument.Set(nil)
}

// UnsetArgument ensures that no value is present for Argument, not even an explicit nil
func (o *EdgeApplicationCriterionFieldRequest) UnsetArgument() {
	o.Argument.Unset()
}

func (o EdgeApplicationCriterionFieldRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EdgeApplicationCriterionFieldRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conditional"] = o.Conditional
	toSerialize["variable"] = o.Variable
	toSerialize["operator"] = o.Operator
	if o.Argument.IsSet() {
		toSerialize["argument"] = o.Argument.Get()
	}
	return toSerialize, nil
}

func (o *EdgeApplicationCriterionFieldRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conditional",
		"variable",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEdgeApplicationCriterionFieldRequest := _EdgeApplicationCriterionFieldRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEdgeApplicationCriterionFieldRequest)

	if err != nil {
		return err
	}

	*o = EdgeApplicationCriterionFieldRequest(varEdgeApplicationCriterionFieldRequest)

	return err
}

type NullableEdgeApplicationCriterionFieldRequest struct {
	value *EdgeApplicationCriterionFieldRequest
	isSet bool
}

func (v NullableEdgeApplicationCriterionFieldRequest) Get() *EdgeApplicationCriterionFieldRequest {
	return v.value
}

func (v *NullableEdgeApplicationCriterionFieldRequest) Set(val *EdgeApplicationCriterionFieldRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeApplicationCriterionFieldRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeApplicationCriterionFieldRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeApplicationCriterionFieldRequest(val *EdgeApplicationCriterionFieldRequest) *NullableEdgeApplicationCriterionFieldRequest {
	return &NullableEdgeApplicationCriterionFieldRequest{value: val, isSet: true}
}

func (v NullableEdgeApplicationCriterionFieldRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeApplicationCriterionFieldRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



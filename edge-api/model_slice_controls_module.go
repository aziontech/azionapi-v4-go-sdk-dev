/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SliceControlsModule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SliceControlsModule{}

// SliceControlsModule struct for SliceControlsModule
type SliceControlsModule struct {
	SliceConfigurationEnabled bool `json:"slice_configuration_enabled"`
	SliceEdgeCachingEnabled bool `json:"slice_edge_caching_enabled"`
	SliceTieredCachingEnabled bool `json:"slice_tiered_caching_enabled"`
	SliceConfigurationRange *int64 `json:"slice_configuration_range,omitempty"`
}

type _SliceControlsModule SliceControlsModule

// NewSliceControlsModule instantiates a new SliceControlsModule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSliceControlsModule(sliceConfigurationEnabled bool, sliceEdgeCachingEnabled bool, sliceTieredCachingEnabled bool) *SliceControlsModule {
	this := SliceControlsModule{}
	this.SliceConfigurationEnabled = sliceConfigurationEnabled
	this.SliceEdgeCachingEnabled = sliceEdgeCachingEnabled
	this.SliceTieredCachingEnabled = sliceTieredCachingEnabled
	return &this
}

// NewSliceControlsModuleWithDefaults instantiates a new SliceControlsModule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliceControlsModuleWithDefaults() *SliceControlsModule {
	this := SliceControlsModule{}
	return &this
}

// GetSliceConfigurationEnabled returns the SliceConfigurationEnabled field value
func (o *SliceControlsModule) GetSliceConfigurationEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SliceConfigurationEnabled
}

// GetSliceConfigurationEnabledOk returns a tuple with the SliceConfigurationEnabled field value
// and a boolean to check if the value has been set.
func (o *SliceControlsModule) GetSliceConfigurationEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SliceConfigurationEnabled, true
}

// SetSliceConfigurationEnabled sets field value
func (o *SliceControlsModule) SetSliceConfigurationEnabled(v bool) {
	o.SliceConfigurationEnabled = v
}

// GetSliceEdgeCachingEnabled returns the SliceEdgeCachingEnabled field value
func (o *SliceControlsModule) GetSliceEdgeCachingEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SliceEdgeCachingEnabled
}

// GetSliceEdgeCachingEnabledOk returns a tuple with the SliceEdgeCachingEnabled field value
// and a boolean to check if the value has been set.
func (o *SliceControlsModule) GetSliceEdgeCachingEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SliceEdgeCachingEnabled, true
}

// SetSliceEdgeCachingEnabled sets field value
func (o *SliceControlsModule) SetSliceEdgeCachingEnabled(v bool) {
	o.SliceEdgeCachingEnabled = v
}

// GetSliceTieredCachingEnabled returns the SliceTieredCachingEnabled field value
func (o *SliceControlsModule) GetSliceTieredCachingEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SliceTieredCachingEnabled
}

// GetSliceTieredCachingEnabledOk returns a tuple with the SliceTieredCachingEnabled field value
// and a boolean to check if the value has been set.
func (o *SliceControlsModule) GetSliceTieredCachingEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SliceTieredCachingEnabled, true
}

// SetSliceTieredCachingEnabled sets field value
func (o *SliceControlsModule) SetSliceTieredCachingEnabled(v bool) {
	o.SliceTieredCachingEnabled = v
}

// GetSliceConfigurationRange returns the SliceConfigurationRange field value if set, zero value otherwise.
func (o *SliceControlsModule) GetSliceConfigurationRange() int64 {
	if o == nil || IsNil(o.SliceConfigurationRange) {
		var ret int64
		return ret
	}
	return *o.SliceConfigurationRange
}

// GetSliceConfigurationRangeOk returns a tuple with the SliceConfigurationRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliceControlsModule) GetSliceConfigurationRangeOk() (*int64, bool) {
	if o == nil || IsNil(o.SliceConfigurationRange) {
		return nil, false
	}
	return o.SliceConfigurationRange, true
}

// HasSliceConfigurationRange returns a boolean if a field has been set.
func (o *SliceControlsModule) HasSliceConfigurationRange() bool {
	if o != nil && !IsNil(o.SliceConfigurationRange) {
		return true
	}

	return false
}

// SetSliceConfigurationRange gets a reference to the given int64 and assigns it to the SliceConfigurationRange field.
func (o *SliceControlsModule) SetSliceConfigurationRange(v int64) {
	o.SliceConfigurationRange = &v
}

func (o SliceControlsModule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SliceControlsModule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["slice_configuration_enabled"] = o.SliceConfigurationEnabled
	toSerialize["slice_edge_caching_enabled"] = o.SliceEdgeCachingEnabled
	toSerialize["slice_tiered_caching_enabled"] = o.SliceTieredCachingEnabled
	if !IsNil(o.SliceConfigurationRange) {
		toSerialize["slice_configuration_range"] = o.SliceConfigurationRange
	}
	return toSerialize, nil
}

func (o *SliceControlsModule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"slice_configuration_enabled",
		"slice_edge_caching_enabled",
		"slice_tiered_caching_enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSliceControlsModule := _SliceControlsModule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSliceControlsModule)

	if err != nil {
		return err
	}

	*o = SliceControlsModule(varSliceControlsModule)

	return err
}

type NullableSliceControlsModule struct {
	value *SliceControlsModule
	isSet bool
}

func (v NullableSliceControlsModule) Get() *SliceControlsModule {
	return v.value
}

func (v *NullableSliceControlsModule) Set(val *SliceControlsModule) {
	v.value = val
	v.isSet = true
}

func (v NullableSliceControlsModule) IsSet() bool {
	return v.isSet
}

func (v *NullableSliceControlsModule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliceControlsModule(val *SliceControlsModule) *NullableSliceControlsModule {
	return &NullableSliceControlsModule{value: val, isSet: true}
}

func (v NullableSliceControlsModule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliceControlsModule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



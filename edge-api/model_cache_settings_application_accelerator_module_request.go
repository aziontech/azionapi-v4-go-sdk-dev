/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
)

// checks if the CacheSettingsApplicationAcceleratorModuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheSettingsApplicationAcceleratorModuleRequest{}

// CacheSettingsApplicationAcceleratorModuleRequest struct for CacheSettingsApplicationAcceleratorModuleRequest
type CacheSettingsApplicationAcceleratorModuleRequest struct {
	CacheVaryByMethod []string `json:"cache_vary_by_method,omitempty"`
	CacheVaryByQuerystring *CacheVaryByQuerystringModuleRequest `json:"cache_vary_by_querystring,omitempty"`
	CacheVaryByCookies *CacheVaryByCookiesModuleRequest `json:"cache_vary_by_cookies,omitempty"`
	CacheVaryByDevices *CacheVaryByDevicesModuleRequest `json:"cache_vary_by_devices,omitempty"`
}

// NewCacheSettingsApplicationAcceleratorModuleRequest instantiates a new CacheSettingsApplicationAcceleratorModuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheSettingsApplicationAcceleratorModuleRequest() *CacheSettingsApplicationAcceleratorModuleRequest {
	this := CacheSettingsApplicationAcceleratorModuleRequest{}
	return &this
}

// NewCacheSettingsApplicationAcceleratorModuleRequestWithDefaults instantiates a new CacheSettingsApplicationAcceleratorModuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheSettingsApplicationAcceleratorModuleRequestWithDefaults() *CacheSettingsApplicationAcceleratorModuleRequest {
	this := CacheSettingsApplicationAcceleratorModuleRequest{}
	return &this
}

// GetCacheVaryByMethod returns the CacheVaryByMethod field value if set, zero value otherwise.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) GetCacheVaryByMethod() []string {
	if o == nil || IsNil(o.CacheVaryByMethod) {
		var ret []string
		return ret
	}
	return o.CacheVaryByMethod
}

// GetCacheVaryByMethodOk returns a tuple with the CacheVaryByMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) GetCacheVaryByMethodOk() ([]string, bool) {
	if o == nil || IsNil(o.CacheVaryByMethod) {
		return nil, false
	}
	return o.CacheVaryByMethod, true
}

// HasCacheVaryByMethod returns a boolean if a field has been set.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) HasCacheVaryByMethod() bool {
	if o != nil && !IsNil(o.CacheVaryByMethod) {
		return true
	}

	return false
}

// SetCacheVaryByMethod gets a reference to the given []string and assigns it to the CacheVaryByMethod field.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) SetCacheVaryByMethod(v []string) {
	o.CacheVaryByMethod = v
}

// GetCacheVaryByQuerystring returns the CacheVaryByQuerystring field value if set, zero value otherwise.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) GetCacheVaryByQuerystring() CacheVaryByQuerystringModuleRequest {
	if o == nil || IsNil(o.CacheVaryByQuerystring) {
		var ret CacheVaryByQuerystringModuleRequest
		return ret
	}
	return *o.CacheVaryByQuerystring
}

// GetCacheVaryByQuerystringOk returns a tuple with the CacheVaryByQuerystring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) GetCacheVaryByQuerystringOk() (*CacheVaryByQuerystringModuleRequest, bool) {
	if o == nil || IsNil(o.CacheVaryByQuerystring) {
		return nil, false
	}
	return o.CacheVaryByQuerystring, true
}

// HasCacheVaryByQuerystring returns a boolean if a field has been set.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) HasCacheVaryByQuerystring() bool {
	if o != nil && !IsNil(o.CacheVaryByQuerystring) {
		return true
	}

	return false
}

// SetCacheVaryByQuerystring gets a reference to the given CacheVaryByQuerystringModuleRequest and assigns it to the CacheVaryByQuerystring field.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) SetCacheVaryByQuerystring(v CacheVaryByQuerystringModuleRequest) {
	o.CacheVaryByQuerystring = &v
}

// GetCacheVaryByCookies returns the CacheVaryByCookies field value if set, zero value otherwise.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) GetCacheVaryByCookies() CacheVaryByCookiesModuleRequest {
	if o == nil || IsNil(o.CacheVaryByCookies) {
		var ret CacheVaryByCookiesModuleRequest
		return ret
	}
	return *o.CacheVaryByCookies
}

// GetCacheVaryByCookiesOk returns a tuple with the CacheVaryByCookies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) GetCacheVaryByCookiesOk() (*CacheVaryByCookiesModuleRequest, bool) {
	if o == nil || IsNil(o.CacheVaryByCookies) {
		return nil, false
	}
	return o.CacheVaryByCookies, true
}

// HasCacheVaryByCookies returns a boolean if a field has been set.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) HasCacheVaryByCookies() bool {
	if o != nil && !IsNil(o.CacheVaryByCookies) {
		return true
	}

	return false
}

// SetCacheVaryByCookies gets a reference to the given CacheVaryByCookiesModuleRequest and assigns it to the CacheVaryByCookies field.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) SetCacheVaryByCookies(v CacheVaryByCookiesModuleRequest) {
	o.CacheVaryByCookies = &v
}

// GetCacheVaryByDevices returns the CacheVaryByDevices field value if set, zero value otherwise.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) GetCacheVaryByDevices() CacheVaryByDevicesModuleRequest {
	if o == nil || IsNil(o.CacheVaryByDevices) {
		var ret CacheVaryByDevicesModuleRequest
		return ret
	}
	return *o.CacheVaryByDevices
}

// GetCacheVaryByDevicesOk returns a tuple with the CacheVaryByDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) GetCacheVaryByDevicesOk() (*CacheVaryByDevicesModuleRequest, bool) {
	if o == nil || IsNil(o.CacheVaryByDevices) {
		return nil, false
	}
	return o.CacheVaryByDevices, true
}

// HasCacheVaryByDevices returns a boolean if a field has been set.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) HasCacheVaryByDevices() bool {
	if o != nil && !IsNil(o.CacheVaryByDevices) {
		return true
	}

	return false
}

// SetCacheVaryByDevices gets a reference to the given CacheVaryByDevicesModuleRequest and assigns it to the CacheVaryByDevices field.
func (o *CacheSettingsApplicationAcceleratorModuleRequest) SetCacheVaryByDevices(v CacheVaryByDevicesModuleRequest) {
	o.CacheVaryByDevices = &v
}

func (o CacheSettingsApplicationAcceleratorModuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheSettingsApplicationAcceleratorModuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CacheVaryByMethod) {
		toSerialize["cache_vary_by_method"] = o.CacheVaryByMethod
	}
	if !IsNil(o.CacheVaryByQuerystring) {
		toSerialize["cache_vary_by_querystring"] = o.CacheVaryByQuerystring
	}
	if !IsNil(o.CacheVaryByCookies) {
		toSerialize["cache_vary_by_cookies"] = o.CacheVaryByCookies
	}
	if !IsNil(o.CacheVaryByDevices) {
		toSerialize["cache_vary_by_devices"] = o.CacheVaryByDevices
	}
	return toSerialize, nil
}

type NullableCacheSettingsApplicationAcceleratorModuleRequest struct {
	value *CacheSettingsApplicationAcceleratorModuleRequest
	isSet bool
}

func (v NullableCacheSettingsApplicationAcceleratorModuleRequest) Get() *CacheSettingsApplicationAcceleratorModuleRequest {
	return v.value
}

func (v *NullableCacheSettingsApplicationAcceleratorModuleRequest) Set(val *CacheSettingsApplicationAcceleratorModuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheSettingsApplicationAcceleratorModuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheSettingsApplicationAcceleratorModuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheSettingsApplicationAcceleratorModuleRequest(val *CacheSettingsApplicationAcceleratorModuleRequest) *NullableCacheSettingsApplicationAcceleratorModuleRequest {
	return &NullableCacheSettingsApplicationAcceleratorModuleRequest{value: val, isSet: true}
}

func (v NullableCacheSettingsApplicationAcceleratorModuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheSettingsApplicationAcceleratorModuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



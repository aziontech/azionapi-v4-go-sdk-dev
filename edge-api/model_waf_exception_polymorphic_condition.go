/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// WAFExceptionPolymorphicCondition - struct for WAFExceptionPolymorphicCondition
type WAFExceptionPolymorphicCondition struct {
	WAFExceptionGenericCondition *WAFExceptionGenericCondition
	WAFExceptionSpecificConditionOnName *WAFExceptionSpecificConditionOnName
	WAFExceptionSpecificConditionOnValue *WAFExceptionSpecificConditionOnValue
}

// WAFExceptionGenericConditionAsWAFExceptionPolymorphicCondition is a convenience function that returns WAFExceptionGenericCondition wrapped in WAFExceptionPolymorphicCondition
func WAFExceptionGenericConditionAsWAFExceptionPolymorphicCondition(v *WAFExceptionGenericCondition) WAFExceptionPolymorphicCondition {
	return WAFExceptionPolymorphicCondition{
		WAFExceptionGenericCondition: v,
	}
}

// WAFExceptionSpecificConditionOnNameAsWAFExceptionPolymorphicCondition is a convenience function that returns WAFExceptionSpecificConditionOnName wrapped in WAFExceptionPolymorphicCondition
func WAFExceptionSpecificConditionOnNameAsWAFExceptionPolymorphicCondition(v *WAFExceptionSpecificConditionOnName) WAFExceptionPolymorphicCondition {
	return WAFExceptionPolymorphicCondition{
		WAFExceptionSpecificConditionOnName: v,
	}
}

// WAFExceptionSpecificConditionOnValueAsWAFExceptionPolymorphicCondition is a convenience function that returns WAFExceptionSpecificConditionOnValue wrapped in WAFExceptionPolymorphicCondition
func WAFExceptionSpecificConditionOnValueAsWAFExceptionPolymorphicCondition(v *WAFExceptionSpecificConditionOnValue) WAFExceptionPolymorphicCondition {
	return WAFExceptionPolymorphicCondition{
		WAFExceptionSpecificConditionOnValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WAFExceptionPolymorphicCondition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WAFExceptionGenericCondition
	err = newStrictDecoder(data).Decode(&dst.WAFExceptionGenericCondition)
	if err == nil {
		jsonWAFExceptionGenericCondition, _ := json.Marshal(dst.WAFExceptionGenericCondition)
		if string(jsonWAFExceptionGenericCondition) == "{}" { // empty struct
			dst.WAFExceptionGenericCondition = nil
		} else {
			if err = validator.Validate(dst.WAFExceptionGenericCondition); err != nil {
				dst.WAFExceptionGenericCondition = nil
			} else {
				match++
			}
		}
	} else {
		dst.WAFExceptionGenericCondition = nil
	}

	// try to unmarshal data into WAFExceptionSpecificConditionOnName
	err = newStrictDecoder(data).Decode(&dst.WAFExceptionSpecificConditionOnName)
	if err == nil {
		jsonWAFExceptionSpecificConditionOnName, _ := json.Marshal(dst.WAFExceptionSpecificConditionOnName)
		if string(jsonWAFExceptionSpecificConditionOnName) == "{}" { // empty struct
			dst.WAFExceptionSpecificConditionOnName = nil
		} else {
			if err = validator.Validate(dst.WAFExceptionSpecificConditionOnName); err != nil {
				dst.WAFExceptionSpecificConditionOnName = nil
			} else {
				match++
			}
		}
	} else {
		dst.WAFExceptionSpecificConditionOnName = nil
	}

	// try to unmarshal data into WAFExceptionSpecificConditionOnValue
	err = newStrictDecoder(data).Decode(&dst.WAFExceptionSpecificConditionOnValue)
	if err == nil {
		jsonWAFExceptionSpecificConditionOnValue, _ := json.Marshal(dst.WAFExceptionSpecificConditionOnValue)
		if string(jsonWAFExceptionSpecificConditionOnValue) == "{}" { // empty struct
			dst.WAFExceptionSpecificConditionOnValue = nil
		} else {
			if err = validator.Validate(dst.WAFExceptionSpecificConditionOnValue); err != nil {
				dst.WAFExceptionSpecificConditionOnValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.WAFExceptionSpecificConditionOnValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WAFExceptionGenericCondition = nil
		dst.WAFExceptionSpecificConditionOnName = nil
		dst.WAFExceptionSpecificConditionOnValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WAFExceptionPolymorphicCondition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WAFExceptionPolymorphicCondition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WAFExceptionPolymorphicCondition) MarshalJSON() ([]byte, error) {
	if src.WAFExceptionGenericCondition != nil {
		return json.Marshal(&src.WAFExceptionGenericCondition)
	}

	if src.WAFExceptionSpecificConditionOnName != nil {
		return json.Marshal(&src.WAFExceptionSpecificConditionOnName)
	}

	if src.WAFExceptionSpecificConditionOnValue != nil {
		return json.Marshal(&src.WAFExceptionSpecificConditionOnValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WAFExceptionPolymorphicCondition) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WAFExceptionGenericCondition != nil {
		return obj.WAFExceptionGenericCondition
	}

	if obj.WAFExceptionSpecificConditionOnName != nil {
		return obj.WAFExceptionSpecificConditionOnName
	}

	if obj.WAFExceptionSpecificConditionOnValue != nil {
		return obj.WAFExceptionSpecificConditionOnValue
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj WAFExceptionPolymorphicCondition) GetActualInstanceValue() (interface{}) {
	if obj.WAFExceptionGenericCondition != nil {
		return *obj.WAFExceptionGenericCondition
	}

	if obj.WAFExceptionSpecificConditionOnName != nil {
		return *obj.WAFExceptionSpecificConditionOnName
	}

	if obj.WAFExceptionSpecificConditionOnValue != nil {
		return *obj.WAFExceptionSpecificConditionOnValue
	}

	// all schemas are nil
	return nil
}

type NullableWAFExceptionPolymorphicCondition struct {
	value *WAFExceptionPolymorphicCondition
	isSet bool
}

func (v NullableWAFExceptionPolymorphicCondition) Get() *WAFExceptionPolymorphicCondition {
	return v.value
}

func (v *NullableWAFExceptionPolymorphicCondition) Set(val *WAFExceptionPolymorphicCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableWAFExceptionPolymorphicCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableWAFExceptionPolymorphicCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWAFExceptionPolymorphicCondition(val *WAFExceptionPolymorphicCondition) *NullableWAFExceptionPolymorphicCondition {
	return &NullableWAFExceptionPolymorphicCondition{value: val, isSet: true}
}

func (v NullableWAFExceptionPolymorphicCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWAFExceptionPolymorphicCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



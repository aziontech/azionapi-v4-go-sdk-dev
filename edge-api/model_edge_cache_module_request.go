/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EdgeCacheModuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EdgeCacheModuleRequest{}

// EdgeCacheModuleRequest struct for EdgeCacheModuleRequest
type EdgeCacheModuleRequest struct {
	// * `honor` - Honor Origin Cache Settings * `override` - Override Cache Settings
	Behavior string `json:"behavior"`
	MaxAge int64 `json:"max_age"`
	CachingForPostEnabled bool `json:"caching_for_post_enabled"`
	CachingForOptionsEnabled bool `json:"caching_for_options_enabled"`
	StaleCacheEnabled bool `json:"stale_cache_enabled"`
	TieredCacheEnabled bool `json:"tiered_cache_enabled"`
	TieredCacheRegion *string `json:"tiered_cache_region,omitempty" validate:"regexp=.*"`
}

type _EdgeCacheModuleRequest EdgeCacheModuleRequest

// NewEdgeCacheModuleRequest instantiates a new EdgeCacheModuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdgeCacheModuleRequest(behavior string, maxAge int64, cachingForPostEnabled bool, cachingForOptionsEnabled bool, staleCacheEnabled bool, tieredCacheEnabled bool) *EdgeCacheModuleRequest {
	this := EdgeCacheModuleRequest{}
	this.Behavior = behavior
	this.MaxAge = maxAge
	this.CachingForPostEnabled = cachingForPostEnabled
	this.CachingForOptionsEnabled = cachingForOptionsEnabled
	this.StaleCacheEnabled = staleCacheEnabled
	this.TieredCacheEnabled = tieredCacheEnabled
	return &this
}

// NewEdgeCacheModuleRequestWithDefaults instantiates a new EdgeCacheModuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdgeCacheModuleRequestWithDefaults() *EdgeCacheModuleRequest {
	this := EdgeCacheModuleRequest{}
	return &this
}

// GetBehavior returns the Behavior field value
func (o *EdgeCacheModuleRequest) GetBehavior() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Behavior
}

// GetBehaviorOk returns a tuple with the Behavior field value
// and a boolean to check if the value has been set.
func (o *EdgeCacheModuleRequest) GetBehaviorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Behavior, true
}

// SetBehavior sets field value
func (o *EdgeCacheModuleRequest) SetBehavior(v string) {
	o.Behavior = v
}

// GetMaxAge returns the MaxAge field value
func (o *EdgeCacheModuleRequest) GetMaxAge() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxAge
}

// GetMaxAgeOk returns a tuple with the MaxAge field value
// and a boolean to check if the value has been set.
func (o *EdgeCacheModuleRequest) GetMaxAgeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxAge, true
}

// SetMaxAge sets field value
func (o *EdgeCacheModuleRequest) SetMaxAge(v int64) {
	o.MaxAge = v
}

// GetCachingForPostEnabled returns the CachingForPostEnabled field value
func (o *EdgeCacheModuleRequest) GetCachingForPostEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CachingForPostEnabled
}

// GetCachingForPostEnabledOk returns a tuple with the CachingForPostEnabled field value
// and a boolean to check if the value has been set.
func (o *EdgeCacheModuleRequest) GetCachingForPostEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CachingForPostEnabled, true
}

// SetCachingForPostEnabled sets field value
func (o *EdgeCacheModuleRequest) SetCachingForPostEnabled(v bool) {
	o.CachingForPostEnabled = v
}

// GetCachingForOptionsEnabled returns the CachingForOptionsEnabled field value
func (o *EdgeCacheModuleRequest) GetCachingForOptionsEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CachingForOptionsEnabled
}

// GetCachingForOptionsEnabledOk returns a tuple with the CachingForOptionsEnabled field value
// and a boolean to check if the value has been set.
func (o *EdgeCacheModuleRequest) GetCachingForOptionsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CachingForOptionsEnabled, true
}

// SetCachingForOptionsEnabled sets field value
func (o *EdgeCacheModuleRequest) SetCachingForOptionsEnabled(v bool) {
	o.CachingForOptionsEnabled = v
}

// GetStaleCacheEnabled returns the StaleCacheEnabled field value
func (o *EdgeCacheModuleRequest) GetStaleCacheEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StaleCacheEnabled
}

// GetStaleCacheEnabledOk returns a tuple with the StaleCacheEnabled field value
// and a boolean to check if the value has been set.
func (o *EdgeCacheModuleRequest) GetStaleCacheEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaleCacheEnabled, true
}

// SetStaleCacheEnabled sets field value
func (o *EdgeCacheModuleRequest) SetStaleCacheEnabled(v bool) {
	o.StaleCacheEnabled = v
}

// GetTieredCacheEnabled returns the TieredCacheEnabled field value
func (o *EdgeCacheModuleRequest) GetTieredCacheEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TieredCacheEnabled
}

// GetTieredCacheEnabledOk returns a tuple with the TieredCacheEnabled field value
// and a boolean to check if the value has been set.
func (o *EdgeCacheModuleRequest) GetTieredCacheEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TieredCacheEnabled, true
}

// SetTieredCacheEnabled sets field value
func (o *EdgeCacheModuleRequest) SetTieredCacheEnabled(v bool) {
	o.TieredCacheEnabled = v
}

// GetTieredCacheRegion returns the TieredCacheRegion field value if set, zero value otherwise.
func (o *EdgeCacheModuleRequest) GetTieredCacheRegion() string {
	if o == nil || IsNil(o.TieredCacheRegion) {
		var ret string
		return ret
	}
	return *o.TieredCacheRegion
}

// GetTieredCacheRegionOk returns a tuple with the TieredCacheRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeCacheModuleRequest) GetTieredCacheRegionOk() (*string, bool) {
	if o == nil || IsNil(o.TieredCacheRegion) {
		return nil, false
	}
	return o.TieredCacheRegion, true
}

// HasTieredCacheRegion returns a boolean if a field has been set.
func (o *EdgeCacheModuleRequest) HasTieredCacheRegion() bool {
	if o != nil && !IsNil(o.TieredCacheRegion) {
		return true
	}

	return false
}

// SetTieredCacheRegion gets a reference to the given string and assigns it to the TieredCacheRegion field.
func (o *EdgeCacheModuleRequest) SetTieredCacheRegion(v string) {
	o.TieredCacheRegion = &v
}

func (o EdgeCacheModuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EdgeCacheModuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["behavior"] = o.Behavior
	toSerialize["max_age"] = o.MaxAge
	toSerialize["caching_for_post_enabled"] = o.CachingForPostEnabled
	toSerialize["caching_for_options_enabled"] = o.CachingForOptionsEnabled
	toSerialize["stale_cache_enabled"] = o.StaleCacheEnabled
	toSerialize["tiered_cache_enabled"] = o.TieredCacheEnabled
	if !IsNil(o.TieredCacheRegion) {
		toSerialize["tiered_cache_region"] = o.TieredCacheRegion
	}
	return toSerialize, nil
}

func (o *EdgeCacheModuleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"behavior",
		"max_age",
		"caching_for_post_enabled",
		"caching_for_options_enabled",
		"stale_cache_enabled",
		"tiered_cache_enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEdgeCacheModuleRequest := _EdgeCacheModuleRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEdgeCacheModuleRequest)

	if err != nil {
		return err
	}

	*o = EdgeCacheModuleRequest(varEdgeCacheModuleRequest)

	return err
}

type NullableEdgeCacheModuleRequest struct {
	value *EdgeCacheModuleRequest
	isSet bool
}

func (v NullableEdgeCacheModuleRequest) Get() *EdgeCacheModuleRequest {
	return v.value
}

func (v *NullableEdgeCacheModuleRequest) Set(val *EdgeCacheModuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeCacheModuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeCacheModuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeCacheModuleRequest(val *EdgeCacheModuleRequest) *NullableEdgeCacheModuleRequest {
	return &NullableEdgeCacheModuleRequest{value: val, isSet: true}
}

func (v NullableEdgeCacheModuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeCacheModuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PagePolymorphicRequest - struct for PagePolymorphicRequest
type PagePolymorphicRequest struct {
	PageConnectorRequest *PageConnectorRequest
	PageDefaultRequest *PageDefaultRequest
}

// PageConnectorRequestAsPagePolymorphicRequest is a convenience function that returns PageConnectorRequest wrapped in PagePolymorphicRequest
func PageConnectorRequestAsPagePolymorphicRequest(v *PageConnectorRequest) PagePolymorphicRequest {
	return PagePolymorphicRequest{
		PageConnectorRequest: v,
	}
}

// PageDefaultRequestAsPagePolymorphicRequest is a convenience function that returns PageDefaultRequest wrapped in PagePolymorphicRequest
func PageDefaultRequestAsPagePolymorphicRequest(v *PageDefaultRequest) PagePolymorphicRequest {
	return PagePolymorphicRequest{
		PageDefaultRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PagePolymorphicRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PageConnectorRequest
	err = newStrictDecoder(data).Decode(&dst.PageConnectorRequest)
	if err == nil {
		jsonPageConnectorRequest, _ := json.Marshal(dst.PageConnectorRequest)
		if string(jsonPageConnectorRequest) == "{}" { // empty struct
			dst.PageConnectorRequest = nil
		} else {
			if err = validator.Validate(dst.PageConnectorRequest); err != nil {
				dst.PageConnectorRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.PageConnectorRequest = nil
	}

	// try to unmarshal data into PageDefaultRequest
	err = newStrictDecoder(data).Decode(&dst.PageDefaultRequest)
	if err == nil {
		jsonPageDefaultRequest, _ := json.Marshal(dst.PageDefaultRequest)
		if string(jsonPageDefaultRequest) == "{}" { // empty struct
			dst.PageDefaultRequest = nil
		} else {
			if err = validator.Validate(dst.PageDefaultRequest); err != nil {
				dst.PageDefaultRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.PageDefaultRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PageConnectorRequest = nil
		dst.PageDefaultRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PagePolymorphicRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PagePolymorphicRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PagePolymorphicRequest) MarshalJSON() ([]byte, error) {
	if src.PageConnectorRequest != nil {
		return json.Marshal(&src.PageConnectorRequest)
	}

	if src.PageDefaultRequest != nil {
		return json.Marshal(&src.PageDefaultRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PagePolymorphicRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PageConnectorRequest != nil {
		return obj.PageConnectorRequest
	}

	if obj.PageDefaultRequest != nil {
		return obj.PageDefaultRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PagePolymorphicRequest) GetActualInstanceValue() (interface{}) {
	if obj.PageConnectorRequest != nil {
		return *obj.PageConnectorRequest
	}

	if obj.PageDefaultRequest != nil {
		return *obj.PageDefaultRequest
	}

	// all schemas are nil
	return nil
}

type NullablePagePolymorphicRequest struct {
	value *PagePolymorphicRequest
	isSet bool
}

func (v NullablePagePolymorphicRequest) Get() *PagePolymorphicRequest {
	return v.value
}

func (v *NullablePagePolymorphicRequest) Set(val *PagePolymorphicRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePagePolymorphicRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePagePolymorphicRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePagePolymorphicRequest(val *PagePolymorphicRequest) *NullablePagePolymorphicRequest {
	return &NullablePagePolymorphicRequest{value: val, isSet: true}
}

func (v NullablePagePolymorphicRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePagePolymorphicRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



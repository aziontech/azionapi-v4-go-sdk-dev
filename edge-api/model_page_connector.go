/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PageConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PageConnector{}

// PageConnector struct for PageConnector
type PageConnector struct {
	Type *string `json:"type,omitempty"`
	Attributes PageConnectorAttributes `json:"attributes"`
}

type _PageConnector PageConnector

// NewPageConnector instantiates a new PageConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageConnector(attributes PageConnectorAttributes) *PageConnector {
	this := PageConnector{}
	this.Attributes = attributes
	return &this
}

// NewPageConnectorWithDefaults instantiates a new PageConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageConnectorWithDefaults() *PageConnector {
	this := PageConnector{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PageConnector) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageConnector) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PageConnector) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PageConnector) SetType(v string) {
	o.Type = &v
}

// GetAttributes returns the Attributes field value
func (o *PageConnector) GetAttributes() PageConnectorAttributes {
	if o == nil {
		var ret PageConnectorAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *PageConnector) GetAttributesOk() (*PageConnectorAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *PageConnector) SetAttributes(v PageConnectorAttributes) {
	o.Attributes = v
}

func (o PageConnector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

func (o *PageConnector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPageConnector := _PageConnector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPageConnector)

	if err != nil {
		return err
	}

	*o = PageConnector(varPageConnector)

	return err
}

type NullablePageConnector struct {
	value *PageConnector
	isSet bool
}

func (v NullablePageConnector) Get() *PageConnector {
	return v.value
}

func (v *NullablePageConnector) Set(val *PageConnector) {
	v.value = val
	v.isSet = true
}

func (v NullablePageConnector) IsSet() bool {
	return v.isSet
}

func (v *NullablePageConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageConnector(val *PageConnector) *NullablePageConnector {
	return &NullablePageConnector{value: val, isSet: true}
}

func (v NullablePageConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EdgeConnectorHTTPTypePropertiesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EdgeConnectorHTTPTypePropertiesRequest{}

// EdgeConnectorHTTPTypePropertiesRequest struct for EdgeConnectorHTTPTypePropertiesRequest
type EdgeConnectorHTTPTypePropertiesRequest struct {
	Versions []string `json:"versions,omitempty"`
	Host NullableString `json:"host" validate:"regexp=.*"`
	Path string `json:"path" validate:"regexp=.*"`
	FollowingRedirect *bool `json:"following_redirect,omitempty"`
	RealIpHeader string `json:"real_ip_header" validate:"regexp=.*"`
	RealPortHeader string `json:"real_port_header" validate:"regexp=.*"`
}

type _EdgeConnectorHTTPTypePropertiesRequest EdgeConnectorHTTPTypePropertiesRequest

// NewEdgeConnectorHTTPTypePropertiesRequest instantiates a new EdgeConnectorHTTPTypePropertiesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdgeConnectorHTTPTypePropertiesRequest(host NullableString, path string, realIpHeader string, realPortHeader string) *EdgeConnectorHTTPTypePropertiesRequest {
	this := EdgeConnectorHTTPTypePropertiesRequest{}
	this.Host = host
	this.Path = path
	this.RealIpHeader = realIpHeader
	this.RealPortHeader = realPortHeader
	return &this
}

// NewEdgeConnectorHTTPTypePropertiesRequestWithDefaults instantiates a new EdgeConnectorHTTPTypePropertiesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdgeConnectorHTTPTypePropertiesRequestWithDefaults() *EdgeConnectorHTTPTypePropertiesRequest {
	this := EdgeConnectorHTTPTypePropertiesRequest{}
	return &this
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetVersions() []string {
	if o == nil || IsNil(o.Versions) {
		var ret []string
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *EdgeConnectorHTTPTypePropertiesRequest) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *EdgeConnectorHTTPTypePropertiesRequest) SetVersions(v []string) {
	o.Versions = v
}

// GetHost returns the Host field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetHost() string {
	if o == nil || o.Host.Get() == nil {
		var ret string
		return ret
	}

	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// SetHost sets field value
func (o *EdgeConnectorHTTPTypePropertiesRequest) SetHost(v string) {
	o.Host.Set(&v)
}

// GetPath returns the Path field value
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *EdgeConnectorHTTPTypePropertiesRequest) SetPath(v string) {
	o.Path = v
}

// GetFollowingRedirect returns the FollowingRedirect field value if set, zero value otherwise.
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetFollowingRedirect() bool {
	if o == nil || IsNil(o.FollowingRedirect) {
		var ret bool
		return ret
	}
	return *o.FollowingRedirect
}

// GetFollowingRedirectOk returns a tuple with the FollowingRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetFollowingRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.FollowingRedirect) {
		return nil, false
	}
	return o.FollowingRedirect, true
}

// HasFollowingRedirect returns a boolean if a field has been set.
func (o *EdgeConnectorHTTPTypePropertiesRequest) HasFollowingRedirect() bool {
	if o != nil && !IsNil(o.FollowingRedirect) {
		return true
	}

	return false
}

// SetFollowingRedirect gets a reference to the given bool and assigns it to the FollowingRedirect field.
func (o *EdgeConnectorHTTPTypePropertiesRequest) SetFollowingRedirect(v bool) {
	o.FollowingRedirect = &v
}

// GetRealIpHeader returns the RealIpHeader field value
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetRealIpHeader() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RealIpHeader
}

// GetRealIpHeaderOk returns a tuple with the RealIpHeader field value
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetRealIpHeaderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RealIpHeader, true
}

// SetRealIpHeader sets field value
func (o *EdgeConnectorHTTPTypePropertiesRequest) SetRealIpHeader(v string) {
	o.RealIpHeader = v
}

// GetRealPortHeader returns the RealPortHeader field value
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetRealPortHeader() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RealPortHeader
}

// GetRealPortHeaderOk returns a tuple with the RealPortHeader field value
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTPTypePropertiesRequest) GetRealPortHeaderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RealPortHeader, true
}

// SetRealPortHeader sets field value
func (o *EdgeConnectorHTTPTypePropertiesRequest) SetRealPortHeader(v string) {
	o.RealPortHeader = v
}

func (o EdgeConnectorHTTPTypePropertiesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EdgeConnectorHTTPTypePropertiesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	toSerialize["host"] = o.Host.Get()
	toSerialize["path"] = o.Path
	if !IsNil(o.FollowingRedirect) {
		toSerialize["following_redirect"] = o.FollowingRedirect
	}
	toSerialize["real_ip_header"] = o.RealIpHeader
	toSerialize["real_port_header"] = o.RealPortHeader
	return toSerialize, nil
}

func (o *EdgeConnectorHTTPTypePropertiesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"path",
		"real_ip_header",
		"real_port_header",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEdgeConnectorHTTPTypePropertiesRequest := _EdgeConnectorHTTPTypePropertiesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEdgeConnectorHTTPTypePropertiesRequest)

	if err != nil {
		return err
	}

	*o = EdgeConnectorHTTPTypePropertiesRequest(varEdgeConnectorHTTPTypePropertiesRequest)

	return err
}

type NullableEdgeConnectorHTTPTypePropertiesRequest struct {
	value *EdgeConnectorHTTPTypePropertiesRequest
	isSet bool
}

func (v NullableEdgeConnectorHTTPTypePropertiesRequest) Get() *EdgeConnectorHTTPTypePropertiesRequest {
	return v.value
}

func (v *NullableEdgeConnectorHTTPTypePropertiesRequest) Set(val *EdgeConnectorHTTPTypePropertiesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeConnectorHTTPTypePropertiesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeConnectorHTTPTypePropertiesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeConnectorHTTPTypePropertiesRequest(val *EdgeConnectorHTTPTypePropertiesRequest) *NullableEdgeConnectorHTTPTypePropertiesRequest {
	return &NullableEdgeConnectorHTTPTypePropertiesRequest{value: val, isSet: true}
}

func (v NullableEdgeConnectorHTTPTypePropertiesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeConnectorHTTPTypePropertiesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



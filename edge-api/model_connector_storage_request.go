/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectorStorageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorStorageRequest{}

// ConnectorStorageRequest struct for ConnectorStorageRequest
type ConnectorStorageRequest struct {
	Name string `json:"name"`
	Active *bool `json:"active,omitempty"`
	// Type of the connector  * `http` - HTTP * `storage` - Storage * `live_ingest` - Live Ingest
	Type string `json:"type"`
	Attributes ConnectorStorageAttributesRequest `json:"attributes"`
}

type _ConnectorStorageRequest ConnectorStorageRequest

// NewConnectorStorageRequest instantiates a new ConnectorStorageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorStorageRequest(name string, type_ string, attributes ConnectorStorageAttributesRequest) *ConnectorStorageRequest {
	this := ConnectorStorageRequest{}
	this.Name = name
	this.Type = type_
	this.Attributes = attributes
	return &this
}

// NewConnectorStorageRequestWithDefaults instantiates a new ConnectorStorageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorStorageRequestWithDefaults() *ConnectorStorageRequest {
	this := ConnectorStorageRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ConnectorStorageRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectorStorageRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectorStorageRequest) SetName(v string) {
	o.Name = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ConnectorStorageRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStorageRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ConnectorStorageRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ConnectorStorageRequest) SetActive(v bool) {
	o.Active = &v
}

// GetType returns the Type field value
func (o *ConnectorStorageRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConnectorStorageRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConnectorStorageRequest) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *ConnectorStorageRequest) GetAttributes() ConnectorStorageAttributesRequest {
	if o == nil {
		var ret ConnectorStorageAttributesRequest
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *ConnectorStorageRequest) GetAttributesOk() (*ConnectorStorageAttributesRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *ConnectorStorageRequest) SetAttributes(v ConnectorStorageAttributesRequest) {
	o.Attributes = v
}

func (o ConnectorStorageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorStorageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["type"] = o.Type
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

func (o *ConnectorStorageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectorStorageRequest := _ConnectorStorageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectorStorageRequest)

	if err != nil {
		return err
	}

	*o = ConnectorStorageRequest(varConnectorStorageRequest)

	return err
}

type NullableConnectorStorageRequest struct {
	value *ConnectorStorageRequest
	isSet bool
}

func (v NullableConnectorStorageRequest) Get() *ConnectorStorageRequest {
	return v.value
}

func (v *NullableConnectorStorageRequest) Set(val *ConnectorStorageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorStorageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorStorageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorStorageRequest(val *ConnectorStorageRequest) *NullableConnectorStorageRequest {
	return &NullableConnectorStorageRequest{value: val, isSet: true}
}

func (v NullableConnectorStorageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorStorageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



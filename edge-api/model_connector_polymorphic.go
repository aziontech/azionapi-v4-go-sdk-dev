/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ConnectorPolymorphic - struct for ConnectorPolymorphic
type ConnectorPolymorphic struct {
	ConnectorHTTP *ConnectorHTTP
	ConnectorLiveIngest *ConnectorLiveIngest
	ConnectorStorage *ConnectorStorage
}

// ConnectorHTTPAsConnectorPolymorphic is a convenience function that returns ConnectorHTTP wrapped in ConnectorPolymorphic
func ConnectorHTTPAsConnectorPolymorphic(v *ConnectorHTTP) ConnectorPolymorphic {
	return ConnectorPolymorphic{
		ConnectorHTTP: v,
	}
}

// ConnectorLiveIngestAsConnectorPolymorphic is a convenience function that returns ConnectorLiveIngest wrapped in ConnectorPolymorphic
func ConnectorLiveIngestAsConnectorPolymorphic(v *ConnectorLiveIngest) ConnectorPolymorphic {
	return ConnectorPolymorphic{
		ConnectorLiveIngest: v,
	}
}

// ConnectorStorageAsConnectorPolymorphic is a convenience function that returns ConnectorStorage wrapped in ConnectorPolymorphic
func ConnectorStorageAsConnectorPolymorphic(v *ConnectorStorage) ConnectorPolymorphic {
	return ConnectorPolymorphic{
		ConnectorStorage: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConnectorPolymorphic) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ConnectorHTTP
	err = newStrictDecoder(data).Decode(&dst.ConnectorHTTP)
	if err == nil {
		jsonConnectorHTTP, _ := json.Marshal(dst.ConnectorHTTP)
		if string(jsonConnectorHTTP) == "{}" { // empty struct
			dst.ConnectorHTTP = nil
		} else {
			if err = validator.Validate(dst.ConnectorHTTP); err != nil {
				dst.ConnectorHTTP = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConnectorHTTP = nil
	}

	// try to unmarshal data into ConnectorLiveIngest
	err = newStrictDecoder(data).Decode(&dst.ConnectorLiveIngest)
	if err == nil {
		jsonConnectorLiveIngest, _ := json.Marshal(dst.ConnectorLiveIngest)
		if string(jsonConnectorLiveIngest) == "{}" { // empty struct
			dst.ConnectorLiveIngest = nil
		} else {
			if err = validator.Validate(dst.ConnectorLiveIngest); err != nil {
				dst.ConnectorLiveIngest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConnectorLiveIngest = nil
	}

	// try to unmarshal data into ConnectorStorage
	err = newStrictDecoder(data).Decode(&dst.ConnectorStorage)
	if err == nil {
		jsonConnectorStorage, _ := json.Marshal(dst.ConnectorStorage)
		if string(jsonConnectorStorage) == "{}" { // empty struct
			dst.ConnectorStorage = nil
		} else {
			if err = validator.Validate(dst.ConnectorStorage); err != nil {
				dst.ConnectorStorage = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConnectorStorage = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ConnectorHTTP = nil
		dst.ConnectorLiveIngest = nil
		dst.ConnectorStorage = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ConnectorPolymorphic)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ConnectorPolymorphic)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConnectorPolymorphic) MarshalJSON() ([]byte, error) {
	if src.ConnectorHTTP != nil {
		return json.Marshal(&src.ConnectorHTTP)
	}

	if src.ConnectorLiveIngest != nil {
		return json.Marshal(&src.ConnectorLiveIngest)
	}

	if src.ConnectorStorage != nil {
		return json.Marshal(&src.ConnectorStorage)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConnectorPolymorphic) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ConnectorHTTP != nil {
		return obj.ConnectorHTTP
	}

	if obj.ConnectorLiveIngest != nil {
		return obj.ConnectorLiveIngest
	}

	if obj.ConnectorStorage != nil {
		return obj.ConnectorStorage
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ConnectorPolymorphic) GetActualInstanceValue() (interface{}) {
	if obj.ConnectorHTTP != nil {
		return *obj.ConnectorHTTP
	}

	if obj.ConnectorLiveIngest != nil {
		return *obj.ConnectorLiveIngest
	}

	if obj.ConnectorStorage != nil {
		return *obj.ConnectorStorage
	}

	// all schemas are nil
	return nil
}

type NullableConnectorPolymorphic struct {
	value *ConnectorPolymorphic
	isSet bool
}

func (v NullableConnectorPolymorphic) Get() *ConnectorPolymorphic {
	return v.value
}

func (v *NullableConnectorPolymorphic) Set(val *ConnectorPolymorphic) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorPolymorphic) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorPolymorphic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorPolymorphic(val *ConnectorPolymorphic) *NullableConnectorPolymorphic {
	return &NullableConnectorPolymorphic{value: val, isSet: true}
}

func (v NullableConnectorPolymorphic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorPolymorphic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



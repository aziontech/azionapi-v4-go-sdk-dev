/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
)

// checks if the PageDefault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PageDefault{}

// PageDefault struct for PageDefault
type PageDefault struct {
	Type *string `json:"type,omitempty" validate:"regexp=.*"`
	Attributes *PageDefaultAttributes `json:"attributes,omitempty"`
}

// NewPageDefault instantiates a new PageDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageDefault() *PageDefault {
	this := PageDefault{}
	return &this
}

// NewPageDefaultWithDefaults instantiates a new PageDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageDefaultWithDefaults() *PageDefault {
	this := PageDefault{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PageDefault) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageDefault) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PageDefault) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PageDefault) SetType(v string) {
	o.Type = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *PageDefault) GetAttributes() PageDefaultAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret PageDefaultAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageDefault) GetAttributesOk() (*PageDefaultAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *PageDefault) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given PageDefaultAttributes and assigns it to the Attributes field.
func (o *PageDefault) SetAttributes(v PageDefaultAttributes) {
	o.Attributes = &v
}

func (o PageDefault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageDefault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullablePageDefault struct {
	value *PageDefault
	isSet bool
}

func (v NullablePageDefault) Get() *PageDefault {
	return v.value
}

func (v *NullablePageDefault) Set(val *PageDefault) {
	v.value = val
	v.isSet = true
}

func (v NullablePageDefault) IsSet() bool {
	return v.isSet
}

func (v *NullablePageDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageDefault(val *PageDefault) *NullablePageDefault {
	return &NullablePageDefault{value: val, isSet: true}
}

func (v NullablePageDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



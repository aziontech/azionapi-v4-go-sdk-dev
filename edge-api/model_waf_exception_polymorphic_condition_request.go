/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// WAFExceptionPolymorphicConditionRequest - struct for WAFExceptionPolymorphicConditionRequest
type WAFExceptionPolymorphicConditionRequest struct {
	WAFExceptionGenericConditionRequest *WAFExceptionGenericConditionRequest
	WAFExceptionSpecificConditionOnNameRequest *WAFExceptionSpecificConditionOnNameRequest
	WAFExceptionSpecificConditionOnValueRequest *WAFExceptionSpecificConditionOnValueRequest
}

// WAFExceptionGenericConditionRequestAsWAFExceptionPolymorphicConditionRequest is a convenience function that returns WAFExceptionGenericConditionRequest wrapped in WAFExceptionPolymorphicConditionRequest
func WAFExceptionGenericConditionRequestAsWAFExceptionPolymorphicConditionRequest(v *WAFExceptionGenericConditionRequest) WAFExceptionPolymorphicConditionRequest {
	return WAFExceptionPolymorphicConditionRequest{
		WAFExceptionGenericConditionRequest: v,
	}
}

// WAFExceptionSpecificConditionOnNameRequestAsWAFExceptionPolymorphicConditionRequest is a convenience function that returns WAFExceptionSpecificConditionOnNameRequest wrapped in WAFExceptionPolymorphicConditionRequest
func WAFExceptionSpecificConditionOnNameRequestAsWAFExceptionPolymorphicConditionRequest(v *WAFExceptionSpecificConditionOnNameRequest) WAFExceptionPolymorphicConditionRequest {
	return WAFExceptionPolymorphicConditionRequest{
		WAFExceptionSpecificConditionOnNameRequest: v,
	}
}

// WAFExceptionSpecificConditionOnValueRequestAsWAFExceptionPolymorphicConditionRequest is a convenience function that returns WAFExceptionSpecificConditionOnValueRequest wrapped in WAFExceptionPolymorphicConditionRequest
func WAFExceptionSpecificConditionOnValueRequestAsWAFExceptionPolymorphicConditionRequest(v *WAFExceptionSpecificConditionOnValueRequest) WAFExceptionPolymorphicConditionRequest {
	return WAFExceptionPolymorphicConditionRequest{
		WAFExceptionSpecificConditionOnValueRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WAFExceptionPolymorphicConditionRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WAFExceptionGenericConditionRequest
	err = newStrictDecoder(data).Decode(&dst.WAFExceptionGenericConditionRequest)
	if err == nil {
		jsonWAFExceptionGenericConditionRequest, _ := json.Marshal(dst.WAFExceptionGenericConditionRequest)
		if string(jsonWAFExceptionGenericConditionRequest) == "{}" { // empty struct
			dst.WAFExceptionGenericConditionRequest = nil
		} else {
			if err = validator.Validate(dst.WAFExceptionGenericConditionRequest); err != nil {
				dst.WAFExceptionGenericConditionRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.WAFExceptionGenericConditionRequest = nil
	}

	// try to unmarshal data into WAFExceptionSpecificConditionOnNameRequest
	err = newStrictDecoder(data).Decode(&dst.WAFExceptionSpecificConditionOnNameRequest)
	if err == nil {
		jsonWAFExceptionSpecificConditionOnNameRequest, _ := json.Marshal(dst.WAFExceptionSpecificConditionOnNameRequest)
		if string(jsonWAFExceptionSpecificConditionOnNameRequest) == "{}" { // empty struct
			dst.WAFExceptionSpecificConditionOnNameRequest = nil
		} else {
			if err = validator.Validate(dst.WAFExceptionSpecificConditionOnNameRequest); err != nil {
				dst.WAFExceptionSpecificConditionOnNameRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.WAFExceptionSpecificConditionOnNameRequest = nil
	}

	// try to unmarshal data into WAFExceptionSpecificConditionOnValueRequest
	err = newStrictDecoder(data).Decode(&dst.WAFExceptionSpecificConditionOnValueRequest)
	if err == nil {
		jsonWAFExceptionSpecificConditionOnValueRequest, _ := json.Marshal(dst.WAFExceptionSpecificConditionOnValueRequest)
		if string(jsonWAFExceptionSpecificConditionOnValueRequest) == "{}" { // empty struct
			dst.WAFExceptionSpecificConditionOnValueRequest = nil
		} else {
			if err = validator.Validate(dst.WAFExceptionSpecificConditionOnValueRequest); err != nil {
				dst.WAFExceptionSpecificConditionOnValueRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.WAFExceptionSpecificConditionOnValueRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WAFExceptionGenericConditionRequest = nil
		dst.WAFExceptionSpecificConditionOnNameRequest = nil
		dst.WAFExceptionSpecificConditionOnValueRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WAFExceptionPolymorphicConditionRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WAFExceptionPolymorphicConditionRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WAFExceptionPolymorphicConditionRequest) MarshalJSON() ([]byte, error) {
	if src.WAFExceptionGenericConditionRequest != nil {
		return json.Marshal(&src.WAFExceptionGenericConditionRequest)
	}

	if src.WAFExceptionSpecificConditionOnNameRequest != nil {
		return json.Marshal(&src.WAFExceptionSpecificConditionOnNameRequest)
	}

	if src.WAFExceptionSpecificConditionOnValueRequest != nil {
		return json.Marshal(&src.WAFExceptionSpecificConditionOnValueRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WAFExceptionPolymorphicConditionRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WAFExceptionGenericConditionRequest != nil {
		return obj.WAFExceptionGenericConditionRequest
	}

	if obj.WAFExceptionSpecificConditionOnNameRequest != nil {
		return obj.WAFExceptionSpecificConditionOnNameRequest
	}

	if obj.WAFExceptionSpecificConditionOnValueRequest != nil {
		return obj.WAFExceptionSpecificConditionOnValueRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj WAFExceptionPolymorphicConditionRequest) GetActualInstanceValue() (interface{}) {
	if obj.WAFExceptionGenericConditionRequest != nil {
		return *obj.WAFExceptionGenericConditionRequest
	}

	if obj.WAFExceptionSpecificConditionOnNameRequest != nil {
		return *obj.WAFExceptionSpecificConditionOnNameRequest
	}

	if obj.WAFExceptionSpecificConditionOnValueRequest != nil {
		return *obj.WAFExceptionSpecificConditionOnValueRequest
	}

	// all schemas are nil
	return nil
}

type NullableWAFExceptionPolymorphicConditionRequest struct {
	value *WAFExceptionPolymorphicConditionRequest
	isSet bool
}

func (v NullableWAFExceptionPolymorphicConditionRequest) Get() *WAFExceptionPolymorphicConditionRequest {
	return v.value
}

func (v *NullableWAFExceptionPolymorphicConditionRequest) Set(val *WAFExceptionPolymorphicConditionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWAFExceptionPolymorphicConditionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWAFExceptionPolymorphicConditionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWAFExceptionPolymorphicConditionRequest(val *WAFExceptionPolymorphicConditionRequest) *NullableWAFExceptionPolymorphicConditionRequest {
	return &NullableWAFExceptionPolymorphicConditionRequest{value: val, isSet: true}
}

func (v NullableWAFExceptionPolymorphicConditionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWAFExceptionPolymorphicConditionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



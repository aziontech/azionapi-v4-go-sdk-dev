/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PurgeInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurgeInput{}

// PurgeInput Serialize the incoming purge request.
type PurgeInput struct {
	Items []string `json:"items"`
	// * `edge_cache` - Edge Cache * `tiered_cache` - Tiered Cache
	Layer *string `json:"layer,omitempty"`
}

type _PurgeInput PurgeInput

// NewPurgeInput instantiates a new PurgeInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurgeInput(items []string) *PurgeInput {
	this := PurgeInput{}
	this.Items = items
	return &this
}

// NewPurgeInputWithDefaults instantiates a new PurgeInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurgeInputWithDefaults() *PurgeInput {
	this := PurgeInput{}
	return &this
}

// GetItems returns the Items field value
func (o *PurgeInput) GetItems() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *PurgeInput) GetItemsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *PurgeInput) SetItems(v []string) {
	o.Items = v
}

// GetLayer returns the Layer field value if set, zero value otherwise.
func (o *PurgeInput) GetLayer() string {
	if o == nil || IsNil(o.Layer) {
		var ret string
		return ret
	}
	return *o.Layer
}

// GetLayerOk returns a tuple with the Layer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurgeInput) GetLayerOk() (*string, bool) {
	if o == nil || IsNil(o.Layer) {
		return nil, false
	}
	return o.Layer, true
}

// HasLayer returns a boolean if a field has been set.
func (o *PurgeInput) HasLayer() bool {
	if o != nil && !IsNil(o.Layer) {
		return true
	}

	return false
}

// SetLayer gets a reference to the given string and assigns it to the Layer field.
func (o *PurgeInput) SetLayer(v string) {
	o.Layer = &v
}

func (o PurgeInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurgeInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	if !IsNil(o.Layer) {
		toSerialize["layer"] = o.Layer
	}
	return toSerialize, nil
}

func (o *PurgeInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPurgeInput := _PurgeInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPurgeInput)

	if err != nil {
		return err
	}

	*o = PurgeInput(varPurgeInput)

	return err
}

type NullablePurgeInput struct {
	value *PurgeInput
	isSet bool
}

func (v NullablePurgeInput) Get() *PurgeInput {
	return v.value
}

func (v *NullablePurgeInput) Set(val *PurgeInput) {
	v.value = val
	v.isSet = true
}

func (v NullablePurgeInput) IsSet() bool {
	return v.isSet
}

func (v *NullablePurgeInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurgeInput(val *PurgeInput) *NullablePurgeInput {
	return &NullablePurgeInput{value: val, isSet: true}
}

func (v NullablePurgeInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurgeInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
)

// checks if the ProtocolsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProtocolsRequest{}

// ProtocolsRequest struct for ProtocolsRequest
type ProtocolsRequest struct {
	Http *HttpProtocolRequest `json:"http,omitempty"`
}

// NewProtocolsRequest instantiates a new ProtocolsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtocolsRequest() *ProtocolsRequest {
	this := ProtocolsRequest{}
	return &this
}

// NewProtocolsRequestWithDefaults instantiates a new ProtocolsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtocolsRequestWithDefaults() *ProtocolsRequest {
	this := ProtocolsRequest{}
	return &this
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *ProtocolsRequest) GetHttp() HttpProtocolRequest {
	if o == nil || IsNil(o.Http) {
		var ret HttpProtocolRequest
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolsRequest) GetHttpOk() (*HttpProtocolRequest, bool) {
	if o == nil || IsNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *ProtocolsRequest) HasHttp() bool {
	if o != nil && !IsNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given HttpProtocolRequest and assigns it to the Http field.
func (o *ProtocolsRequest) SetHttp(v HttpProtocolRequest) {
	o.Http = &v
}

func (o ProtocolsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProtocolsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	return toSerialize, nil
}

type NullableProtocolsRequest struct {
	value *ProtocolsRequest
	isSet bool
}

func (v NullableProtocolsRequest) Get() *ProtocolsRequest {
	return v.value
}

func (v *NullableProtocolsRequest) Set(val *ProtocolsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolsRequest(val *ProtocolsRequest) *NullableProtocolsRequest {
	return &NullableProtocolsRequest{value: val, isSet: true}
}

func (v NullableProtocolsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



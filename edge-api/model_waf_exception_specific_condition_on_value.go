/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WAFExceptionSpecificConditionOnValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WAFExceptionSpecificConditionOnValue{}

// WAFExceptionSpecificConditionOnValue struct for WAFExceptionSpecificConditionOnValue
type WAFExceptionSpecificConditionOnValue struct {
	// * `specific_body_form_field_value` - specific_body_form_field_value * `specific_http_header_value` - specific_http_header_value * `specific_query_string_value` - specific_query_string_value
	Match string `json:"match"`
	Value NullableString `json:"value" validate:"regexp=[a-zA-Z0-9<>?()]+"`
}

type _WAFExceptionSpecificConditionOnValue WAFExceptionSpecificConditionOnValue

// NewWAFExceptionSpecificConditionOnValue instantiates a new WAFExceptionSpecificConditionOnValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWAFExceptionSpecificConditionOnValue(match string, value NullableString) *WAFExceptionSpecificConditionOnValue {
	this := WAFExceptionSpecificConditionOnValue{}
	this.Match = match
	this.Value = value
	return &this
}

// NewWAFExceptionSpecificConditionOnValueWithDefaults instantiates a new WAFExceptionSpecificConditionOnValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWAFExceptionSpecificConditionOnValueWithDefaults() *WAFExceptionSpecificConditionOnValue {
	this := WAFExceptionSpecificConditionOnValue{}
	return &this
}

// GetMatch returns the Match field value
func (o *WAFExceptionSpecificConditionOnValue) GetMatch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Match
}

// GetMatchOk returns a tuple with the Match field value
// and a boolean to check if the value has been set.
func (o *WAFExceptionSpecificConditionOnValue) GetMatchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Match, true
}

// SetMatch sets field value
func (o *WAFExceptionSpecificConditionOnValue) SetMatch(v string) {
	o.Match = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for string will be returned
func (o *WAFExceptionSpecificConditionOnValue) GetValue() string {
	if o == nil || o.Value.Get() == nil {
		var ret string
		return ret
	}

	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WAFExceptionSpecificConditionOnValue) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// SetValue sets field value
func (o *WAFExceptionSpecificConditionOnValue) SetValue(v string) {
	o.Value.Set(&v)
}

func (o WAFExceptionSpecificConditionOnValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WAFExceptionSpecificConditionOnValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["match"] = o.Match
	toSerialize["value"] = o.Value.Get()
	return toSerialize, nil
}

func (o *WAFExceptionSpecificConditionOnValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"match",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWAFExceptionSpecificConditionOnValue := _WAFExceptionSpecificConditionOnValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWAFExceptionSpecificConditionOnValue)

	if err != nil {
		return err
	}

	*o = WAFExceptionSpecificConditionOnValue(varWAFExceptionSpecificConditionOnValue)

	return err
}

type NullableWAFExceptionSpecificConditionOnValue struct {
	value *WAFExceptionSpecificConditionOnValue
	isSet bool
}

func (v NullableWAFExceptionSpecificConditionOnValue) Get() *WAFExceptionSpecificConditionOnValue {
	return v.value
}

func (v *NullableWAFExceptionSpecificConditionOnValue) Set(val *WAFExceptionSpecificConditionOnValue) {
	v.value = val
	v.isSet = true
}

func (v NullableWAFExceptionSpecificConditionOnValue) IsSet() bool {
	return v.isSet
}

func (v *NullableWAFExceptionSpecificConditionOnValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWAFExceptionSpecificConditionOnValue(val *WAFExceptionSpecificConditionOnValue) *NullableWAFExceptionSpecificConditionOnValue {
	return &NullableWAFExceptionSpecificConditionOnValue{value: val, isSet: true}
}

func (v NullableWAFExceptionSpecificConditionOnValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWAFExceptionSpecificConditionOnValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



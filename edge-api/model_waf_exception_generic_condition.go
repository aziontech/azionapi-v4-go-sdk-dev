/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WAFExceptionGenericCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WAFExceptionGenericCondition{}

// WAFExceptionGenericCondition struct for WAFExceptionGenericCondition
type WAFExceptionGenericCondition struct {
	// * `any_http_header_name` - any_http_header_name * `any_http_header_value` - any_http_header_value * `any_query_string_name` - any_query_string_name * `any_query_string_value` - any_query_string_value * `any_url` - any_url * `body_form_field_name` - body_form_field_name * `body_form_field_value` - body_form_field_value * `file_extension` - file_extension * `raw_body` - raw_body
	Match string `json:"match"`
}

type _WAFExceptionGenericCondition WAFExceptionGenericCondition

// NewWAFExceptionGenericCondition instantiates a new WAFExceptionGenericCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWAFExceptionGenericCondition(match string) *WAFExceptionGenericCondition {
	this := WAFExceptionGenericCondition{}
	this.Match = match
	return &this
}

// NewWAFExceptionGenericConditionWithDefaults instantiates a new WAFExceptionGenericCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWAFExceptionGenericConditionWithDefaults() *WAFExceptionGenericCondition {
	this := WAFExceptionGenericCondition{}
	return &this
}

// GetMatch returns the Match field value
func (o *WAFExceptionGenericCondition) GetMatch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Match
}

// GetMatchOk returns a tuple with the Match field value
// and a boolean to check if the value has been set.
func (o *WAFExceptionGenericCondition) GetMatchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Match, true
}

// SetMatch sets field value
func (o *WAFExceptionGenericCondition) SetMatch(v string) {
	o.Match = v
}

func (o WAFExceptionGenericCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WAFExceptionGenericCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["match"] = o.Match
	return toSerialize, nil
}

func (o *WAFExceptionGenericCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"match",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWAFExceptionGenericCondition := _WAFExceptionGenericCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWAFExceptionGenericCondition)

	if err != nil {
		return err
	}

	*o = WAFExceptionGenericCondition(varWAFExceptionGenericCondition)

	return err
}

type NullableWAFExceptionGenericCondition struct {
	value *WAFExceptionGenericCondition
	isSet bool
}

func (v NullableWAFExceptionGenericCondition) Get() *WAFExceptionGenericCondition {
	return v.value
}

func (v *NullableWAFExceptionGenericCondition) Set(val *WAFExceptionGenericCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableWAFExceptionGenericCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableWAFExceptionGenericCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWAFExceptionGenericCondition(val *WAFExceptionGenericCondition) *NullableWAFExceptionGenericCondition {
	return &NullableWAFExceptionGenericCondition{value: val, isSet: true}
}

func (v NullableWAFExceptionGenericCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWAFExceptionGenericCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



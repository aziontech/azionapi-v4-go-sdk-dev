/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
)

// checks if the CacheVaryByCookiesModule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheVaryByCookiesModule{}

// CacheVaryByCookiesModule struct for CacheVaryByCookiesModule
type CacheVaryByCookiesModule struct {
	// * `ignore` - ignore * `all` - all * `allowlist` - allowlist * `denylist` - denylist
	Behavior *string `json:"behavior,omitempty"`
	CookieNames []string `json:"cookie_names,omitempty"`
}

// NewCacheVaryByCookiesModule instantiates a new CacheVaryByCookiesModule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheVaryByCookiesModule() *CacheVaryByCookiesModule {
	this := CacheVaryByCookiesModule{}
	return &this
}

// NewCacheVaryByCookiesModuleWithDefaults instantiates a new CacheVaryByCookiesModule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheVaryByCookiesModuleWithDefaults() *CacheVaryByCookiesModule {
	this := CacheVaryByCookiesModule{}
	return &this
}

// GetBehavior returns the Behavior field value if set, zero value otherwise.
func (o *CacheVaryByCookiesModule) GetBehavior() string {
	if o == nil || IsNil(o.Behavior) {
		var ret string
		return ret
	}
	return *o.Behavior
}

// GetBehaviorOk returns a tuple with the Behavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheVaryByCookiesModule) GetBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.Behavior) {
		return nil, false
	}
	return o.Behavior, true
}

// HasBehavior returns a boolean if a field has been set.
func (o *CacheVaryByCookiesModule) HasBehavior() bool {
	if o != nil && !IsNil(o.Behavior) {
		return true
	}

	return false
}

// SetBehavior gets a reference to the given string and assigns it to the Behavior field.
func (o *CacheVaryByCookiesModule) SetBehavior(v string) {
	o.Behavior = &v
}

// GetCookieNames returns the CookieNames field value if set, zero value otherwise.
func (o *CacheVaryByCookiesModule) GetCookieNames() []string {
	if o == nil || IsNil(o.CookieNames) {
		var ret []string
		return ret
	}
	return o.CookieNames
}

// GetCookieNamesOk returns a tuple with the CookieNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheVaryByCookiesModule) GetCookieNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.CookieNames) {
		return nil, false
	}
	return o.CookieNames, true
}

// HasCookieNames returns a boolean if a field has been set.
func (o *CacheVaryByCookiesModule) HasCookieNames() bool {
	if o != nil && !IsNil(o.CookieNames) {
		return true
	}

	return false
}

// SetCookieNames gets a reference to the given []string and assigns it to the CookieNames field.
func (o *CacheVaryByCookiesModule) SetCookieNames(v []string) {
	o.CookieNames = v
}

func (o CacheVaryByCookiesModule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheVaryByCookiesModule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Behavior) {
		toSerialize["behavior"] = o.Behavior
	}
	if !IsNil(o.CookieNames) {
		toSerialize["cookie_names"] = o.CookieNames
	}
	return toSerialize, nil
}

type NullableCacheVaryByCookiesModule struct {
	value *CacheVaryByCookiesModule
	isSet bool
}

func (v NullableCacheVaryByCookiesModule) Get() *CacheVaryByCookiesModule {
	return v.value
}

func (v *NullableCacheVaryByCookiesModule) Set(val *CacheVaryByCookiesModule) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheVaryByCookiesModule) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheVaryByCookiesModule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheVaryByCookiesModule(val *CacheVaryByCookiesModule) *NullableCacheVaryByCookiesModule {
	return &NullableCacheVaryByCookiesModule{value: val, isSet: true}
}

func (v NullableCacheVaryByCookiesModule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheVaryByCookiesModule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



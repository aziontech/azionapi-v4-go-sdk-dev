/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EdgeConnectorHTTP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EdgeConnectorHTTP{}

// EdgeConnectorHTTP struct for EdgeConnectorHTTP
type EdgeConnectorHTTP struct {
	Id int64 `json:"id"`
	Name string `json:"name" validate:"regexp=.*"`
	LastEditor string `json:"last_editor" validate:"regexp=.*"`
	LastModified time.Time `json:"last_modified"`
	Active *bool `json:"active,omitempty"`
	ProductVersion string `json:"product_version" validate:"regexp=\\\\d+\\\\.\\\\d+"`
	// Type of the edge connector  * `http` - HTTP * `edge_storage` - Edge Storage * `live_ingest` - Live Ingest
	Type string `json:"type"`
	Attributes EdgeConnectorHTTPAttributes `json:"attributes"`
}

type _EdgeConnectorHTTP EdgeConnectorHTTP

// NewEdgeConnectorHTTP instantiates a new EdgeConnectorHTTP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdgeConnectorHTTP(id int64, name string, lastEditor string, lastModified time.Time, productVersion string, type_ string, attributes EdgeConnectorHTTPAttributes) *EdgeConnectorHTTP {
	this := EdgeConnectorHTTP{}
	this.Id = id
	this.Name = name
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	this.ProductVersion = productVersion
	this.Type = type_
	this.Attributes = attributes
	return &this
}

// NewEdgeConnectorHTTPWithDefaults instantiates a new EdgeConnectorHTTP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdgeConnectorHTTPWithDefaults() *EdgeConnectorHTTP {
	this := EdgeConnectorHTTP{}
	return &this
}

// GetId returns the Id field value
func (o *EdgeConnectorHTTP) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTP) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EdgeConnectorHTTP) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *EdgeConnectorHTTP) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTP) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EdgeConnectorHTTP) SetName(v string) {
	o.Name = v
}

// GetLastEditor returns the LastEditor field value
func (o *EdgeConnectorHTTP) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTP) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *EdgeConnectorHTTP) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *EdgeConnectorHTTP) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTP) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *EdgeConnectorHTTP) SetLastModified(v time.Time) {
	o.LastModified = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EdgeConnectorHTTP) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTP) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EdgeConnectorHTTP) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EdgeConnectorHTTP) SetActive(v bool) {
	o.Active = &v
}

// GetProductVersion returns the ProductVersion field value
func (o *EdgeConnectorHTTP) GetProductVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductVersion
}

// GetProductVersionOk returns a tuple with the ProductVersion field value
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTP) GetProductVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductVersion, true
}

// SetProductVersion sets field value
func (o *EdgeConnectorHTTP) SetProductVersion(v string) {
	o.ProductVersion = v
}

// GetType returns the Type field value
func (o *EdgeConnectorHTTP) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTP) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EdgeConnectorHTTP) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *EdgeConnectorHTTP) GetAttributes() EdgeConnectorHTTPAttributes {
	if o == nil {
		var ret EdgeConnectorHTTPAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *EdgeConnectorHTTP) GetAttributesOk() (*EdgeConnectorHTTPAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *EdgeConnectorHTTP) SetAttributes(v EdgeConnectorHTTPAttributes) {
	o.Attributes = v
}

func (o EdgeConnectorHTTP) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EdgeConnectorHTTP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["product_version"] = o.ProductVersion
	toSerialize["type"] = o.Type
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

func (o *EdgeConnectorHTTP) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"last_editor",
		"last_modified",
		"product_version",
		"type",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEdgeConnectorHTTP := _EdgeConnectorHTTP{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEdgeConnectorHTTP)

	if err != nil {
		return err
	}

	*o = EdgeConnectorHTTP(varEdgeConnectorHTTP)

	return err
}

type NullableEdgeConnectorHTTP struct {
	value *EdgeConnectorHTTP
	isSet bool
}

func (v NullableEdgeConnectorHTTP) Get() *EdgeConnectorHTTP {
	return v.value
}

func (v *NullableEdgeConnectorHTTP) Set(val *EdgeConnectorHTTP) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeConnectorHTTP) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeConnectorHTTP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeConnectorHTTP(val *EdgeConnectorHTTP) *NullableEdgeConnectorHTTP {
	return &NullableEdgeConnectorHTTP{value: val, isSet: true}
}

func (v NullableEdgeConnectorHTTP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeConnectorHTTP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

Testing EdgeFirewallsRulesEngineAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package edgeapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_edgeapi_EdgeFirewallsRulesEngineAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EdgeFirewallsRulesEngineAPIService CreateEdgeFirewallRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string

		resp, httpRes, err := apiClient.EdgeFirewallsRulesEngineAPI.CreateEdgeFirewallRule(context.Background(), edgeFirewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeFirewallsRulesEngineAPIService DestroyEdgeFirewallRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string
		var id string

		resp, httpRes, err := apiClient.EdgeFirewallsRulesEngineAPI.DestroyEdgeFirewallRule(context.Background(), edgeFirewallId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeFirewallsRulesEngineAPIService ListEdgeFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string

		resp, httpRes, err := apiClient.EdgeFirewallsRulesEngineAPI.ListEdgeFirewallRules(context.Background(), edgeFirewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeFirewallsRulesEngineAPIService OrderEdgeFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string

		resp, httpRes, err := apiClient.EdgeFirewallsRulesEngineAPI.OrderEdgeFirewallRules(context.Background(), edgeFirewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeFirewallsRulesEngineAPIService PartialUpdateEdgeFirewallRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string
		var id string

		resp, httpRes, err := apiClient.EdgeFirewallsRulesEngineAPI.PartialUpdateEdgeFirewallRule(context.Background(), edgeFirewallId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeFirewallsRulesEngineAPIService RetrieveEdgeFirewallRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string
		var id string

		resp, httpRes, err := apiClient.EdgeFirewallsRulesEngineAPI.RetrieveEdgeFirewallRule(context.Background(), edgeFirewallId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeFirewallsRulesEngineAPIService UpdateEdgeFirewallRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string
		var id string

		resp, httpRes, err := apiClient.EdgeFirewallsRulesEngineAPI.UpdateEdgeFirewallRule(context.Background(), edgeFirewallId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
edge-api

Testing EdgeApplicationsResponseRulesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package edgeapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_edgeapi_EdgeApplicationsResponseRulesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EdgeApplicationsResponseRulesAPIService EdgeApplicationApiApplicationsResponseRulesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.EdgeApplicationsResponseRulesAPI.EdgeApplicationApiApplicationsResponseRulesCreate(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsResponseRulesAPIService EdgeApplicationApiApplicationsResponseRulesDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var id string

		resp, httpRes, err := apiClient.EdgeApplicationsResponseRulesAPI.EdgeApplicationApiApplicationsResponseRulesDestroy(context.Background(), applicationId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsResponseRulesAPIService EdgeApplicationApiApplicationsResponseRulesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.EdgeApplicationsResponseRulesAPI.EdgeApplicationApiApplicationsResponseRulesList(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsResponseRulesAPIService EdgeApplicationApiApplicationsResponseRulesOrderUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.EdgeApplicationsResponseRulesAPI.EdgeApplicationApiApplicationsResponseRulesOrderUpdate(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsResponseRulesAPIService EdgeApplicationApiApplicationsResponseRulesPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var id string

		resp, httpRes, err := apiClient.EdgeApplicationsResponseRulesAPI.EdgeApplicationApiApplicationsResponseRulesPartialUpdate(context.Background(), applicationId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsResponseRulesAPIService EdgeApplicationApiApplicationsResponseRulesRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var id string

		resp, httpRes, err := apiClient.EdgeApplicationsResponseRulesAPI.EdgeApplicationApiApplicationsResponseRulesRetrieve(context.Background(), applicationId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsResponseRulesAPIService EdgeApplicationApiApplicationsResponseRulesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var id string

		resp, httpRes, err := apiClient.EdgeApplicationsResponseRulesAPI.EdgeApplicationApiApplicationsResponseRulesUpdate(context.Background(), applicationId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
edge-api

Testing FirewallsRulesEngineAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package edgeapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_edgeapi_FirewallsRulesEngineAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FirewallsRulesEngineAPIService CreateFirewallRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string

		resp, httpRes, err := apiClient.FirewallsRulesEngineAPI.CreateFirewallRule(context.Background(), edgeFirewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallsRulesEngineAPIService DestroyFirewallRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string
		var id string

		resp, httpRes, err := apiClient.FirewallsRulesEngineAPI.DestroyFirewallRule(context.Background(), edgeFirewallId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallsRulesEngineAPIService ListFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string

		resp, httpRes, err := apiClient.FirewallsRulesEngineAPI.ListFirewallRules(context.Background(), edgeFirewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallsRulesEngineAPIService OrderFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string

		resp, httpRes, err := apiClient.FirewallsRulesEngineAPI.OrderFirewallRules(context.Background(), edgeFirewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallsRulesEngineAPIService PartialUpdateFirewallRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string
		var id string

		resp, httpRes, err := apiClient.FirewallsRulesEngineAPI.PartialUpdateFirewallRule(context.Background(), edgeFirewallId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallsRulesEngineAPIService RetrieveFirewallRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string
		var id string

		resp, httpRes, err := apiClient.FirewallsRulesEngineAPI.RetrieveFirewallRule(context.Background(), edgeFirewallId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallsRulesEngineAPIService UpdateFirewallRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgeFirewallId string
		var id string

		resp, httpRes, err := apiClient.FirewallsRulesEngineAPI.UpdateFirewallRule(context.Background(), edgeFirewallId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

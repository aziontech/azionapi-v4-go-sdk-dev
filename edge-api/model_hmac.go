/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
)

// checks if the HMAC type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HMAC{}

// HMAC struct for HMAC
type HMAC struct {
	Enabled *bool `json:"enabled,omitempty"`
	Config NullableAWS4HMAC `json:"config,omitempty"`
}

// NewHMAC instantiates a new HMAC object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHMAC() *HMAC {
	this := HMAC{}
	return &this
}

// NewHMACWithDefaults instantiates a new HMAC object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHMACWithDefaults() *HMAC {
	this := HMAC{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *HMAC) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HMAC) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *HMAC) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *HMAC) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetConfig returns the Config field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HMAC) GetConfig() AWS4HMAC {
	if o == nil || IsNil(o.Config.Get()) {
		var ret AWS4HMAC
		return ret
	}
	return *o.Config.Get()
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HMAC) GetConfigOk() (*AWS4HMAC, bool) {
	if o == nil {
		return nil, false
	}
	return o.Config.Get(), o.Config.IsSet()
}

// HasConfig returns a boolean if a field has been set.
func (o *HMAC) HasConfig() bool {
	if o != nil && o.Config.IsSet() {
		return true
	}

	return false
}

// SetConfig gets a reference to the given NullableAWS4HMAC and assigns it to the Config field.
func (o *HMAC) SetConfig(v AWS4HMAC) {
	o.Config.Set(&v)
}
// SetConfigNil sets the value for Config to be an explicit nil
func (o *HMAC) SetConfigNil() {
	o.Config.Set(nil)
}

// UnsetConfig ensures that no value is present for Config, not even an explicit nil
func (o *HMAC) UnsetConfig() {
	o.Config.Unset()
}

func (o HMAC) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HMAC) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Config.IsSet() {
		toSerialize["config"] = o.Config.Get()
	}
	return toSerialize, nil
}

type NullableHMAC struct {
	value *HMAC
	isSet bool
}

func (v NullableHMAC) Get() *HMAC {
	return v.value
}

func (v *NullableHMAC) Set(val *HMAC) {
	v.value = val
	v.isSet = true
}

func (v NullableHMAC) IsSet() bool {
	return v.isSet
}

func (v *NullableHMAC) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHMAC(val *HMAC) *NullableHMAC {
	return &NullableHMAC{value: val, isSet: true}
}

func (v NullableHMAC) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHMAC) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



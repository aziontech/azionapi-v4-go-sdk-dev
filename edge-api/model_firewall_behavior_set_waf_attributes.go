/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"fmt"
)

// checks if the FirewallBehaviorSetWafAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirewallBehaviorSetWafAttributes{}

// FirewallBehaviorSetWafAttributes struct for FirewallBehaviorSetWafAttributes
type FirewallBehaviorSetWafAttributes struct {
	WafId int64 `json:"waf_id"`
	// * `logging` - logging * `blocking` - blocking
	Mode string `json:"mode"`
	AdditionalProperties map[string]interface{}
}

type _FirewallBehaviorSetWafAttributes FirewallBehaviorSetWafAttributes

// NewFirewallBehaviorSetWafAttributes instantiates a new FirewallBehaviorSetWafAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallBehaviorSetWafAttributes(wafId int64, mode string) *FirewallBehaviorSetWafAttributes {
	this := FirewallBehaviorSetWafAttributes{}
	this.WafId = wafId
	this.Mode = mode
	return &this
}

// NewFirewallBehaviorSetWafAttributesWithDefaults instantiates a new FirewallBehaviorSetWafAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallBehaviorSetWafAttributesWithDefaults() *FirewallBehaviorSetWafAttributes {
	this := FirewallBehaviorSetWafAttributes{}
	return &this
}

// GetWafId returns the WafId field value
func (o *FirewallBehaviorSetWafAttributes) GetWafId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.WafId
}

// GetWafIdOk returns a tuple with the WafId field value
// and a boolean to check if the value has been set.
func (o *FirewallBehaviorSetWafAttributes) GetWafIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WafId, true
}

// SetWafId sets field value
func (o *FirewallBehaviorSetWafAttributes) SetWafId(v int64) {
	o.WafId = v
}

// GetMode returns the Mode field value
func (o *FirewallBehaviorSetWafAttributes) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *FirewallBehaviorSetWafAttributes) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *FirewallBehaviorSetWafAttributes) SetMode(v string) {
	o.Mode = v
}

func (o FirewallBehaviorSetWafAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirewallBehaviorSetWafAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["waf_id"] = o.WafId
	toSerialize["mode"] = o.Mode

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FirewallBehaviorSetWafAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"waf_id",
		"mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFirewallBehaviorSetWafAttributes := _FirewallBehaviorSetWafAttributes{}

	err = json.Unmarshal(data, &varFirewallBehaviorSetWafAttributes)

	if err != nil {
		return err
	}

	*o = FirewallBehaviorSetWafAttributes(varFirewallBehaviorSetWafAttributes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "waf_id")
		delete(additionalProperties, "mode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFirewallBehaviorSetWafAttributes struct {
	value *FirewallBehaviorSetWafAttributes
	isSet bool
}

func (v NullableFirewallBehaviorSetWafAttributes) Get() *FirewallBehaviorSetWafAttributes {
	return v.value
}

func (v *NullableFirewallBehaviorSetWafAttributes) Set(val *FirewallBehaviorSetWafAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallBehaviorSetWafAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallBehaviorSetWafAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallBehaviorSetWafAttributes(val *FirewallBehaviorSetWafAttributes) *NullableFirewallBehaviorSetWafAttributes {
	return &NullableFirewallBehaviorSetWafAttributes{value: val, isSet: true}
}

func (v NullableFirewallBehaviorSetWafAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallBehaviorSetWafAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



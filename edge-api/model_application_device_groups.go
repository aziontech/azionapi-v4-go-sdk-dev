/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApplicationDeviceGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationDeviceGroups{}

// ApplicationDeviceGroups struct for ApplicationDeviceGroups
type ApplicationDeviceGroups struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	// Enter a valid regular expression pattern to identify user agents.
	UserAgent string `json:"user_agent"`
}

type _ApplicationDeviceGroups ApplicationDeviceGroups

// NewApplicationDeviceGroups instantiates a new ApplicationDeviceGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationDeviceGroups(id int64, name string, userAgent string) *ApplicationDeviceGroups {
	this := ApplicationDeviceGroups{}
	this.Id = id
	this.Name = name
	this.UserAgent = userAgent
	return &this
}

// NewApplicationDeviceGroupsWithDefaults instantiates a new ApplicationDeviceGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationDeviceGroupsWithDefaults() *ApplicationDeviceGroups {
	this := ApplicationDeviceGroups{}
	return &this
}

// GetId returns the Id field value
func (o *ApplicationDeviceGroups) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApplicationDeviceGroups) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApplicationDeviceGroups) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ApplicationDeviceGroups) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationDeviceGroups) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationDeviceGroups) SetName(v string) {
	o.Name = v
}

// GetUserAgent returns the UserAgent field value
func (o *ApplicationDeviceGroups) GetUserAgent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value
// and a boolean to check if the value has been set.
func (o *ApplicationDeviceGroups) GetUserAgentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserAgent, true
}

// SetUserAgent sets field value
func (o *ApplicationDeviceGroups) SetUserAgent(v string) {
	o.UserAgent = v
}

func (o ApplicationDeviceGroups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationDeviceGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["user_agent"] = o.UserAgent
	return toSerialize, nil
}

func (o *ApplicationDeviceGroups) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"user_agent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationDeviceGroups := _ApplicationDeviceGroups{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplicationDeviceGroups)

	if err != nil {
		return err
	}

	*o = ApplicationDeviceGroups(varApplicationDeviceGroups)

	return err
}

type NullableApplicationDeviceGroups struct {
	value *ApplicationDeviceGroups
	isSet bool
}

func (v NullableApplicationDeviceGroups) Get() *ApplicationDeviceGroups {
	return v.value
}

func (v *NullableApplicationDeviceGroups) Set(val *ApplicationDeviceGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationDeviceGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationDeviceGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationDeviceGroups(val *ApplicationDeviceGroups) *NullableApplicationDeviceGroups {
	return &NullableApplicationDeviceGroups{value: val, isSet: true}
}

func (v NullableApplicationDeviceGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationDeviceGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AWS4HMACRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AWS4HMACRequest{}

// AWS4HMACRequest struct for AWS4HMACRequest
type AWS4HMACRequest struct {
	// * `aws4_hmac_sha256` - AWS for HMAC - SHA256
	Type string `json:"type"`
	Attributes AWS4HMACAttributesRequest `json:"attributes"`
}

type _AWS4HMACRequest AWS4HMACRequest

// NewAWS4HMACRequest instantiates a new AWS4HMACRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWS4HMACRequest(type_ string, attributes AWS4HMACAttributesRequest) *AWS4HMACRequest {
	this := AWS4HMACRequest{}
	this.Type = type_
	this.Attributes = attributes
	return &this
}

// NewAWS4HMACRequestWithDefaults instantiates a new AWS4HMACRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWS4HMACRequestWithDefaults() *AWS4HMACRequest {
	this := AWS4HMACRequest{}
	return &this
}

// GetType returns the Type field value
func (o *AWS4HMACRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AWS4HMACRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AWS4HMACRequest) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *AWS4HMACRequest) GetAttributes() AWS4HMACAttributesRequest {
	if o == nil {
		var ret AWS4HMACAttributesRequest
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *AWS4HMACRequest) GetAttributesOk() (*AWS4HMACAttributesRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *AWS4HMACRequest) SetAttributes(v AWS4HMACAttributesRequest) {
	o.Attributes = v
}

func (o AWS4HMACRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AWS4HMACRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

func (o *AWS4HMACRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAWS4HMACRequest := _AWS4HMACRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAWS4HMACRequest)

	if err != nil {
		return err
	}

	*o = AWS4HMACRequest(varAWS4HMACRequest)

	return err
}

type NullableAWS4HMACRequest struct {
	value *AWS4HMACRequest
	isSet bool
}

func (v NullableAWS4HMACRequest) Get() *AWS4HMACRequest {
	return v.value
}

func (v *NullableAWS4HMACRequest) Set(val *AWS4HMACRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAWS4HMACRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAWS4HMACRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWS4HMACRequest(val *AWS4HMACRequest) *NullableAWS4HMACRequest {
	return &NullableAWS4HMACRequest{value: val, isSet: true}
}

func (v NullableAWS4HMACRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWS4HMACRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



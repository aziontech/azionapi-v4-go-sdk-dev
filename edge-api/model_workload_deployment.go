/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the WorkloadDeployment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadDeployment{}

// WorkloadDeployment struct for WorkloadDeployment
type WorkloadDeployment struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	Current *bool `json:"current,omitempty"`
	Active *bool `json:"active,omitempty"`
	Strategy DeploymentStrategyDefaultDeploymentStrategy `json:"strategy"`
	LastEditor string `json:"last_editor"`
	LastModified time.Time `json:"last_modified"`
}

type _WorkloadDeployment WorkloadDeployment

// NewWorkloadDeployment instantiates a new WorkloadDeployment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadDeployment(id int64, name string, strategy DeploymentStrategyDefaultDeploymentStrategy, lastEditor string, lastModified time.Time) *WorkloadDeployment {
	this := WorkloadDeployment{}
	this.Id = id
	this.Name = name
	this.Strategy = strategy
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	return &this
}

// NewWorkloadDeploymentWithDefaults instantiates a new WorkloadDeployment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadDeploymentWithDefaults() *WorkloadDeployment {
	this := WorkloadDeployment{}
	return &this
}

// GetId returns the Id field value
func (o *WorkloadDeployment) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WorkloadDeployment) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WorkloadDeployment) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *WorkloadDeployment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WorkloadDeployment) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WorkloadDeployment) SetName(v string) {
	o.Name = v
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *WorkloadDeployment) GetCurrent() bool {
	if o == nil || IsNil(o.Current) {
		var ret bool
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadDeployment) GetCurrentOk() (*bool, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *WorkloadDeployment) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given bool and assigns it to the Current field.
func (o *WorkloadDeployment) SetCurrent(v bool) {
	o.Current = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *WorkloadDeployment) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadDeployment) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *WorkloadDeployment) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *WorkloadDeployment) SetActive(v bool) {
	o.Active = &v
}

// GetStrategy returns the Strategy field value
func (o *WorkloadDeployment) GetStrategy() DeploymentStrategyDefaultDeploymentStrategy {
	if o == nil {
		var ret DeploymentStrategyDefaultDeploymentStrategy
		return ret
	}

	return o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value
// and a boolean to check if the value has been set.
func (o *WorkloadDeployment) GetStrategyOk() (*DeploymentStrategyDefaultDeploymentStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strategy, true
}

// SetStrategy sets field value
func (o *WorkloadDeployment) SetStrategy(v DeploymentStrategyDefaultDeploymentStrategy) {
	o.Strategy = v
}

// GetLastEditor returns the LastEditor field value
func (o *WorkloadDeployment) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *WorkloadDeployment) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *WorkloadDeployment) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *WorkloadDeployment) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *WorkloadDeployment) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *WorkloadDeployment) SetLastModified(v time.Time) {
	o.LastModified = v
}

func (o WorkloadDeployment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadDeployment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["strategy"] = o.Strategy
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	return toSerialize, nil
}

func (o *WorkloadDeployment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"strategy",
		"last_editor",
		"last_modified",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkloadDeployment := _WorkloadDeployment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkloadDeployment)

	if err != nil {
		return err
	}

	*o = WorkloadDeployment(varWorkloadDeployment)

	return err
}

type NullableWorkloadDeployment struct {
	value *WorkloadDeployment
	isSet bool
}

func (v NullableWorkloadDeployment) Get() *WorkloadDeployment {
	return v.value
}

func (v *NullableWorkloadDeployment) Set(val *WorkloadDeployment) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadDeployment(val *WorkloadDeployment) *NullableWorkloadDeployment {
	return &NullableWorkloadDeployment{value: val, isSet: true}
}

func (v NullableWorkloadDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PatchedConnectorPolymorphicRequest - struct for PatchedConnectorPolymorphicRequest
type PatchedConnectorPolymorphicRequest struct {
	PatchedConnectorHTTPRequest *PatchedConnectorHTTPRequest
	PatchedConnectorLiveIngestRequest *PatchedConnectorLiveIngestRequest
	PatchedConnectorStorageRequest *PatchedConnectorStorageRequest
}

// PatchedConnectorHTTPRequestAsPatchedConnectorPolymorphicRequest is a convenience function that returns PatchedConnectorHTTPRequest wrapped in PatchedConnectorPolymorphicRequest
func PatchedConnectorHTTPRequestAsPatchedConnectorPolymorphicRequest(v *PatchedConnectorHTTPRequest) PatchedConnectorPolymorphicRequest {
	return PatchedConnectorPolymorphicRequest{
		PatchedConnectorHTTPRequest: v,
	}
}

// PatchedConnectorLiveIngestRequestAsPatchedConnectorPolymorphicRequest is a convenience function that returns PatchedConnectorLiveIngestRequest wrapped in PatchedConnectorPolymorphicRequest
func PatchedConnectorLiveIngestRequestAsPatchedConnectorPolymorphicRequest(v *PatchedConnectorLiveIngestRequest) PatchedConnectorPolymorphicRequest {
	return PatchedConnectorPolymorphicRequest{
		PatchedConnectorLiveIngestRequest: v,
	}
}

// PatchedConnectorStorageRequestAsPatchedConnectorPolymorphicRequest is a convenience function that returns PatchedConnectorStorageRequest wrapped in PatchedConnectorPolymorphicRequest
func PatchedConnectorStorageRequestAsPatchedConnectorPolymorphicRequest(v *PatchedConnectorStorageRequest) PatchedConnectorPolymorphicRequest {
	return PatchedConnectorPolymorphicRequest{
		PatchedConnectorStorageRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PatchedConnectorPolymorphicRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PatchedConnectorHTTPRequest
	err = newStrictDecoder(data).Decode(&dst.PatchedConnectorHTTPRequest)
	if err == nil {
		jsonPatchedConnectorHTTPRequest, _ := json.Marshal(dst.PatchedConnectorHTTPRequest)
		if string(jsonPatchedConnectorHTTPRequest) == "{}" { // empty struct
			dst.PatchedConnectorHTTPRequest = nil
		} else {
			if err = validator.Validate(dst.PatchedConnectorHTTPRequest); err != nil {
				dst.PatchedConnectorHTTPRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.PatchedConnectorHTTPRequest = nil
	}

	// try to unmarshal data into PatchedConnectorLiveIngestRequest
	err = newStrictDecoder(data).Decode(&dst.PatchedConnectorLiveIngestRequest)
	if err == nil {
		jsonPatchedConnectorLiveIngestRequest, _ := json.Marshal(dst.PatchedConnectorLiveIngestRequest)
		if string(jsonPatchedConnectorLiveIngestRequest) == "{}" { // empty struct
			dst.PatchedConnectorLiveIngestRequest = nil
		} else {
			if err = validator.Validate(dst.PatchedConnectorLiveIngestRequest); err != nil {
				dst.PatchedConnectorLiveIngestRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.PatchedConnectorLiveIngestRequest = nil
	}

	// try to unmarshal data into PatchedConnectorStorageRequest
	err = newStrictDecoder(data).Decode(&dst.PatchedConnectorStorageRequest)
	if err == nil {
		jsonPatchedConnectorStorageRequest, _ := json.Marshal(dst.PatchedConnectorStorageRequest)
		if string(jsonPatchedConnectorStorageRequest) == "{}" { // empty struct
			dst.PatchedConnectorStorageRequest = nil
		} else {
			if err = validator.Validate(dst.PatchedConnectorStorageRequest); err != nil {
				dst.PatchedConnectorStorageRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.PatchedConnectorStorageRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PatchedConnectorHTTPRequest = nil
		dst.PatchedConnectorLiveIngestRequest = nil
		dst.PatchedConnectorStorageRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PatchedConnectorPolymorphicRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PatchedConnectorPolymorphicRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PatchedConnectorPolymorphicRequest) MarshalJSON() ([]byte, error) {
	if src.PatchedConnectorHTTPRequest != nil {
		return json.Marshal(&src.PatchedConnectorHTTPRequest)
	}

	if src.PatchedConnectorLiveIngestRequest != nil {
		return json.Marshal(&src.PatchedConnectorLiveIngestRequest)
	}

	if src.PatchedConnectorStorageRequest != nil {
		return json.Marshal(&src.PatchedConnectorStorageRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PatchedConnectorPolymorphicRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PatchedConnectorHTTPRequest != nil {
		return obj.PatchedConnectorHTTPRequest
	}

	if obj.PatchedConnectorLiveIngestRequest != nil {
		return obj.PatchedConnectorLiveIngestRequest
	}

	if obj.PatchedConnectorStorageRequest != nil {
		return obj.PatchedConnectorStorageRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PatchedConnectorPolymorphicRequest) GetActualInstanceValue() (interface{}) {
	if obj.PatchedConnectorHTTPRequest != nil {
		return *obj.PatchedConnectorHTTPRequest
	}

	if obj.PatchedConnectorLiveIngestRequest != nil {
		return *obj.PatchedConnectorLiveIngestRequest
	}

	if obj.PatchedConnectorStorageRequest != nil {
		return *obj.PatchedConnectorStorageRequest
	}

	// all schemas are nil
	return nil
}

type NullablePatchedConnectorPolymorphicRequest struct {
	value *PatchedConnectorPolymorphicRequest
	isSet bool
}

func (v NullablePatchedConnectorPolymorphicRequest) Get() *PatchedConnectorPolymorphicRequest {
	return v.value
}

func (v *NullablePatchedConnectorPolymorphicRequest) Set(val *PatchedConnectorPolymorphicRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedConnectorPolymorphicRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedConnectorPolymorphicRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedConnectorPolymorphicRequest(val *PatchedConnectorPolymorphicRequest) *NullablePatchedConnectorPolymorphicRequest {
	return &NullablePatchedConnectorPolymorphicRequest{value: val, isSet: true}
}

func (v NullablePatchedConnectorPolymorphicRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedConnectorPolymorphicRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



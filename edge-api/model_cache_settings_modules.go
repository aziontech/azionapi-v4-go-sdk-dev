/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
)

// checks if the CacheSettingsModules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheSettingsModules{}

// CacheSettingsModules struct for CacheSettingsModules
type CacheSettingsModules struct {
	Cache *CacheSettingsEdgeCacheModule `json:"cache,omitempty"`
	ApplicationAccelerator *CacheSettingsApplicationAcceleratorModule `json:"application_accelerator,omitempty"`
}

// NewCacheSettingsModules instantiates a new CacheSettingsModules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheSettingsModules() *CacheSettingsModules {
	this := CacheSettingsModules{}
	return &this
}

// NewCacheSettingsModulesWithDefaults instantiates a new CacheSettingsModules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheSettingsModulesWithDefaults() *CacheSettingsModules {
	this := CacheSettingsModules{}
	return &this
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *CacheSettingsModules) GetCache() CacheSettingsEdgeCacheModule {
	if o == nil || IsNil(o.Cache) {
		var ret CacheSettingsEdgeCacheModule
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsModules) GetCacheOk() (*CacheSettingsEdgeCacheModule, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *CacheSettingsModules) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given CacheSettingsEdgeCacheModule and assigns it to the Cache field.
func (o *CacheSettingsModules) SetCache(v CacheSettingsEdgeCacheModule) {
	o.Cache = &v
}

// GetApplicationAccelerator returns the ApplicationAccelerator field value if set, zero value otherwise.
func (o *CacheSettingsModules) GetApplicationAccelerator() CacheSettingsApplicationAcceleratorModule {
	if o == nil || IsNil(o.ApplicationAccelerator) {
		var ret CacheSettingsApplicationAcceleratorModule
		return ret
	}
	return *o.ApplicationAccelerator
}

// GetApplicationAcceleratorOk returns a tuple with the ApplicationAccelerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsModules) GetApplicationAcceleratorOk() (*CacheSettingsApplicationAcceleratorModule, bool) {
	if o == nil || IsNil(o.ApplicationAccelerator) {
		return nil, false
	}
	return o.ApplicationAccelerator, true
}

// HasApplicationAccelerator returns a boolean if a field has been set.
func (o *CacheSettingsModules) HasApplicationAccelerator() bool {
	if o != nil && !IsNil(o.ApplicationAccelerator) {
		return true
	}

	return false
}

// SetApplicationAccelerator gets a reference to the given CacheSettingsApplicationAcceleratorModule and assigns it to the ApplicationAccelerator field.
func (o *CacheSettingsModules) SetApplicationAccelerator(v CacheSettingsApplicationAcceleratorModule) {
	o.ApplicationAccelerator = &v
}

func (o CacheSettingsModules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheSettingsModules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	if !IsNil(o.ApplicationAccelerator) {
		toSerialize["application_accelerator"] = o.ApplicationAccelerator
	}
	return toSerialize, nil
}

type NullableCacheSettingsModules struct {
	value *CacheSettingsModules
	isSet bool
}

func (v NullableCacheSettingsModules) Get() *CacheSettingsModules {
	return v.value
}

func (v *NullableCacheSettingsModules) Set(val *CacheSettingsModules) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheSettingsModules) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheSettingsModules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheSettingsModules(val *CacheSettingsModules) *NullableCacheSettingsModules {
	return &NullableCacheSettingsModules{value: val, isSet: true}
}

func (v NullableCacheSettingsModules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheSettingsModules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapi

import (
	"encoding/json"
)

// checks if the CacheVaryByDevicesModule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheVaryByDevicesModule{}

// CacheVaryByDevicesModule struct for CacheVaryByDevicesModule
type CacheVaryByDevicesModule struct {
	// * `ignore` - ignore * `allowlist` - allowlist
	Behavior *string `json:"behavior,omitempty"`
	DeviceGroup []int64 `json:"device_group,omitempty"`
}

// NewCacheVaryByDevicesModule instantiates a new CacheVaryByDevicesModule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheVaryByDevicesModule() *CacheVaryByDevicesModule {
	this := CacheVaryByDevicesModule{}
	return &this
}

// NewCacheVaryByDevicesModuleWithDefaults instantiates a new CacheVaryByDevicesModule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheVaryByDevicesModuleWithDefaults() *CacheVaryByDevicesModule {
	this := CacheVaryByDevicesModule{}
	return &this
}

// GetBehavior returns the Behavior field value if set, zero value otherwise.
func (o *CacheVaryByDevicesModule) GetBehavior() string {
	if o == nil || IsNil(o.Behavior) {
		var ret string
		return ret
	}
	return *o.Behavior
}

// GetBehaviorOk returns a tuple with the Behavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheVaryByDevicesModule) GetBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.Behavior) {
		return nil, false
	}
	return o.Behavior, true
}

// HasBehavior returns a boolean if a field has been set.
func (o *CacheVaryByDevicesModule) HasBehavior() bool {
	if o != nil && !IsNil(o.Behavior) {
		return true
	}

	return false
}

// SetBehavior gets a reference to the given string and assigns it to the Behavior field.
func (o *CacheVaryByDevicesModule) SetBehavior(v string) {
	o.Behavior = &v
}

// GetDeviceGroup returns the DeviceGroup field value if set, zero value otherwise.
func (o *CacheVaryByDevicesModule) GetDeviceGroup() []int64 {
	if o == nil || IsNil(o.DeviceGroup) {
		var ret []int64
		return ret
	}
	return o.DeviceGroup
}

// GetDeviceGroupOk returns a tuple with the DeviceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheVaryByDevicesModule) GetDeviceGroupOk() ([]int64, bool) {
	if o == nil || IsNil(o.DeviceGroup) {
		return nil, false
	}
	return o.DeviceGroup, true
}

// HasDeviceGroup returns a boolean if a field has been set.
func (o *CacheVaryByDevicesModule) HasDeviceGroup() bool {
	if o != nil && !IsNil(o.DeviceGroup) {
		return true
	}

	return false
}

// SetDeviceGroup gets a reference to the given []int64 and assigns it to the DeviceGroup field.
func (o *CacheVaryByDevicesModule) SetDeviceGroup(v []int64) {
	o.DeviceGroup = v
}

func (o CacheVaryByDevicesModule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheVaryByDevicesModule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Behavior) {
		toSerialize["behavior"] = o.Behavior
	}
	if !IsNil(o.DeviceGroup) {
		toSerialize["device_group"] = o.DeviceGroup
	}
	return toSerialize, nil
}

type NullableCacheVaryByDevicesModule struct {
	value *CacheVaryByDevicesModule
	isSet bool
}

func (v NullableCacheVaryByDevicesModule) Get() *CacheVaryByDevicesModule {
	return v.value
}

func (v *NullableCacheVaryByDevicesModule) Set(val *CacheVaryByDevicesModule) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheVaryByDevicesModule) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheVaryByDevicesModule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheVaryByDevicesModule(val *CacheVaryByDevicesModule) *NullableCacheVaryByDevicesModule {
	return &NullableCacheVaryByDevicesModule{value: val, isSet: true}
}

func (v NullableCacheVaryByDevicesModule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheVaryByDevicesModule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



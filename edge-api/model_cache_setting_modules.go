/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge-api

import (
	"encoding/json"
)

// checks if the CacheSettingModules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheSettingModules{}

// CacheSettingModules struct for CacheSettingModules
type CacheSettingModules struct {
	BrowserCache *BrowserCacheModule `json:"browser_cache,omitempty"`
	EdgeCache *EdgeCacheModule `json:"edge_cache,omitempty"`
	ApplicationControls *ApplicationControlsModule `json:"application_controls,omitempty"`
	SliceControls *SliceControlsModule `json:"slice_controls,omitempty"`
}

// NewCacheSettingModules instantiates a new CacheSettingModules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheSettingModules() *CacheSettingModules {
	this := CacheSettingModules{}
	return &this
}

// NewCacheSettingModulesWithDefaults instantiates a new CacheSettingModules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheSettingModulesWithDefaults() *CacheSettingModules {
	this := CacheSettingModules{}
	return &this
}

// GetBrowserCache returns the BrowserCache field value if set, zero value otherwise.
func (o *CacheSettingModules) GetBrowserCache() BrowserCacheModule {
	if o == nil || IsNil(o.BrowserCache) {
		var ret BrowserCacheModule
		return ret
	}
	return *o.BrowserCache
}

// GetBrowserCacheOk returns a tuple with the BrowserCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingModules) GetBrowserCacheOk() (*BrowserCacheModule, bool) {
	if o == nil || IsNil(o.BrowserCache) {
		return nil, false
	}
	return o.BrowserCache, true
}

// HasBrowserCache returns a boolean if a field has been set.
func (o *CacheSettingModules) HasBrowserCache() bool {
	if o != nil && !IsNil(o.BrowserCache) {
		return true
	}

	return false
}

// SetBrowserCache gets a reference to the given BrowserCacheModule and assigns it to the BrowserCache field.
func (o *CacheSettingModules) SetBrowserCache(v BrowserCacheModule) {
	o.BrowserCache = &v
}

// GetEdgeCache returns the EdgeCache field value if set, zero value otherwise.
func (o *CacheSettingModules) GetEdgeCache() EdgeCacheModule {
	if o == nil || IsNil(o.EdgeCache) {
		var ret EdgeCacheModule
		return ret
	}
	return *o.EdgeCache
}

// GetEdgeCacheOk returns a tuple with the EdgeCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingModules) GetEdgeCacheOk() (*EdgeCacheModule, bool) {
	if o == nil || IsNil(o.EdgeCache) {
		return nil, false
	}
	return o.EdgeCache, true
}

// HasEdgeCache returns a boolean if a field has been set.
func (o *CacheSettingModules) HasEdgeCache() bool {
	if o != nil && !IsNil(o.EdgeCache) {
		return true
	}

	return false
}

// SetEdgeCache gets a reference to the given EdgeCacheModule and assigns it to the EdgeCache field.
func (o *CacheSettingModules) SetEdgeCache(v EdgeCacheModule) {
	o.EdgeCache = &v
}

// GetApplicationControls returns the ApplicationControls field value if set, zero value otherwise.
func (o *CacheSettingModules) GetApplicationControls() ApplicationControlsModule {
	if o == nil || IsNil(o.ApplicationControls) {
		var ret ApplicationControlsModule
		return ret
	}
	return *o.ApplicationControls
}

// GetApplicationControlsOk returns a tuple with the ApplicationControls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingModules) GetApplicationControlsOk() (*ApplicationControlsModule, bool) {
	if o == nil || IsNil(o.ApplicationControls) {
		return nil, false
	}
	return o.ApplicationControls, true
}

// HasApplicationControls returns a boolean if a field has been set.
func (o *CacheSettingModules) HasApplicationControls() bool {
	if o != nil && !IsNil(o.ApplicationControls) {
		return true
	}

	return false
}

// SetApplicationControls gets a reference to the given ApplicationControlsModule and assigns it to the ApplicationControls field.
func (o *CacheSettingModules) SetApplicationControls(v ApplicationControlsModule) {
	o.ApplicationControls = &v
}

// GetSliceControls returns the SliceControls field value if set, zero value otherwise.
func (o *CacheSettingModules) GetSliceControls() SliceControlsModule {
	if o == nil || IsNil(o.SliceControls) {
		var ret SliceControlsModule
		return ret
	}
	return *o.SliceControls
}

// GetSliceControlsOk returns a tuple with the SliceControls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingModules) GetSliceControlsOk() (*SliceControlsModule, bool) {
	if o == nil || IsNil(o.SliceControls) {
		return nil, false
	}
	return o.SliceControls, true
}

// HasSliceControls returns a boolean if a field has been set.
func (o *CacheSettingModules) HasSliceControls() bool {
	if o != nil && !IsNil(o.SliceControls) {
		return true
	}

	return false
}

// SetSliceControls gets a reference to the given SliceControlsModule and assigns it to the SliceControls field.
func (o *CacheSettingModules) SetSliceControls(v SliceControlsModule) {
	o.SliceControls = &v
}

func (o CacheSettingModules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheSettingModules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrowserCache) {
		toSerialize["browser_cache"] = o.BrowserCache
	}
	if !IsNil(o.EdgeCache) {
		toSerialize["edge_cache"] = o.EdgeCache
	}
	if !IsNil(o.ApplicationControls) {
		toSerialize["application_controls"] = o.ApplicationControls
	}
	if !IsNil(o.SliceControls) {
		toSerialize["slice_controls"] = o.SliceControls
	}
	return toSerialize, nil
}

type NullableCacheSettingModules struct {
	value *CacheSettingModules
	isSet bool
}

func (v NullableCacheSettingModules) Get() *CacheSettingModules {
	return v.value
}

func (v *NullableCacheSettingModules) Set(val *CacheSettingModules) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheSettingModules) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheSettingModules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheSettingModules(val *CacheSettingModules) *NullableCacheSettingModules {
	return &NullableCacheSettingModules{value: val, isSet: true}
}

func (v NullableCacheSettingModules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheSettingModules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
tls-api

REST API OpenAPI documentation for the tls-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tlsapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CertificateSigningRequestRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateSigningRequestRequest{}

// CertificateSigningRequestRequest struct for CertificateSigningRequestRequest
type CertificateSigningRequestRequest struct {
	Name string `json:"name" validate:"regexp=.*"`
	Certificate NullableString `json:"certificate,omitempty" validate:"regexp=.*"`
	PrivateKey NullableString `json:"private_key,omitempty" validate:"regexp=.*"`
	// The value can't be changed after the certificate creation.  * `edge_certificate` - Edge Certificate * `trusted_ca_certificate` - Trusted CA Certificate
	Type *string `json:"type,omitempty"`
	// * `rsa_2048` - 2048-bit RSA * `rsa_4096` - 4096-bit RSA * `ecc_384` - 384-bit Prime Field Curve
	KeyAlgorithm *string `json:"key_algorithm,omitempty"`
	Active *bool `json:"active,omitempty"`
	CommonName string `json:"common_name" validate:"regexp=^(((\\\\*\\\\.)?[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\\\.)+[a-zA-Z](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)$"`
	AlternativeNames []string `json:"alternative_names,omitempty"`
	Country string `json:"country" validate:"regexp=[a-zA-Z]{2}"`
	State string `json:"state" validate:"regexp=.*"`
	Locality string `json:"locality" validate:"regexp=.*"`
	Organization string `json:"organization" validate:"regexp=.*"`
	OrganizationUnity string `json:"organization_unity" validate:"regexp=.*"`
	Email string `json:"email"`
}

type _CertificateSigningRequestRequest CertificateSigningRequestRequest

// NewCertificateSigningRequestRequest instantiates a new CertificateSigningRequestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateSigningRequestRequest(name string, commonName string, country string, state string, locality string, organization string, organizationUnity string, email string) *CertificateSigningRequestRequest {
	this := CertificateSigningRequestRequest{}
	this.Name = name
	this.CommonName = commonName
	this.Country = country
	this.State = state
	this.Locality = locality
	this.Organization = organization
	this.OrganizationUnity = organizationUnity
	this.Email = email
	return &this
}

// NewCertificateSigningRequestRequestWithDefaults instantiates a new CertificateSigningRequestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateSigningRequestRequestWithDefaults() *CertificateSigningRequestRequest {
	this := CertificateSigningRequestRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CertificateSigningRequestRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CertificateSigningRequestRequest) SetName(v string) {
	o.Name = v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateSigningRequestRequest) GetCertificate() string {
	if o == nil || IsNil(o.Certificate.Get()) {
		var ret string
		return ret
	}
	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateSigningRequestRequest) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// HasCertificate returns a boolean if a field has been set.
func (o *CertificateSigningRequestRequest) HasCertificate() bool {
	if o != nil && o.Certificate.IsSet() {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given NullableString and assigns it to the Certificate field.
func (o *CertificateSigningRequestRequest) SetCertificate(v string) {
	o.Certificate.Set(&v)
}
// SetCertificateNil sets the value for Certificate to be an explicit nil
func (o *CertificateSigningRequestRequest) SetCertificateNil() {
	o.Certificate.Set(nil)
}

// UnsetCertificate ensures that no value is present for Certificate, not even an explicit nil
func (o *CertificateSigningRequestRequest) UnsetCertificate() {
	o.Certificate.Unset()
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateSigningRequestRequest) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey.Get()) {
		var ret string
		return ret
	}
	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateSigningRequestRequest) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *CertificateSigningRequestRequest) HasPrivateKey() bool {
	if o != nil && o.PrivateKey.IsSet() {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given NullableString and assigns it to the PrivateKey field.
func (o *CertificateSigningRequestRequest) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}
// SetPrivateKeyNil sets the value for PrivateKey to be an explicit nil
func (o *CertificateSigningRequestRequest) SetPrivateKeyNil() {
	o.PrivateKey.Set(nil)
}

// UnsetPrivateKey ensures that no value is present for PrivateKey, not even an explicit nil
func (o *CertificateSigningRequestRequest) UnsetPrivateKey() {
	o.PrivateKey.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CertificateSigningRequestRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CertificateSigningRequestRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CertificateSigningRequestRequest) SetType(v string) {
	o.Type = &v
}

// GetKeyAlgorithm returns the KeyAlgorithm field value if set, zero value otherwise.
func (o *CertificateSigningRequestRequest) GetKeyAlgorithm() string {
	if o == nil || IsNil(o.KeyAlgorithm) {
		var ret string
		return ret
	}
	return *o.KeyAlgorithm
}

// GetKeyAlgorithmOk returns a tuple with the KeyAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetKeyAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.KeyAlgorithm) {
		return nil, false
	}
	return o.KeyAlgorithm, true
}

// HasKeyAlgorithm returns a boolean if a field has been set.
func (o *CertificateSigningRequestRequest) HasKeyAlgorithm() bool {
	if o != nil && !IsNil(o.KeyAlgorithm) {
		return true
	}

	return false
}

// SetKeyAlgorithm gets a reference to the given string and assigns it to the KeyAlgorithm field.
func (o *CertificateSigningRequestRequest) SetKeyAlgorithm(v string) {
	o.KeyAlgorithm = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CertificateSigningRequestRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CertificateSigningRequestRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CertificateSigningRequestRequest) SetActive(v bool) {
	o.Active = &v
}

// GetCommonName returns the CommonName field value
func (o *CertificateSigningRequestRequest) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *CertificateSigningRequestRequest) SetCommonName(v string) {
	o.CommonName = v
}

// GetAlternativeNames returns the AlternativeNames field value if set, zero value otherwise.
func (o *CertificateSigningRequestRequest) GetAlternativeNames() []string {
	if o == nil || IsNil(o.AlternativeNames) {
		var ret []string
		return ret
	}
	return o.AlternativeNames
}

// GetAlternativeNamesOk returns a tuple with the AlternativeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetAlternativeNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.AlternativeNames) {
		return nil, false
	}
	return o.AlternativeNames, true
}

// HasAlternativeNames returns a boolean if a field has been set.
func (o *CertificateSigningRequestRequest) HasAlternativeNames() bool {
	if o != nil && !IsNil(o.AlternativeNames) {
		return true
	}

	return false
}

// SetAlternativeNames gets a reference to the given []string and assigns it to the AlternativeNames field.
func (o *CertificateSigningRequestRequest) SetAlternativeNames(v []string) {
	o.AlternativeNames = v
}

// GetCountry returns the Country field value
func (o *CertificateSigningRequestRequest) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *CertificateSigningRequestRequest) SetCountry(v string) {
	o.Country = v
}

// GetState returns the State field value
func (o *CertificateSigningRequestRequest) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CertificateSigningRequestRequest) SetState(v string) {
	o.State = v
}

// GetLocality returns the Locality field value
func (o *CertificateSigningRequestRequest) GetLocality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetLocalityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locality, true
}

// SetLocality sets field value
func (o *CertificateSigningRequestRequest) SetLocality(v string) {
	o.Locality = v
}

// GetOrganization returns the Organization field value
func (o *CertificateSigningRequestRequest) GetOrganization() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetOrganizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *CertificateSigningRequestRequest) SetOrganization(v string) {
	o.Organization = v
}

// GetOrganizationUnity returns the OrganizationUnity field value
func (o *CertificateSigningRequestRequest) GetOrganizationUnity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationUnity
}

// GetOrganizationUnityOk returns a tuple with the OrganizationUnity field value
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetOrganizationUnityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationUnity, true
}

// SetOrganizationUnity sets field value
func (o *CertificateSigningRequestRequest) SetOrganizationUnity(v string) {
	o.OrganizationUnity = v
}

// GetEmail returns the Email field value
func (o *CertificateSigningRequestRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CertificateSigningRequestRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CertificateSigningRequestRequest) SetEmail(v string) {
	o.Email = v
}

func (o CertificateSigningRequestRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateSigningRequestRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Certificate.IsSet() {
		toSerialize["certificate"] = o.Certificate.Get()
	}
	if o.PrivateKey.IsSet() {
		toSerialize["private_key"] = o.PrivateKey.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.KeyAlgorithm) {
		toSerialize["key_algorithm"] = o.KeyAlgorithm
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["common_name"] = o.CommonName
	if !IsNil(o.AlternativeNames) {
		toSerialize["alternative_names"] = o.AlternativeNames
	}
	toSerialize["country"] = o.Country
	toSerialize["state"] = o.State
	toSerialize["locality"] = o.Locality
	toSerialize["organization"] = o.Organization
	toSerialize["organization_unity"] = o.OrganizationUnity
	toSerialize["email"] = o.Email
	return toSerialize, nil
}

func (o *CertificateSigningRequestRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"common_name",
		"country",
		"state",
		"locality",
		"organization",
		"organization_unity",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateSigningRequestRequest := _CertificateSigningRequestRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCertificateSigningRequestRequest)

	if err != nil {
		return err
	}

	*o = CertificateSigningRequestRequest(varCertificateSigningRequestRequest)

	return err
}

type NullableCertificateSigningRequestRequest struct {
	value *CertificateSigningRequestRequest
	isSet bool
}

func (v NullableCertificateSigningRequestRequest) Get() *CertificateSigningRequestRequest {
	return v.value
}

func (v *NullableCertificateSigningRequestRequest) Set(val *CertificateSigningRequestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateSigningRequestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateSigningRequestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateSigningRequestRequest(val *CertificateSigningRequestRequest) *NullableCertificateSigningRequestRequest {
	return &NullableCertificateSigningRequestRequest{value: val, isSet: true}
}

func (v NullableCertificateSigningRequestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateSigningRequestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
tls-api

REST API OpenAPI documentation for the tls-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tlsapi

import (
	"encoding/json"
)

// checks if the ResponseBadRequestCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseBadRequestCertificate{}

// ResponseBadRequestCertificate struct for ResponseBadRequestCertificate
type ResponseBadRequestCertificate struct {
	Id []string `json:"id,omitempty"`
	Name []string `json:"name,omitempty"`
	Certificate []string `json:"certificate,omitempty"`
	PrivateKey []string `json:"private_key,omitempty"`
	Issuer []string `json:"issuer,omitempty"`
	Validity []string `json:"validity,omitempty"`
	SubjectName *ResponseBadRequestCertificateSubjectName `json:"subject_name,omitempty"`
	Type []string `json:"type,omitempty"`
	Managed []string `json:"managed,omitempty"`
	Status []string `json:"status,omitempty"`
	StatusDetail []string `json:"status_detail,omitempty"`
	Csr []string `json:"csr,omitempty"`
	KeyAlgorithm []string `json:"key_algorithm,omitempty"`
	Challenge []string `json:"challenge,omitempty"`
	Authority []string `json:"authority,omitempty"`
	Active []string `json:"active,omitempty"`
	ProductVersion []string `json:"product_version,omitempty"`
	LastEditor []string `json:"last_editor,omitempty"`
	LastModified []string `json:"last_modified,omitempty"`
	RenewedAt []string `json:"renewed_at,omitempty"`
	Detail *string `json:"detail,omitempty" validate:"regexp=.*"`
}

// NewResponseBadRequestCertificate instantiates a new ResponseBadRequestCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseBadRequestCertificate() *ResponseBadRequestCertificate {
	this := ResponseBadRequestCertificate{}
	return &this
}

// NewResponseBadRequestCertificateWithDefaults instantiates a new ResponseBadRequestCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseBadRequestCertificateWithDefaults() *ResponseBadRequestCertificate {
	this := ResponseBadRequestCertificate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetId() []string {
	if o == nil || IsNil(o.Id) {
		var ret []string
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetIdOk() ([]string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given []string and assigns it to the Id field.
func (o *ResponseBadRequestCertificate) SetId(v []string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetName() []string {
	if o == nil || IsNil(o.Name) {
		var ret []string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetNameOk() ([]string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []string and assigns it to the Name field.
func (o *ResponseBadRequestCertificate) SetName(v []string) {
	o.Name = v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetCertificate() []string {
	if o == nil || IsNil(o.Certificate) {
		var ret []string
		return ret
	}
	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetCertificateOk() ([]string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given []string and assigns it to the Certificate field.
func (o *ResponseBadRequestCertificate) SetCertificate(v []string) {
	o.Certificate = v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetPrivateKey() []string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret []string
		return ret
	}
	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetPrivateKeyOk() ([]string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given []string and assigns it to the PrivateKey field.
func (o *ResponseBadRequestCertificate) SetPrivateKey(v []string) {
	o.PrivateKey = v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetIssuer() []string {
	if o == nil || IsNil(o.Issuer) {
		var ret []string
		return ret
	}
	return o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetIssuerOk() ([]string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given []string and assigns it to the Issuer field.
func (o *ResponseBadRequestCertificate) SetIssuer(v []string) {
	o.Issuer = v
}

// GetValidity returns the Validity field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetValidity() []string {
	if o == nil || IsNil(o.Validity) {
		var ret []string
		return ret
	}
	return o.Validity
}

// GetValidityOk returns a tuple with the Validity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetValidityOk() ([]string, bool) {
	if o == nil || IsNil(o.Validity) {
		return nil, false
	}
	return o.Validity, true
}

// HasValidity returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasValidity() bool {
	if o != nil && !IsNil(o.Validity) {
		return true
	}

	return false
}

// SetValidity gets a reference to the given []string and assigns it to the Validity field.
func (o *ResponseBadRequestCertificate) SetValidity(v []string) {
	o.Validity = v
}

// GetSubjectName returns the SubjectName field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetSubjectName() ResponseBadRequestCertificateSubjectName {
	if o == nil || IsNil(o.SubjectName) {
		var ret ResponseBadRequestCertificateSubjectName
		return ret
	}
	return *o.SubjectName
}

// GetSubjectNameOk returns a tuple with the SubjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetSubjectNameOk() (*ResponseBadRequestCertificateSubjectName, bool) {
	if o == nil || IsNil(o.SubjectName) {
		return nil, false
	}
	return o.SubjectName, true
}

// HasSubjectName returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasSubjectName() bool {
	if o != nil && !IsNil(o.SubjectName) {
		return true
	}

	return false
}

// SetSubjectName gets a reference to the given ResponseBadRequestCertificateSubjectName and assigns it to the SubjectName field.
func (o *ResponseBadRequestCertificate) SetSubjectName(v ResponseBadRequestCertificateSubjectName) {
	o.SubjectName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetType() []string {
	if o == nil || IsNil(o.Type) {
		var ret []string
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given []string and assigns it to the Type field.
func (o *ResponseBadRequestCertificate) SetType(v []string) {
	o.Type = v
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetManaged() []string {
	if o == nil || IsNil(o.Managed) {
		var ret []string
		return ret
	}
	return o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetManagedOk() ([]string, bool) {
	if o == nil || IsNil(o.Managed) {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasManaged() bool {
	if o != nil && !IsNil(o.Managed) {
		return true
	}

	return false
}

// SetManaged gets a reference to the given []string and assigns it to the Managed field.
func (o *ResponseBadRequestCertificate) SetManaged(v []string) {
	o.Managed = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetStatus() []string {
	if o == nil || IsNil(o.Status) {
		var ret []string
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetStatusOk() ([]string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []string and assigns it to the Status field.
func (o *ResponseBadRequestCertificate) SetStatus(v []string) {
	o.Status = v
}

// GetStatusDetail returns the StatusDetail field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetStatusDetail() []string {
	if o == nil || IsNil(o.StatusDetail) {
		var ret []string
		return ret
	}
	return o.StatusDetail
}

// GetStatusDetailOk returns a tuple with the StatusDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetStatusDetailOk() ([]string, bool) {
	if o == nil || IsNil(o.StatusDetail) {
		return nil, false
	}
	return o.StatusDetail, true
}

// HasStatusDetail returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasStatusDetail() bool {
	if o != nil && !IsNil(o.StatusDetail) {
		return true
	}

	return false
}

// SetStatusDetail gets a reference to the given []string and assigns it to the StatusDetail field.
func (o *ResponseBadRequestCertificate) SetStatusDetail(v []string) {
	o.StatusDetail = v
}

// GetCsr returns the Csr field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetCsr() []string {
	if o == nil || IsNil(o.Csr) {
		var ret []string
		return ret
	}
	return o.Csr
}

// GetCsrOk returns a tuple with the Csr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetCsrOk() ([]string, bool) {
	if o == nil || IsNil(o.Csr) {
		return nil, false
	}
	return o.Csr, true
}

// HasCsr returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasCsr() bool {
	if o != nil && !IsNil(o.Csr) {
		return true
	}

	return false
}

// SetCsr gets a reference to the given []string and assigns it to the Csr field.
func (o *ResponseBadRequestCertificate) SetCsr(v []string) {
	o.Csr = v
}

// GetKeyAlgorithm returns the KeyAlgorithm field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetKeyAlgorithm() []string {
	if o == nil || IsNil(o.KeyAlgorithm) {
		var ret []string
		return ret
	}
	return o.KeyAlgorithm
}

// GetKeyAlgorithmOk returns a tuple with the KeyAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetKeyAlgorithmOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyAlgorithm) {
		return nil, false
	}
	return o.KeyAlgorithm, true
}

// HasKeyAlgorithm returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasKeyAlgorithm() bool {
	if o != nil && !IsNil(o.KeyAlgorithm) {
		return true
	}

	return false
}

// SetKeyAlgorithm gets a reference to the given []string and assigns it to the KeyAlgorithm field.
func (o *ResponseBadRequestCertificate) SetKeyAlgorithm(v []string) {
	o.KeyAlgorithm = v
}

// GetChallenge returns the Challenge field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetChallenge() []string {
	if o == nil || IsNil(o.Challenge) {
		var ret []string
		return ret
	}
	return o.Challenge
}

// GetChallengeOk returns a tuple with the Challenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetChallengeOk() ([]string, bool) {
	if o == nil || IsNil(o.Challenge) {
		return nil, false
	}
	return o.Challenge, true
}

// HasChallenge returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasChallenge() bool {
	if o != nil && !IsNil(o.Challenge) {
		return true
	}

	return false
}

// SetChallenge gets a reference to the given []string and assigns it to the Challenge field.
func (o *ResponseBadRequestCertificate) SetChallenge(v []string) {
	o.Challenge = v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetAuthority() []string {
	if o == nil || IsNil(o.Authority) {
		var ret []string
		return ret
	}
	return o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetAuthorityOk() ([]string, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given []string and assigns it to the Authority field.
func (o *ResponseBadRequestCertificate) SetAuthority(v []string) {
	o.Authority = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetActive() []string {
	if o == nil || IsNil(o.Active) {
		var ret []string
		return ret
	}
	return o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetActiveOk() ([]string, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given []string and assigns it to the Active field.
func (o *ResponseBadRequestCertificate) SetActive(v []string) {
	o.Active = v
}

// GetProductVersion returns the ProductVersion field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetProductVersion() []string {
	if o == nil || IsNil(o.ProductVersion) {
		var ret []string
		return ret
	}
	return o.ProductVersion
}

// GetProductVersionOk returns a tuple with the ProductVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetProductVersionOk() ([]string, bool) {
	if o == nil || IsNil(o.ProductVersion) {
		return nil, false
	}
	return o.ProductVersion, true
}

// HasProductVersion returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasProductVersion() bool {
	if o != nil && !IsNil(o.ProductVersion) {
		return true
	}

	return false
}

// SetProductVersion gets a reference to the given []string and assigns it to the ProductVersion field.
func (o *ResponseBadRequestCertificate) SetProductVersion(v []string) {
	o.ProductVersion = v
}

// GetLastEditor returns the LastEditor field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetLastEditor() []string {
	if o == nil || IsNil(o.LastEditor) {
		var ret []string
		return ret
	}
	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetLastEditorOk() ([]string, bool) {
	if o == nil || IsNil(o.LastEditor) {
		return nil, false
	}
	return o.LastEditor, true
}

// HasLastEditor returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasLastEditor() bool {
	if o != nil && !IsNil(o.LastEditor) {
		return true
	}

	return false
}

// SetLastEditor gets a reference to the given []string and assigns it to the LastEditor field.
func (o *ResponseBadRequestCertificate) SetLastEditor(v []string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetLastModified() []string {
	if o == nil || IsNil(o.LastModified) {
		var ret []string
		return ret
	}
	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetLastModifiedOk() ([]string, bool) {
	if o == nil || IsNil(o.LastModified) {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasLastModified() bool {
	if o != nil && !IsNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given []string and assigns it to the LastModified field.
func (o *ResponseBadRequestCertificate) SetLastModified(v []string) {
	o.LastModified = v
}

// GetRenewedAt returns the RenewedAt field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetRenewedAt() []string {
	if o == nil || IsNil(o.RenewedAt) {
		var ret []string
		return ret
	}
	return o.RenewedAt
}

// GetRenewedAtOk returns a tuple with the RenewedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetRenewedAtOk() ([]string, bool) {
	if o == nil || IsNil(o.RenewedAt) {
		return nil, false
	}
	return o.RenewedAt, true
}

// HasRenewedAt returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasRenewedAt() bool {
	if o != nil && !IsNil(o.RenewedAt) {
		return true
	}

	return false
}

// SetRenewedAt gets a reference to the given []string and assigns it to the RenewedAt field.
func (o *ResponseBadRequestCertificate) SetRenewedAt(v []string) {
	o.RenewedAt = v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *ResponseBadRequestCertificate) GetDetail() string {
	if o == nil || IsNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestCertificate) GetDetailOk() (*string, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *ResponseBadRequestCertificate) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *ResponseBadRequestCertificate) SetDetail(v string) {
	o.Detail = &v
}

func (o ResponseBadRequestCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseBadRequestCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["private_key"] = o.PrivateKey
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.Validity) {
		toSerialize["validity"] = o.Validity
	}
	if !IsNil(o.SubjectName) {
		toSerialize["subject_name"] = o.SubjectName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Managed) {
		toSerialize["managed"] = o.Managed
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusDetail) {
		toSerialize["status_detail"] = o.StatusDetail
	}
	if !IsNil(o.Csr) {
		toSerialize["csr"] = o.Csr
	}
	if !IsNil(o.KeyAlgorithm) {
		toSerialize["key_algorithm"] = o.KeyAlgorithm
	}
	if !IsNil(o.Challenge) {
		toSerialize["challenge"] = o.Challenge
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.ProductVersion) {
		toSerialize["product_version"] = o.ProductVersion
	}
	if !IsNil(o.LastEditor) {
		toSerialize["last_editor"] = o.LastEditor
	}
	if !IsNil(o.LastModified) {
		toSerialize["last_modified"] = o.LastModified
	}
	if !IsNil(o.RenewedAt) {
		toSerialize["renewed_at"] = o.RenewedAt
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	return toSerialize, nil
}

type NullableResponseBadRequestCertificate struct {
	value *ResponseBadRequestCertificate
	isSet bool
}

func (v NullableResponseBadRequestCertificate) Get() *ResponseBadRequestCertificate {
	return v.value
}

func (v *NullableResponseBadRequestCertificate) Set(val *ResponseBadRequestCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseBadRequestCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseBadRequestCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseBadRequestCertificate(val *ResponseBadRequestCertificate) *NullableResponseBadRequestCertificate {
	return &NullableResponseBadRequestCertificate{value: val, isSet: true}
}

func (v NullableResponseBadRequestCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseBadRequestCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



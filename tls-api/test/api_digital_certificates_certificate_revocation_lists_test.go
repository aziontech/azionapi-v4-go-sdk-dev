/*
tls-api

Testing DigitalCertificatesCertificateRevocationListsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package tlsapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_tlsapi_DigitalCertificatesCertificateRevocationListsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DigitalCertificatesCertificateRevocationListsAPIService CreateCertificateRevocationListsCRL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DigitalCertificatesCertificateRevocationListsAPI.CreateCertificateRevocationListsCRL(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalCertificatesCertificateRevocationListsAPIService DestroyCertificateRevocationListsCRL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DigitalCertificatesCertificateRevocationListsAPI.DestroyCertificateRevocationListsCRL(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalCertificatesCertificateRevocationListsAPIService ListCertificateRevocationListsCRL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DigitalCertificatesCertificateRevocationListsAPI.ListCertificateRevocationListsCRL(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalCertificatesCertificateRevocationListsAPIService PartialUpdateCertificateRevocationListsCRL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DigitalCertificatesCertificateRevocationListsAPI.PartialUpdateCertificateRevocationListsCRL(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalCertificatesCertificateRevocationListsAPIService RetriveCertificateRevocationListsCRL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DigitalCertificatesCertificateRevocationListsAPI.RetriveCertificateRevocationListsCRL(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalCertificatesCertificateRevocationListsAPIService UpdateCertificateRevocationListsCRL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DigitalCertificatesCertificateRevocationListsAPI.UpdateCertificateRevocationListsCRL(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
tls-api

REST API OpenAPI documentation for the tls-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tlsapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Certificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Certificate{}

// Certificate struct for Certificate
type Certificate struct {
	Id int64 `json:"id"`
	Name string `json:"name" validate:"regexp=.*"`
	Certificate NullableString `json:"certificate,omitempty" validate:"regexp=.*"`
	Issuer NullableString `json:"issuer" validate:"regexp=.*"`
	SubjectName []string `json:"subject_name"`
	Validity NullableString `json:"validity"`
	// The value can't be changed after the certificate creation.  * `edge_certificate` - Edge Certificate * `trusted_ca_certificate` - Trusted CA Certificate
	Type *string `json:"type,omitempty"`
	Managed bool `json:"managed"`
	// * `challenge_verification` - Challenge Verification * `active` - Active * `pending` - Pending * `failed` - Failed
	Status string `json:"status"`
	StatusDetail string `json:"status_detail" validate:"regexp=.*"`
	Csr NullableString `json:"csr" validate:"regexp=.*"`
	Challenge NullableCertificateChallenge `json:"challenge"`
	Authority NullableCertificateAuthority `json:"authority"`
	KeyAlgorithm string `json:"key_algorithm" validate:"regexp=.*"`
	Active *bool `json:"active,omitempty"`
	ProductVersion string `json:"product_version" validate:"regexp=\\\\d+\\\\.\\\\d+"`
	LastEditor string `json:"last_editor"`
	// Timestamp of the last modification made to the certificate content on the platform.
	LastModified time.Time `json:"last_modified"`
	// Timestamp indicating when the managed certificate was renewed on our platform.
	RenewedAt NullableTime `json:"renewed_at"`
}

type _Certificate Certificate

// NewCertificate instantiates a new Certificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificate(id int64, name string, issuer NullableString, subjectName []string, validity NullableString, managed bool, status string, statusDetail string, csr NullableString, challenge NullableCertificateChallenge, authority NullableCertificateAuthority, keyAlgorithm string, productVersion string, lastEditor string, lastModified time.Time, renewedAt NullableTime) *Certificate {
	this := Certificate{}
	this.Id = id
	this.Name = name
	this.Issuer = issuer
	this.SubjectName = subjectName
	this.Validity = validity
	this.Managed = managed
	this.Status = status
	this.StatusDetail = statusDetail
	this.Csr = csr
	this.Challenge = challenge
	this.Authority = authority
	this.KeyAlgorithm = keyAlgorithm
	this.ProductVersion = productVersion
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	this.RenewedAt = renewedAt
	return &this
}

// NewCertificateWithDefaults instantiates a new Certificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateWithDefaults() *Certificate {
	this := Certificate{}
	return &this
}

// GetId returns the Id field value
func (o *Certificate) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Certificate) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Certificate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Certificate) SetName(v string) {
	o.Name = v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Certificate) GetCertificate() string {
	if o == nil || IsNil(o.Certificate.Get()) {
		var ret string
		return ret
	}
	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// HasCertificate returns a boolean if a field has been set.
func (o *Certificate) HasCertificate() bool {
	if o != nil && o.Certificate.IsSet() {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given NullableString and assigns it to the Certificate field.
func (o *Certificate) SetCertificate(v string) {
	o.Certificate.Set(&v)
}
// SetCertificateNil sets the value for Certificate to be an explicit nil
func (o *Certificate) SetCertificateNil() {
	o.Certificate.Set(nil)
}

// UnsetCertificate ensures that no value is present for Certificate, not even an explicit nil
func (o *Certificate) UnsetCertificate() {
	o.Certificate.Unset()
}

// GetIssuer returns the Issuer field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Certificate) GetIssuer() string {
	if o == nil || o.Issuer.Get() == nil {
		var ret string
		return ret
	}

	return *o.Issuer.Get()
}

// GetIssuerOk returns a tuple with the Issuer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetIssuerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Issuer.Get(), o.Issuer.IsSet()
}

// SetIssuer sets field value
func (o *Certificate) SetIssuer(v string) {
	o.Issuer.Set(&v)
}

// GetSubjectName returns the SubjectName field value
func (o *Certificate) GetSubjectName() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SubjectName
}

// GetSubjectNameOk returns a tuple with the SubjectName field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetSubjectNameOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubjectName, true
}

// SetSubjectName sets field value
func (o *Certificate) SetSubjectName(v []string) {
	o.SubjectName = v
}

// GetValidity returns the Validity field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Certificate) GetValidity() string {
	if o == nil || o.Validity.Get() == nil {
		var ret string
		return ret
	}

	return *o.Validity.Get()
}

// GetValidityOk returns a tuple with the Validity field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetValidityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Validity.Get(), o.Validity.IsSet()
}

// SetValidity sets field value
func (o *Certificate) SetValidity(v string) {
	o.Validity.Set(&v)
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Certificate) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Certificate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Certificate) SetType(v string) {
	o.Type = &v
}

// GetManaged returns the Managed field value
func (o *Certificate) GetManaged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Managed
}

// GetManagedOk returns a tuple with the Managed field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetManagedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Managed, true
}

// SetManaged sets field value
func (o *Certificate) SetManaged(v bool) {
	o.Managed = v
}

// GetStatus returns the Status field value
func (o *Certificate) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Certificate) SetStatus(v string) {
	o.Status = v
}

// GetStatusDetail returns the StatusDetail field value
func (o *Certificate) GetStatusDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusDetail
}

// GetStatusDetailOk returns a tuple with the StatusDetail field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetStatusDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusDetail, true
}

// SetStatusDetail sets field value
func (o *Certificate) SetStatusDetail(v string) {
	o.StatusDetail = v
}

// GetCsr returns the Csr field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Certificate) GetCsr() string {
	if o == nil || o.Csr.Get() == nil {
		var ret string
		return ret
	}

	return *o.Csr.Get()
}

// GetCsrOk returns a tuple with the Csr field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetCsrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Csr.Get(), o.Csr.IsSet()
}

// SetCsr sets field value
func (o *Certificate) SetCsr(v string) {
	o.Csr.Set(&v)
}

// GetChallenge returns the Challenge field value
// If the value is explicit nil, the zero value for CertificateChallenge will be returned
func (o *Certificate) GetChallenge() CertificateChallenge {
	if o == nil || o.Challenge.Get() == nil {
		var ret CertificateChallenge
		return ret
	}

	return *o.Challenge.Get()
}

// GetChallengeOk returns a tuple with the Challenge field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetChallengeOk() (*CertificateChallenge, bool) {
	if o == nil {
		return nil, false
	}
	return o.Challenge.Get(), o.Challenge.IsSet()
}

// SetChallenge sets field value
func (o *Certificate) SetChallenge(v CertificateChallenge) {
	o.Challenge.Set(&v)
}

// GetAuthority returns the Authority field value
// If the value is explicit nil, the zero value for CertificateAuthority will be returned
func (o *Certificate) GetAuthority() CertificateAuthority {
	if o == nil || o.Authority.Get() == nil {
		var ret CertificateAuthority
		return ret
	}

	return *o.Authority.Get()
}

// GetAuthorityOk returns a tuple with the Authority field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetAuthorityOk() (*CertificateAuthority, bool) {
	if o == nil {
		return nil, false
	}
	return o.Authority.Get(), o.Authority.IsSet()
}

// SetAuthority sets field value
func (o *Certificate) SetAuthority(v CertificateAuthority) {
	o.Authority.Set(&v)
}

// GetKeyAlgorithm returns the KeyAlgorithm field value
func (o *Certificate) GetKeyAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyAlgorithm
}

// GetKeyAlgorithmOk returns a tuple with the KeyAlgorithm field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetKeyAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyAlgorithm, true
}

// SetKeyAlgorithm sets field value
func (o *Certificate) SetKeyAlgorithm(v string) {
	o.KeyAlgorithm = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Certificate) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Certificate) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Certificate) SetActive(v bool) {
	o.Active = &v
}

// GetProductVersion returns the ProductVersion field value
func (o *Certificate) GetProductVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductVersion
}

// GetProductVersionOk returns a tuple with the ProductVersion field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetProductVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductVersion, true
}

// SetProductVersion sets field value
func (o *Certificate) SetProductVersion(v string) {
	o.ProductVersion = v
}

// GetLastEditor returns the LastEditor field value
func (o *Certificate) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *Certificate) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *Certificate) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *Certificate) SetLastModified(v time.Time) {
	o.LastModified = v
}

// GetRenewedAt returns the RenewedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Certificate) GetRenewedAt() time.Time {
	if o == nil || o.RenewedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.RenewedAt.Get()
}

// GetRenewedAtOk returns a tuple with the RenewedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetRenewedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RenewedAt.Get(), o.RenewedAt.IsSet()
}

// SetRenewedAt sets field value
func (o *Certificate) SetRenewedAt(v time.Time) {
	o.RenewedAt.Set(&v)
}

func (o Certificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Certificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if o.Certificate.IsSet() {
		toSerialize["certificate"] = o.Certificate.Get()
	}
	toSerialize["issuer"] = o.Issuer.Get()
	toSerialize["subject_name"] = o.SubjectName
	toSerialize["validity"] = o.Validity.Get()
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["managed"] = o.Managed
	toSerialize["status"] = o.Status
	toSerialize["status_detail"] = o.StatusDetail
	toSerialize["csr"] = o.Csr.Get()
	toSerialize["challenge"] = o.Challenge.Get()
	toSerialize["authority"] = o.Authority.Get()
	toSerialize["key_algorithm"] = o.KeyAlgorithm
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["product_version"] = o.ProductVersion
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	toSerialize["renewed_at"] = o.RenewedAt.Get()
	return toSerialize, nil
}

func (o *Certificate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"issuer",
		"subject_name",
		"validity",
		"managed",
		"status",
		"status_detail",
		"csr",
		"challenge",
		"authority",
		"key_algorithm",
		"product_version",
		"last_editor",
		"last_modified",
		"renewed_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificate := _Certificate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCertificate)

	if err != nil {
		return err
	}

	*o = Certificate(varCertificate)

	return err
}

type NullableCertificate struct {
	value *Certificate
	isSet bool
}

func (v NullableCertificate) Get() *Certificate {
	return v.value
}

func (v *NullableCertificate) Set(val *Certificate) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificate(val *Certificate) *NullableCertificate {
	return &NullableCertificate{value: val, isSet: true}
}

func (v NullableCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



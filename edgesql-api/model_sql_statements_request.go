/*
edgesql-api

REST API OpenAPI documentation for the EdgeSQL API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgesql-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SQLStatementsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SQLStatementsRequest{}

// SQLStatementsRequest struct for SQLStatementsRequest
type SQLStatementsRequest struct {
	Statements []string `json:"statements"`
}

type _SQLStatementsRequest SQLStatementsRequest

// NewSQLStatementsRequest instantiates a new SQLStatementsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSQLStatementsRequest(statements []string) *SQLStatementsRequest {
	this := SQLStatementsRequest{}
	this.Statements = statements
	return &this
}

// NewSQLStatementsRequestWithDefaults instantiates a new SQLStatementsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSQLStatementsRequestWithDefaults() *SQLStatementsRequest {
	this := SQLStatementsRequest{}
	return &this
}

// GetStatements returns the Statements field value
func (o *SQLStatementsRequest) GetStatements() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Statements
}

// GetStatementsOk returns a tuple with the Statements field value
// and a boolean to check if the value has been set.
func (o *SQLStatementsRequest) GetStatementsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Statements, true
}

// SetStatements sets field value
func (o *SQLStatementsRequest) SetStatements(v []string) {
	o.Statements = v
}

func (o SQLStatementsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SQLStatementsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["statements"] = o.Statements
	return toSerialize, nil
}

func (o *SQLStatementsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"statements",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSQLStatementsRequest := _SQLStatementsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSQLStatementsRequest)

	if err != nil {
		return err
	}

	*o = SQLStatementsRequest(varSQLStatementsRequest)

	return err
}

type NullableSQLStatementsRequest struct {
	value *SQLStatementsRequest
	isSet bool
}

func (v NullableSQLStatementsRequest) Get() *SQLStatementsRequest {
	return v.value
}

func (v *NullableSQLStatementsRequest) Set(val *SQLStatementsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSQLStatementsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSQLStatementsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSQLStatementsRequest(val *SQLStatementsRequest) *NullableSQLStatementsRequest {
	return &NullableSQLStatementsRequest{value: val, isSet: true}
}

func (v NullableSQLStatementsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSQLStatementsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



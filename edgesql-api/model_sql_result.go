/*
edgesql-api

REST API OpenAPI documentation for the EdgeSQL API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgesql-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SQLResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SQLResult{}

// SQLResult struct for SQLResult
type SQLResult struct {
	Columns []interface{} `json:"columns"`
	Rows []interface{} `json:"rows"`
}

type _SQLResult SQLResult

// NewSQLResult instantiates a new SQLResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSQLResult(columns []interface{}, rows []interface{}) *SQLResult {
	this := SQLResult{}
	this.Columns = columns
	this.Rows = rows
	return &this
}

// NewSQLResultWithDefaults instantiates a new SQLResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSQLResultWithDefaults() *SQLResult {
	this := SQLResult{}
	return &this
}

// GetColumns returns the Columns field value
func (o *SQLResult) GetColumns() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value
// and a boolean to check if the value has been set.
func (o *SQLResult) GetColumnsOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Columns, true
}

// SetColumns sets field value
func (o *SQLResult) SetColumns(v []interface{}) {
	o.Columns = v
}

// GetRows returns the Rows field value
func (o *SQLResult) GetRows() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value
// and a boolean to check if the value has been set.
func (o *SQLResult) GetRowsOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rows, true
}

// SetRows sets field value
func (o *SQLResult) SetRows(v []interface{}) {
	o.Rows = v
}

func (o SQLResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SQLResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["columns"] = o.Columns
	toSerialize["rows"] = o.Rows
	return toSerialize, nil
}

func (o *SQLResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"columns",
		"rows",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSQLResult := _SQLResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSQLResult)

	if err != nil {
		return err
	}

	*o = SQLResult(varSQLResult)

	return err
}

type NullableSQLResult struct {
	value *SQLResult
	isSet bool
}

func (v NullableSQLResult) Get() *SQLResult {
	return v.value
}

func (v *NullableSQLResult) Set(val *SQLResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSQLResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSQLResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSQLResult(val *SQLResult) *NullableSQLResult {
	return &NullableSQLResult{value: val, isSet: true}
}

func (v NullableSQLResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSQLResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



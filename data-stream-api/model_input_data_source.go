/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datastreamapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InputDataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputDataSource{}

// InputDataSource struct for InputDataSource
type InputDataSource struct {
	// * `http` - Edge Applications * `waf` - WAF Events * `functions` - Edge Functions * `activity` - Activity History
	DataSource string `json:"data_source"`
}

type _InputDataSource InputDataSource

// NewInputDataSource instantiates a new InputDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputDataSource(dataSource string) *InputDataSource {
	this := InputDataSource{}
	this.DataSource = dataSource
	return &this
}

// NewInputDataSourceWithDefaults instantiates a new InputDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputDataSourceWithDefaults() *InputDataSource {
	this := InputDataSource{}
	return &this
}

// GetDataSource returns the DataSource field value
func (o *InputDataSource) GetDataSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value
// and a boolean to check if the value has been set.
func (o *InputDataSource) GetDataSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSource, true
}

// SetDataSource sets field value
func (o *InputDataSource) SetDataSource(v string) {
	o.DataSource = v
}

func (o InputDataSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputDataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_source"] = o.DataSource
	return toSerialize, nil
}

func (o *InputDataSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data_source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInputDataSource := _InputDataSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInputDataSource)

	if err != nil {
		return err
	}

	*o = InputDataSource(varInputDataSource)

	return err
}

type NullableInputDataSource struct {
	value *InputDataSource
	isSet bool
}

func (v NullableInputDataSource) Get() *InputDataSource {
	return v.value
}

func (v *NullableInputDataSource) Set(val *InputDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableInputDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableInputDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputDataSource(val *InputDataSource) *NullableInputDataSource {
	return &NullableInputDataSource{value: val, isSet: true}
}

func (v NullableInputDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



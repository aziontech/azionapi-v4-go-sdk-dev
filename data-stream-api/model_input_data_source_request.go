/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data-stream-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InputDataSourceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputDataSourceRequest{}

// InputDataSourceRequest struct for InputDataSourceRequest
type InputDataSourceRequest struct {
	// * `raw_logs` - Raw Logs
	Type string `json:"type"`
	Attributes DataSourceAttributesRequest `json:"attributes"`
}

type _InputDataSourceRequest InputDataSourceRequest

// NewInputDataSourceRequest instantiates a new InputDataSourceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputDataSourceRequest(type_ string, attributes DataSourceAttributesRequest) *InputDataSourceRequest {
	this := InputDataSourceRequest{}
	this.Type = type_
	this.Attributes = attributes
	return &this
}

// NewInputDataSourceRequestWithDefaults instantiates a new InputDataSourceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputDataSourceRequestWithDefaults() *InputDataSourceRequest {
	this := InputDataSourceRequest{}
	return &this
}

// GetType returns the Type field value
func (o *InputDataSourceRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InputDataSourceRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InputDataSourceRequest) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *InputDataSourceRequest) GetAttributes() DataSourceAttributesRequest {
	if o == nil {
		var ret DataSourceAttributesRequest
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *InputDataSourceRequest) GetAttributesOk() (*DataSourceAttributesRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *InputDataSourceRequest) SetAttributes(v DataSourceAttributesRequest) {
	o.Attributes = v
}

func (o InputDataSourceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputDataSourceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

func (o *InputDataSourceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInputDataSourceRequest := _InputDataSourceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInputDataSourceRequest)

	if err != nil {
		return err
	}

	*o = InputDataSourceRequest(varInputDataSourceRequest)

	return err
}

type NullableInputDataSourceRequest struct {
	value *InputDataSourceRequest
	isSet bool
}

func (v NullableInputDataSourceRequest) Get() *InputDataSourceRequest {
	return v.value
}

func (v *NullableInputDataSourceRequest) Set(val *InputDataSourceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInputDataSourceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInputDataSourceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputDataSourceRequest(val *InputDataSourceRequest) *NullableInputDataSourceRequest {
	return &NullableInputDataSourceRequest{value: val, isSet: true}
}

func (v NullableInputDataSourceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputDataSourceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



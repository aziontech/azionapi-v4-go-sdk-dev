/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data-stream-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransformSamplingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransformSamplingRequest{}

// TransformSamplingRequest Serializer for sampling transform attributes.
type TransformSamplingRequest struct {
	Rate int64 `json:"rate"`
}

type _TransformSamplingRequest TransformSamplingRequest

// NewTransformSamplingRequest instantiates a new TransformSamplingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransformSamplingRequest(rate int64) *TransformSamplingRequest {
	this := TransformSamplingRequest{}
	this.Rate = rate
	return &this
}

// NewTransformSamplingRequestWithDefaults instantiates a new TransformSamplingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransformSamplingRequestWithDefaults() *TransformSamplingRequest {
	this := TransformSamplingRequest{}
	return &this
}

// GetRate returns the Rate field value
func (o *TransformSamplingRequest) GetRate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *TransformSamplingRequest) GetRateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *TransformSamplingRequest) SetRate(v int64) {
	o.Rate = v
}

func (o TransformSamplingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransformSamplingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rate"] = o.Rate
	return toSerialize, nil
}

func (o *TransformSamplingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransformSamplingRequest := _TransformSamplingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransformSamplingRequest)

	if err != nil {
		return err
	}

	*o = TransformSamplingRequest(varTransformSamplingRequest)

	return err
}

type NullableTransformSamplingRequest struct {
	value *TransformSamplingRequest
	isSet bool
}

func (v NullableTransformSamplingRequest) Get() *TransformSamplingRequest {
	return v.value
}

func (v *NullableTransformSamplingRequest) Set(val *TransformSamplingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransformSamplingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransformSamplingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransformSamplingRequest(val *TransformSamplingRequest) *NullableTransformSamplingRequest {
	return &NullableTransformSamplingRequest{value: val, isSet: true}
}

func (v NullableTransformSamplingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransformSamplingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



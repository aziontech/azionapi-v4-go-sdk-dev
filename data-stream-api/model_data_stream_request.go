/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datastreamapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataStreamRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataStreamRequest{}

// DataStreamRequest struct for DataStreamRequest
type DataStreamRequest struct {
	Name string `json:"name" validate:"regexp=.*"`
	Active *bool `json:"active,omitempty"`
	Inputs []InputPolymorphicInputDataSourceAttributesRequest `json:"inputs"`
	Transform []TransformPolymorphicRequest `json:"transform"`
	Outputs []OutputRequest `json:"outputs"`
}

type _DataStreamRequest DataStreamRequest

// NewDataStreamRequest instantiates a new DataStreamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStreamRequest(name string, inputs []InputPolymorphicInputDataSourceAttributesRequest, transform []TransformPolymorphicRequest, outputs []OutputRequest) *DataStreamRequest {
	this := DataStreamRequest{}
	this.Name = name
	this.Inputs = inputs
	this.Transform = transform
	this.Outputs = outputs
	return &this
}

// NewDataStreamRequestWithDefaults instantiates a new DataStreamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStreamRequestWithDefaults() *DataStreamRequest {
	this := DataStreamRequest{}
	return &this
}

// GetName returns the Name field value
func (o *DataStreamRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataStreamRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataStreamRequest) SetName(v string) {
	o.Name = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *DataStreamRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStreamRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *DataStreamRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *DataStreamRequest) SetActive(v bool) {
	o.Active = &v
}

// GetInputs returns the Inputs field value
func (o *DataStreamRequest) GetInputs() []InputPolymorphicInputDataSourceAttributesRequest {
	if o == nil {
		var ret []InputPolymorphicInputDataSourceAttributesRequest
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *DataStreamRequest) GetInputsOk() ([]InputPolymorphicInputDataSourceAttributesRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *DataStreamRequest) SetInputs(v []InputPolymorphicInputDataSourceAttributesRequest) {
	o.Inputs = v
}

// GetTransform returns the Transform field value
func (o *DataStreamRequest) GetTransform() []TransformPolymorphicRequest {
	if o == nil {
		var ret []TransformPolymorphicRequest
		return ret
	}

	return o.Transform
}

// GetTransformOk returns a tuple with the Transform field value
// and a boolean to check if the value has been set.
func (o *DataStreamRequest) GetTransformOk() ([]TransformPolymorphicRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transform, true
}

// SetTransform sets field value
func (o *DataStreamRequest) SetTransform(v []TransformPolymorphicRequest) {
	o.Transform = v
}

// GetOutputs returns the Outputs field value
func (o *DataStreamRequest) GetOutputs() []OutputRequest {
	if o == nil {
		var ret []OutputRequest
		return ret
	}

	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value
// and a boolean to check if the value has been set.
func (o *DataStreamRequest) GetOutputsOk() ([]OutputRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Outputs, true
}

// SetOutputs sets field value
func (o *DataStreamRequest) SetOutputs(v []OutputRequest) {
	o.Outputs = v
}

func (o DataStreamRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataStreamRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["inputs"] = o.Inputs
	toSerialize["transform"] = o.Transform
	toSerialize["outputs"] = o.Outputs
	return toSerialize, nil
}

func (o *DataStreamRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"inputs",
		"transform",
		"outputs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataStreamRequest := _DataStreamRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataStreamRequest)

	if err != nil {
		return err
	}

	*o = DataStreamRequest(varDataStreamRequest)

	return err
}

type NullableDataStreamRequest struct {
	value *DataStreamRequest
	isSet bool
}

func (v NullableDataStreamRequest) Get() *DataStreamRequest {
	return v.value
}

func (v *NullableDataStreamRequest) Set(val *DataStreamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStreamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStreamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStreamRequest(val *DataStreamRequest) *NullableDataStreamRequest {
	return &NullableDataStreamRequest{value: val, isSet: true}
}

func (v NullableDataStreamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStreamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



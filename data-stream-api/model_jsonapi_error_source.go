/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data-stream-api

import (
	"encoding/json"
)

// checks if the JSONAPIErrorSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONAPIErrorSource{}

// JSONAPIErrorSource Serializer for the 'source' object in a JSON:API error.
type JSONAPIErrorSource struct {
	// JSON Pointer to the value in the request document that caused the error
	Pointer *string `json:"pointer,omitempty" validate:"regexp=^(\\/[^\\/]+)+$"`
	// URI query parameter that caused the error
	Parameter *string `json:"parameter,omitempty" validate:"regexp=^.*$"`
	// Request header name that caused the error
	Header *string `json:"header,omitempty" validate:"regexp=^.*$"`
}

// NewJSONAPIErrorSource instantiates a new JSONAPIErrorSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONAPIErrorSource() *JSONAPIErrorSource {
	this := JSONAPIErrorSource{}
	return &this
}

// NewJSONAPIErrorSourceWithDefaults instantiates a new JSONAPIErrorSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONAPIErrorSourceWithDefaults() *JSONAPIErrorSource {
	this := JSONAPIErrorSource{}
	return &this
}

// GetPointer returns the Pointer field value if set, zero value otherwise.
func (o *JSONAPIErrorSource) GetPointer() string {
	if o == nil || IsNil(o.Pointer) {
		var ret string
		return ret
	}
	return *o.Pointer
}

// GetPointerOk returns a tuple with the Pointer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONAPIErrorSource) GetPointerOk() (*string, bool) {
	if o == nil || IsNil(o.Pointer) {
		return nil, false
	}
	return o.Pointer, true
}

// HasPointer returns a boolean if a field has been set.
func (o *JSONAPIErrorSource) HasPointer() bool {
	if o != nil && !IsNil(o.Pointer) {
		return true
	}

	return false
}

// SetPointer gets a reference to the given string and assigns it to the Pointer field.
func (o *JSONAPIErrorSource) SetPointer(v string) {
	o.Pointer = &v
}

// GetParameter returns the Parameter field value if set, zero value otherwise.
func (o *JSONAPIErrorSource) GetParameter() string {
	if o == nil || IsNil(o.Parameter) {
		var ret string
		return ret
	}
	return *o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONAPIErrorSource) GetParameterOk() (*string, bool) {
	if o == nil || IsNil(o.Parameter) {
		return nil, false
	}
	return o.Parameter, true
}

// HasParameter returns a boolean if a field has been set.
func (o *JSONAPIErrorSource) HasParameter() bool {
	if o != nil && !IsNil(o.Parameter) {
		return true
	}

	return false
}

// SetParameter gets a reference to the given string and assigns it to the Parameter field.
func (o *JSONAPIErrorSource) SetParameter(v string) {
	o.Parameter = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *JSONAPIErrorSource) GetHeader() string {
	if o == nil || IsNil(o.Header) {
		var ret string
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONAPIErrorSource) GetHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *JSONAPIErrorSource) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given string and assigns it to the Header field.
func (o *JSONAPIErrorSource) SetHeader(v string) {
	o.Header = &v
}

func (o JSONAPIErrorSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONAPIErrorSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pointer) {
		toSerialize["pointer"] = o.Pointer
	}
	if !IsNil(o.Parameter) {
		toSerialize["parameter"] = o.Parameter
	}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	return toSerialize, nil
}

type NullableJSONAPIErrorSource struct {
	value *JSONAPIErrorSource
	isSet bool
}

func (v NullableJSONAPIErrorSource) Get() *JSONAPIErrorSource {
	return v.value
}

func (v *NullableJSONAPIErrorSource) Set(val *JSONAPIErrorSource) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONAPIErrorSource) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONAPIErrorSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONAPIErrorSource(val *JSONAPIErrorSource) *NullableJSONAPIErrorSource {
	return &NullableJSONAPIErrorSource{value: val, isSet: true}
}

func (v NullableJSONAPIErrorSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONAPIErrorSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data-stream-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the S3Endpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3Endpoint{}

// S3Endpoint struct for S3Endpoint
type S3Endpoint struct {
	AccessKey string `json:"access_key"`
	Region string `json:"region"`
	ObjectKeyPrefix NullableString `json:"object_key_prefix,omitempty"`
	BucketName string `json:"bucket_name"`
	// * `plain/text` - plain/text * `application/gzip` - application/gzip
	ContentType string `json:"content_type"`
	HostUrl string `json:"host_url"`
}

type _S3Endpoint S3Endpoint

// NewS3Endpoint instantiates a new S3Endpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3Endpoint(accessKey string, region string, bucketName string, contentType string, hostUrl string) *S3Endpoint {
	this := S3Endpoint{}
	this.AccessKey = accessKey
	this.Region = region
	this.BucketName = bucketName
	this.ContentType = contentType
	this.HostUrl = hostUrl
	return &this
}

// NewS3EndpointWithDefaults instantiates a new S3Endpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3EndpointWithDefaults() *S3Endpoint {
	this := S3Endpoint{}
	return &this
}

// GetAccessKey returns the AccessKey field value
func (o *S3Endpoint) GetAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *S3Endpoint) GetAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKey, true
}

// SetAccessKey sets field value
func (o *S3Endpoint) SetAccessKey(v string) {
	o.AccessKey = v
}

// GetRegion returns the Region field value
func (o *S3Endpoint) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *S3Endpoint) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *S3Endpoint) SetRegion(v string) {
	o.Region = v
}

// GetObjectKeyPrefix returns the ObjectKeyPrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3Endpoint) GetObjectKeyPrefix() string {
	if o == nil || IsNil(o.ObjectKeyPrefix.Get()) {
		var ret string
		return ret
	}
	return *o.ObjectKeyPrefix.Get()
}

// GetObjectKeyPrefixOk returns a tuple with the ObjectKeyPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3Endpoint) GetObjectKeyPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectKeyPrefix.Get(), o.ObjectKeyPrefix.IsSet()
}

// HasObjectKeyPrefix returns a boolean if a field has been set.
func (o *S3Endpoint) HasObjectKeyPrefix() bool {
	if o != nil && o.ObjectKeyPrefix.IsSet() {
		return true
	}

	return false
}

// SetObjectKeyPrefix gets a reference to the given NullableString and assigns it to the ObjectKeyPrefix field.
func (o *S3Endpoint) SetObjectKeyPrefix(v string) {
	o.ObjectKeyPrefix.Set(&v)
}
// SetObjectKeyPrefixNil sets the value for ObjectKeyPrefix to be an explicit nil
func (o *S3Endpoint) SetObjectKeyPrefixNil() {
	o.ObjectKeyPrefix.Set(nil)
}

// UnsetObjectKeyPrefix ensures that no value is present for ObjectKeyPrefix, not even an explicit nil
func (o *S3Endpoint) UnsetObjectKeyPrefix() {
	o.ObjectKeyPrefix.Unset()
}

// GetBucketName returns the BucketName field value
func (o *S3Endpoint) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *S3Endpoint) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *S3Endpoint) SetBucketName(v string) {
	o.BucketName = v
}

// GetContentType returns the ContentType field value
func (o *S3Endpoint) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *S3Endpoint) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *S3Endpoint) SetContentType(v string) {
	o.ContentType = v
}

// GetHostUrl returns the HostUrl field value
func (o *S3Endpoint) GetHostUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostUrl
}

// GetHostUrlOk returns a tuple with the HostUrl field value
// and a boolean to check if the value has been set.
func (o *S3Endpoint) GetHostUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostUrl, true
}

// SetHostUrl sets field value
func (o *S3Endpoint) SetHostUrl(v string) {
	o.HostUrl = v
}

func (o S3Endpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3Endpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_key"] = o.AccessKey
	toSerialize["region"] = o.Region
	if o.ObjectKeyPrefix.IsSet() {
		toSerialize["object_key_prefix"] = o.ObjectKeyPrefix.Get()
	}
	toSerialize["bucket_name"] = o.BucketName
	toSerialize["content_type"] = o.ContentType
	toSerialize["host_url"] = o.HostUrl
	return toSerialize, nil
}

func (o *S3Endpoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_key",
		"region",
		"bucket_name",
		"content_type",
		"host_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3Endpoint := _S3Endpoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3Endpoint)

	if err != nil {
		return err
	}

	*o = S3Endpoint(varS3Endpoint)

	return err
}

type NullableS3Endpoint struct {
	value *S3Endpoint
	isSet bool
}

func (v NullableS3Endpoint) Get() *S3Endpoint {
	return v.value
}

func (v *NullableS3Endpoint) Set(val *S3Endpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableS3Endpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableS3Endpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3Endpoint(val *S3Endpoint) *NullableS3Endpoint {
	return &NullableS3Endpoint{value: val, isSet: true}
}

func (v NullableS3Endpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3Endpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



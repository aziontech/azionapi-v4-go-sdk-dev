/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datastreamapi

import (
	"encoding/json"
)

// checks if the PatchedTemplateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedTemplateRequest{}

// PatchedTemplateRequest struct for PatchedTemplateRequest
type PatchedTemplateRequest struct {
	Name *string `json:"name,omitempty" validate:"regexp=.*"`
	Active *bool `json:"active,omitempty"`
	DataSet *string `json:"data_set,omitempty" validate:"regexp=.*"`
}

// NewPatchedTemplateRequest instantiates a new PatchedTemplateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedTemplateRequest() *PatchedTemplateRequest {
	this := PatchedTemplateRequest{}
	return &this
}

// NewPatchedTemplateRequestWithDefaults instantiates a new PatchedTemplateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedTemplateRequestWithDefaults() *PatchedTemplateRequest {
	this := PatchedTemplateRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedTemplateRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTemplateRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedTemplateRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedTemplateRequest) SetName(v string) {
	o.Name = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PatchedTemplateRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTemplateRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PatchedTemplateRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PatchedTemplateRequest) SetActive(v bool) {
	o.Active = &v
}

// GetDataSet returns the DataSet field value if set, zero value otherwise.
func (o *PatchedTemplateRequest) GetDataSet() string {
	if o == nil || IsNil(o.DataSet) {
		var ret string
		return ret
	}
	return *o.DataSet
}

// GetDataSetOk returns a tuple with the DataSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTemplateRequest) GetDataSetOk() (*string, bool) {
	if o == nil || IsNil(o.DataSet) {
		return nil, false
	}
	return o.DataSet, true
}

// HasDataSet returns a boolean if a field has been set.
func (o *PatchedTemplateRequest) HasDataSet() bool {
	if o != nil && !IsNil(o.DataSet) {
		return true
	}

	return false
}

// SetDataSet gets a reference to the given string and assigns it to the DataSet field.
func (o *PatchedTemplateRequest) SetDataSet(v string) {
	o.DataSet = &v
}

func (o PatchedTemplateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedTemplateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.DataSet) {
		toSerialize["data_set"] = o.DataSet
	}
	return toSerialize, nil
}

type NullablePatchedTemplateRequest struct {
	value *PatchedTemplateRequest
	isSet bool
}

func (v NullablePatchedTemplateRequest) Get() *PatchedTemplateRequest {
	return v.value
}

func (v *NullablePatchedTemplateRequest) Set(val *PatchedTemplateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedTemplateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedTemplateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedTemplateRequest(val *PatchedTemplateRequest) *NullablePatchedTemplateRequest {
	return &NullablePatchedTemplateRequest{value: val, isSet: true}
}

func (v NullablePatchedTemplateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedTemplateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



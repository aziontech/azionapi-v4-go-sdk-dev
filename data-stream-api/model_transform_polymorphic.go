/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data-stream-api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TransformPolymorphic - struct for TransformPolymorphic
type TransformPolymorphic struct {
	TransformPolymorphicTransformFilterWorkloads *TransformPolymorphicTransformFilterWorkloads
	TransformPolymorphicTransformRenderTemplate *TransformPolymorphicTransformRenderTemplate
	TransformPolymorphicTransformSampling *TransformPolymorphicTransformSampling
}

// TransformPolymorphicTransformFilterWorkloadsAsTransformPolymorphic is a convenience function that returns TransformPolymorphicTransformFilterWorkloads wrapped in TransformPolymorphic
func TransformPolymorphicTransformFilterWorkloadsAsTransformPolymorphic(v *TransformPolymorphicTransformFilterWorkloads) TransformPolymorphic {
	return TransformPolymorphic{
		TransformPolymorphicTransformFilterWorkloads: v,
	}
}

// TransformPolymorphicTransformRenderTemplateAsTransformPolymorphic is a convenience function that returns TransformPolymorphicTransformRenderTemplate wrapped in TransformPolymorphic
func TransformPolymorphicTransformRenderTemplateAsTransformPolymorphic(v *TransformPolymorphicTransformRenderTemplate) TransformPolymorphic {
	return TransformPolymorphic{
		TransformPolymorphicTransformRenderTemplate: v,
	}
}

// TransformPolymorphicTransformSamplingAsTransformPolymorphic is a convenience function that returns TransformPolymorphicTransformSampling wrapped in TransformPolymorphic
func TransformPolymorphicTransformSamplingAsTransformPolymorphic(v *TransformPolymorphicTransformSampling) TransformPolymorphic {
	return TransformPolymorphic{
		TransformPolymorphicTransformSampling: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransformPolymorphic) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TransformPolymorphicTransformFilterWorkloads
	err = newStrictDecoder(data).Decode(&dst.TransformPolymorphicTransformFilterWorkloads)
	if err == nil {
		jsonTransformPolymorphicTransformFilterWorkloads, _ := json.Marshal(dst.TransformPolymorphicTransformFilterWorkloads)
		if string(jsonTransformPolymorphicTransformFilterWorkloads) == "{}" { // empty struct
			dst.TransformPolymorphicTransformFilterWorkloads = nil
		} else {
			if err = validator.Validate(dst.TransformPolymorphicTransformFilterWorkloads); err != nil {
				dst.TransformPolymorphicTransformFilterWorkloads = nil
			} else {
				match++
			}
		}
	} else {
		dst.TransformPolymorphicTransformFilterWorkloads = nil
	}

	// try to unmarshal data into TransformPolymorphicTransformRenderTemplate
	err = newStrictDecoder(data).Decode(&dst.TransformPolymorphicTransformRenderTemplate)
	if err == nil {
		jsonTransformPolymorphicTransformRenderTemplate, _ := json.Marshal(dst.TransformPolymorphicTransformRenderTemplate)
		if string(jsonTransformPolymorphicTransformRenderTemplate) == "{}" { // empty struct
			dst.TransformPolymorphicTransformRenderTemplate = nil
		} else {
			if err = validator.Validate(dst.TransformPolymorphicTransformRenderTemplate); err != nil {
				dst.TransformPolymorphicTransformRenderTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.TransformPolymorphicTransformRenderTemplate = nil
	}

	// try to unmarshal data into TransformPolymorphicTransformSampling
	err = newStrictDecoder(data).Decode(&dst.TransformPolymorphicTransformSampling)
	if err == nil {
		jsonTransformPolymorphicTransformSampling, _ := json.Marshal(dst.TransformPolymorphicTransformSampling)
		if string(jsonTransformPolymorphicTransformSampling) == "{}" { // empty struct
			dst.TransformPolymorphicTransformSampling = nil
		} else {
			if err = validator.Validate(dst.TransformPolymorphicTransformSampling); err != nil {
				dst.TransformPolymorphicTransformSampling = nil
			} else {
				match++
			}
		}
	} else {
		dst.TransformPolymorphicTransformSampling = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TransformPolymorphicTransformFilterWorkloads = nil
		dst.TransformPolymorphicTransformRenderTemplate = nil
		dst.TransformPolymorphicTransformSampling = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TransformPolymorphic)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TransformPolymorphic)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransformPolymorphic) MarshalJSON() ([]byte, error) {
	if src.TransformPolymorphicTransformFilterWorkloads != nil {
		return json.Marshal(&src.TransformPolymorphicTransformFilterWorkloads)
	}

	if src.TransformPolymorphicTransformRenderTemplate != nil {
		return json.Marshal(&src.TransformPolymorphicTransformRenderTemplate)
	}

	if src.TransformPolymorphicTransformSampling != nil {
		return json.Marshal(&src.TransformPolymorphicTransformSampling)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransformPolymorphic) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TransformPolymorphicTransformFilterWorkloads != nil {
		return obj.TransformPolymorphicTransformFilterWorkloads
	}

	if obj.TransformPolymorphicTransformRenderTemplate != nil {
		return obj.TransformPolymorphicTransformRenderTemplate
	}

	if obj.TransformPolymorphicTransformSampling != nil {
		return obj.TransformPolymorphicTransformSampling
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TransformPolymorphic) GetActualInstanceValue() (interface{}) {
	if obj.TransformPolymorphicTransformFilterWorkloads != nil {
		return *obj.TransformPolymorphicTransformFilterWorkloads
	}

	if obj.TransformPolymorphicTransformRenderTemplate != nil {
		return *obj.TransformPolymorphicTransformRenderTemplate
	}

	if obj.TransformPolymorphicTransformSampling != nil {
		return *obj.TransformPolymorphicTransformSampling
	}

	// all schemas are nil
	return nil
}

type NullableTransformPolymorphic struct {
	value *TransformPolymorphic
	isSet bool
}

func (v NullableTransformPolymorphic) Get() *TransformPolymorphic {
	return v.value
}

func (v *NullableTransformPolymorphic) Set(val *TransformPolymorphic) {
	v.value = val
	v.isSet = true
}

func (v NullableTransformPolymorphic) IsSet() bool {
	return v.isSet
}

func (v *NullableTransformPolymorphic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransformPolymorphic(val *TransformPolymorphic) *NullableTransformPolymorphic {
	return &NullableTransformPolymorphic{value: val, isSet: true}
}

func (v NullableTransformPolymorphic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransformPolymorphic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



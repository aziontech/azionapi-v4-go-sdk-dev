/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data-stream-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SamplingAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SamplingAttributes{}

// SamplingAttributes Serializer for sampling transform attributes.
type SamplingAttributes struct {
	Rate int64 `json:"rate"`
}

type _SamplingAttributes SamplingAttributes

// NewSamplingAttributes instantiates a new SamplingAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSamplingAttributes(rate int64) *SamplingAttributes {
	this := SamplingAttributes{}
	this.Rate = rate
	return &this
}

// NewSamplingAttributesWithDefaults instantiates a new SamplingAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSamplingAttributesWithDefaults() *SamplingAttributes {
	this := SamplingAttributes{}
	return &this
}

// GetRate returns the Rate field value
func (o *SamplingAttributes) GetRate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *SamplingAttributes) GetRateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *SamplingAttributes) SetRate(v int64) {
	o.Rate = v
}

func (o SamplingAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SamplingAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rate"] = o.Rate
	return toSerialize, nil
}

func (o *SamplingAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSamplingAttributes := _SamplingAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSamplingAttributes)

	if err != nil {
		return err
	}

	*o = SamplingAttributes(varSamplingAttributes)

	return err
}

type NullableSamplingAttributes struct {
	value *SamplingAttributes
	isSet bool
}

func (v NullableSamplingAttributes) Get() *SamplingAttributes {
	return v.value
}

func (v *NullableSamplingAttributes) Set(val *SamplingAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableSamplingAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableSamplingAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamplingAttributes(val *SamplingAttributes) *NullableSamplingAttributes {
	return &NullableSamplingAttributes{value: val, isSet: true}
}

func (v NullableSamplingAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamplingAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



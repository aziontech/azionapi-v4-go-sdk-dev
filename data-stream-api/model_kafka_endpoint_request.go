/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data-stream-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KafkaEndpointRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaEndpointRequest{}

// KafkaEndpointRequest struct for KafkaEndpointRequest
type KafkaEndpointRequest struct {
	BootstrapServers string `json:"bootstrap_servers"`
	KafkaTopic string `json:"kafka_topic"`
	UseTls bool `json:"use_tls"`
}

type _KafkaEndpointRequest KafkaEndpointRequest

// NewKafkaEndpointRequest instantiates a new KafkaEndpointRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaEndpointRequest(bootstrapServers string, kafkaTopic string, useTls bool) *KafkaEndpointRequest {
	this := KafkaEndpointRequest{}
	this.BootstrapServers = bootstrapServers
	this.KafkaTopic = kafkaTopic
	this.UseTls = useTls
	return &this
}

// NewKafkaEndpointRequestWithDefaults instantiates a new KafkaEndpointRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaEndpointRequestWithDefaults() *KafkaEndpointRequest {
	this := KafkaEndpointRequest{}
	return &this
}

// GetBootstrapServers returns the BootstrapServers field value
func (o *KafkaEndpointRequest) GetBootstrapServers() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BootstrapServers
}

// GetBootstrapServersOk returns a tuple with the BootstrapServers field value
// and a boolean to check if the value has been set.
func (o *KafkaEndpointRequest) GetBootstrapServersOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BootstrapServers, true
}

// SetBootstrapServers sets field value
func (o *KafkaEndpointRequest) SetBootstrapServers(v string) {
	o.BootstrapServers = v
}

// GetKafkaTopic returns the KafkaTopic field value
func (o *KafkaEndpointRequest) GetKafkaTopic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KafkaTopic
}

// GetKafkaTopicOk returns a tuple with the KafkaTopic field value
// and a boolean to check if the value has been set.
func (o *KafkaEndpointRequest) GetKafkaTopicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KafkaTopic, true
}

// SetKafkaTopic sets field value
func (o *KafkaEndpointRequest) SetKafkaTopic(v string) {
	o.KafkaTopic = v
}

// GetUseTls returns the UseTls field value
func (o *KafkaEndpointRequest) GetUseTls() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseTls
}

// GetUseTlsOk returns a tuple with the UseTls field value
// and a boolean to check if the value has been set.
func (o *KafkaEndpointRequest) GetUseTlsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseTls, true
}

// SetUseTls sets field value
func (o *KafkaEndpointRequest) SetUseTls(v bool) {
	o.UseTls = v
}

func (o KafkaEndpointRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaEndpointRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bootstrap_servers"] = o.BootstrapServers
	toSerialize["kafka_topic"] = o.KafkaTopic
	toSerialize["use_tls"] = o.UseTls
	return toSerialize, nil
}

func (o *KafkaEndpointRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bootstrap_servers",
		"kafka_topic",
		"use_tls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKafkaEndpointRequest := _KafkaEndpointRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKafkaEndpointRequest)

	if err != nil {
		return err
	}

	*o = KafkaEndpointRequest(varKafkaEndpointRequest)

	return err
}

type NullableKafkaEndpointRequest struct {
	value *KafkaEndpointRequest
	isSet bool
}

func (v NullableKafkaEndpointRequest) Get() *KafkaEndpointRequest {
	return v.value
}

func (v *NullableKafkaEndpointRequest) Set(val *KafkaEndpointRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaEndpointRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaEndpointRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaEndpointRequest(val *KafkaEndpointRequest) *NullableKafkaEndpointRequest {
	return &NullableKafkaEndpointRequest{value: val, isSet: true}
}

func (v NullableKafkaEndpointRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaEndpointRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datastreamapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// OutputPolymorphic - struct for OutputPolymorphic
type OutputPolymorphic struct {
	AWSKinesisFirehoseEndpoint *AWSKinesisFirehoseEndpoint
	AzureBlobStorageEndpoint *AzureBlobStorageEndpoint
	AzureMonitorEndpoint *AzureMonitorEndpoint
	BigQueryEndpoint *BigQueryEndpoint
	DatadogEndpoint *DatadogEndpoint
	ElasticsearchEndpoint *ElasticsearchEndpoint
	HttpPostEndpoint *HttpPostEndpoint
	KafkaEndpoint *KafkaEndpoint
	QRadarEndpoint *QRadarEndpoint
	S3Endpoint *S3Endpoint
	SplunkEndpoint *SplunkEndpoint
}

// AWSKinesisFirehoseEndpointAsOutputPolymorphic is a convenience function that returns AWSKinesisFirehoseEndpoint wrapped in OutputPolymorphic
func AWSKinesisFirehoseEndpointAsOutputPolymorphic(v *AWSKinesisFirehoseEndpoint) OutputPolymorphic {
	return OutputPolymorphic{
		AWSKinesisFirehoseEndpoint: v,
	}
}

// AzureBlobStorageEndpointAsOutputPolymorphic is a convenience function that returns AzureBlobStorageEndpoint wrapped in OutputPolymorphic
func AzureBlobStorageEndpointAsOutputPolymorphic(v *AzureBlobStorageEndpoint) OutputPolymorphic {
	return OutputPolymorphic{
		AzureBlobStorageEndpoint: v,
	}
}

// AzureMonitorEndpointAsOutputPolymorphic is a convenience function that returns AzureMonitorEndpoint wrapped in OutputPolymorphic
func AzureMonitorEndpointAsOutputPolymorphic(v *AzureMonitorEndpoint) OutputPolymorphic {
	return OutputPolymorphic{
		AzureMonitorEndpoint: v,
	}
}

// BigQueryEndpointAsOutputPolymorphic is a convenience function that returns BigQueryEndpoint wrapped in OutputPolymorphic
func BigQueryEndpointAsOutputPolymorphic(v *BigQueryEndpoint) OutputPolymorphic {
	return OutputPolymorphic{
		BigQueryEndpoint: v,
	}
}

// DatadogEndpointAsOutputPolymorphic is a convenience function that returns DatadogEndpoint wrapped in OutputPolymorphic
func DatadogEndpointAsOutputPolymorphic(v *DatadogEndpoint) OutputPolymorphic {
	return OutputPolymorphic{
		DatadogEndpoint: v,
	}
}

// ElasticsearchEndpointAsOutputPolymorphic is a convenience function that returns ElasticsearchEndpoint wrapped in OutputPolymorphic
func ElasticsearchEndpointAsOutputPolymorphic(v *ElasticsearchEndpoint) OutputPolymorphic {
	return OutputPolymorphic{
		ElasticsearchEndpoint: v,
	}
}

// HttpPostEndpointAsOutputPolymorphic is a convenience function that returns HttpPostEndpoint wrapped in OutputPolymorphic
func HttpPostEndpointAsOutputPolymorphic(v *HttpPostEndpoint) OutputPolymorphic {
	return OutputPolymorphic{
		HttpPostEndpoint: v,
	}
}

// KafkaEndpointAsOutputPolymorphic is a convenience function that returns KafkaEndpoint wrapped in OutputPolymorphic
func KafkaEndpointAsOutputPolymorphic(v *KafkaEndpoint) OutputPolymorphic {
	return OutputPolymorphic{
		KafkaEndpoint: v,
	}
}

// QRadarEndpointAsOutputPolymorphic is a convenience function that returns QRadarEndpoint wrapped in OutputPolymorphic
func QRadarEndpointAsOutputPolymorphic(v *QRadarEndpoint) OutputPolymorphic {
	return OutputPolymorphic{
		QRadarEndpoint: v,
	}
}

// S3EndpointAsOutputPolymorphic is a convenience function that returns S3Endpoint wrapped in OutputPolymorphic
func S3EndpointAsOutputPolymorphic(v *S3Endpoint) OutputPolymorphic {
	return OutputPolymorphic{
		S3Endpoint: v,
	}
}

// SplunkEndpointAsOutputPolymorphic is a convenience function that returns SplunkEndpoint wrapped in OutputPolymorphic
func SplunkEndpointAsOutputPolymorphic(v *SplunkEndpoint) OutputPolymorphic {
	return OutputPolymorphic{
		SplunkEndpoint: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OutputPolymorphic) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AWSKinesisFirehoseEndpoint
	err = newStrictDecoder(data).Decode(&dst.AWSKinesisFirehoseEndpoint)
	if err == nil {
		jsonAWSKinesisFirehoseEndpoint, _ := json.Marshal(dst.AWSKinesisFirehoseEndpoint)
		if string(jsonAWSKinesisFirehoseEndpoint) == "{}" { // empty struct
			dst.AWSKinesisFirehoseEndpoint = nil
		} else {
			if err = validator.Validate(dst.AWSKinesisFirehoseEndpoint); err != nil {
				dst.AWSKinesisFirehoseEndpoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.AWSKinesisFirehoseEndpoint = nil
	}

	// try to unmarshal data into AzureBlobStorageEndpoint
	err = newStrictDecoder(data).Decode(&dst.AzureBlobStorageEndpoint)
	if err == nil {
		jsonAzureBlobStorageEndpoint, _ := json.Marshal(dst.AzureBlobStorageEndpoint)
		if string(jsonAzureBlobStorageEndpoint) == "{}" { // empty struct
			dst.AzureBlobStorageEndpoint = nil
		} else {
			if err = validator.Validate(dst.AzureBlobStorageEndpoint); err != nil {
				dst.AzureBlobStorageEndpoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.AzureBlobStorageEndpoint = nil
	}

	// try to unmarshal data into AzureMonitorEndpoint
	err = newStrictDecoder(data).Decode(&dst.AzureMonitorEndpoint)
	if err == nil {
		jsonAzureMonitorEndpoint, _ := json.Marshal(dst.AzureMonitorEndpoint)
		if string(jsonAzureMonitorEndpoint) == "{}" { // empty struct
			dst.AzureMonitorEndpoint = nil
		} else {
			if err = validator.Validate(dst.AzureMonitorEndpoint); err != nil {
				dst.AzureMonitorEndpoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.AzureMonitorEndpoint = nil
	}

	// try to unmarshal data into BigQueryEndpoint
	err = newStrictDecoder(data).Decode(&dst.BigQueryEndpoint)
	if err == nil {
		jsonBigQueryEndpoint, _ := json.Marshal(dst.BigQueryEndpoint)
		if string(jsonBigQueryEndpoint) == "{}" { // empty struct
			dst.BigQueryEndpoint = nil
		} else {
			if err = validator.Validate(dst.BigQueryEndpoint); err != nil {
				dst.BigQueryEndpoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.BigQueryEndpoint = nil
	}

	// try to unmarshal data into DatadogEndpoint
	err = newStrictDecoder(data).Decode(&dst.DatadogEndpoint)
	if err == nil {
		jsonDatadogEndpoint, _ := json.Marshal(dst.DatadogEndpoint)
		if string(jsonDatadogEndpoint) == "{}" { // empty struct
			dst.DatadogEndpoint = nil
		} else {
			if err = validator.Validate(dst.DatadogEndpoint); err != nil {
				dst.DatadogEndpoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.DatadogEndpoint = nil
	}

	// try to unmarshal data into ElasticsearchEndpoint
	err = newStrictDecoder(data).Decode(&dst.ElasticsearchEndpoint)
	if err == nil {
		jsonElasticsearchEndpoint, _ := json.Marshal(dst.ElasticsearchEndpoint)
		if string(jsonElasticsearchEndpoint) == "{}" { // empty struct
			dst.ElasticsearchEndpoint = nil
		} else {
			if err = validator.Validate(dst.ElasticsearchEndpoint); err != nil {
				dst.ElasticsearchEndpoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.ElasticsearchEndpoint = nil
	}

	// try to unmarshal data into HttpPostEndpoint
	err = newStrictDecoder(data).Decode(&dst.HttpPostEndpoint)
	if err == nil {
		jsonHttpPostEndpoint, _ := json.Marshal(dst.HttpPostEndpoint)
		if string(jsonHttpPostEndpoint) == "{}" { // empty struct
			dst.HttpPostEndpoint = nil
		} else {
			if err = validator.Validate(dst.HttpPostEndpoint); err != nil {
				dst.HttpPostEndpoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.HttpPostEndpoint = nil
	}

	// try to unmarshal data into KafkaEndpoint
	err = newStrictDecoder(data).Decode(&dst.KafkaEndpoint)
	if err == nil {
		jsonKafkaEndpoint, _ := json.Marshal(dst.KafkaEndpoint)
		if string(jsonKafkaEndpoint) == "{}" { // empty struct
			dst.KafkaEndpoint = nil
		} else {
			if err = validator.Validate(dst.KafkaEndpoint); err != nil {
				dst.KafkaEndpoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.KafkaEndpoint = nil
	}

	// try to unmarshal data into QRadarEndpoint
	err = newStrictDecoder(data).Decode(&dst.QRadarEndpoint)
	if err == nil {
		jsonQRadarEndpoint, _ := json.Marshal(dst.QRadarEndpoint)
		if string(jsonQRadarEndpoint) == "{}" { // empty struct
			dst.QRadarEndpoint = nil
		} else {
			if err = validator.Validate(dst.QRadarEndpoint); err != nil {
				dst.QRadarEndpoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.QRadarEndpoint = nil
	}

	// try to unmarshal data into S3Endpoint
	err = newStrictDecoder(data).Decode(&dst.S3Endpoint)
	if err == nil {
		jsonS3Endpoint, _ := json.Marshal(dst.S3Endpoint)
		if string(jsonS3Endpoint) == "{}" { // empty struct
			dst.S3Endpoint = nil
		} else {
			if err = validator.Validate(dst.S3Endpoint); err != nil {
				dst.S3Endpoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.S3Endpoint = nil
	}

	// try to unmarshal data into SplunkEndpoint
	err = newStrictDecoder(data).Decode(&dst.SplunkEndpoint)
	if err == nil {
		jsonSplunkEndpoint, _ := json.Marshal(dst.SplunkEndpoint)
		if string(jsonSplunkEndpoint) == "{}" { // empty struct
			dst.SplunkEndpoint = nil
		} else {
			if err = validator.Validate(dst.SplunkEndpoint); err != nil {
				dst.SplunkEndpoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.SplunkEndpoint = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AWSKinesisFirehoseEndpoint = nil
		dst.AzureBlobStorageEndpoint = nil
		dst.AzureMonitorEndpoint = nil
		dst.BigQueryEndpoint = nil
		dst.DatadogEndpoint = nil
		dst.ElasticsearchEndpoint = nil
		dst.HttpPostEndpoint = nil
		dst.KafkaEndpoint = nil
		dst.QRadarEndpoint = nil
		dst.S3Endpoint = nil
		dst.SplunkEndpoint = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OutputPolymorphic)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OutputPolymorphic)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OutputPolymorphic) MarshalJSON() ([]byte, error) {
	if src.AWSKinesisFirehoseEndpoint != nil {
		return json.Marshal(&src.AWSKinesisFirehoseEndpoint)
	}

	if src.AzureBlobStorageEndpoint != nil {
		return json.Marshal(&src.AzureBlobStorageEndpoint)
	}

	if src.AzureMonitorEndpoint != nil {
		return json.Marshal(&src.AzureMonitorEndpoint)
	}

	if src.BigQueryEndpoint != nil {
		return json.Marshal(&src.BigQueryEndpoint)
	}

	if src.DatadogEndpoint != nil {
		return json.Marshal(&src.DatadogEndpoint)
	}

	if src.ElasticsearchEndpoint != nil {
		return json.Marshal(&src.ElasticsearchEndpoint)
	}

	if src.HttpPostEndpoint != nil {
		return json.Marshal(&src.HttpPostEndpoint)
	}

	if src.KafkaEndpoint != nil {
		return json.Marshal(&src.KafkaEndpoint)
	}

	if src.QRadarEndpoint != nil {
		return json.Marshal(&src.QRadarEndpoint)
	}

	if src.S3Endpoint != nil {
		return json.Marshal(&src.S3Endpoint)
	}

	if src.SplunkEndpoint != nil {
		return json.Marshal(&src.SplunkEndpoint)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OutputPolymorphic) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AWSKinesisFirehoseEndpoint != nil {
		return obj.AWSKinesisFirehoseEndpoint
	}

	if obj.AzureBlobStorageEndpoint != nil {
		return obj.AzureBlobStorageEndpoint
	}

	if obj.AzureMonitorEndpoint != nil {
		return obj.AzureMonitorEndpoint
	}

	if obj.BigQueryEndpoint != nil {
		return obj.BigQueryEndpoint
	}

	if obj.DatadogEndpoint != nil {
		return obj.DatadogEndpoint
	}

	if obj.ElasticsearchEndpoint != nil {
		return obj.ElasticsearchEndpoint
	}

	if obj.HttpPostEndpoint != nil {
		return obj.HttpPostEndpoint
	}

	if obj.KafkaEndpoint != nil {
		return obj.KafkaEndpoint
	}

	if obj.QRadarEndpoint != nil {
		return obj.QRadarEndpoint
	}

	if obj.S3Endpoint != nil {
		return obj.S3Endpoint
	}

	if obj.SplunkEndpoint != nil {
		return obj.SplunkEndpoint
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj OutputPolymorphic) GetActualInstanceValue() (interface{}) {
	if obj.AWSKinesisFirehoseEndpoint != nil {
		return *obj.AWSKinesisFirehoseEndpoint
	}

	if obj.AzureBlobStorageEndpoint != nil {
		return *obj.AzureBlobStorageEndpoint
	}

	if obj.AzureMonitorEndpoint != nil {
		return *obj.AzureMonitorEndpoint
	}

	if obj.BigQueryEndpoint != nil {
		return *obj.BigQueryEndpoint
	}

	if obj.DatadogEndpoint != nil {
		return *obj.DatadogEndpoint
	}

	if obj.ElasticsearchEndpoint != nil {
		return *obj.ElasticsearchEndpoint
	}

	if obj.HttpPostEndpoint != nil {
		return *obj.HttpPostEndpoint
	}

	if obj.KafkaEndpoint != nil {
		return *obj.KafkaEndpoint
	}

	if obj.QRadarEndpoint != nil {
		return *obj.QRadarEndpoint
	}

	if obj.S3Endpoint != nil {
		return *obj.S3Endpoint
	}

	if obj.SplunkEndpoint != nil {
		return *obj.SplunkEndpoint
	}

	// all schemas are nil
	return nil
}

type NullableOutputPolymorphic struct {
	value *OutputPolymorphic
	isSet bool
}

func (v NullableOutputPolymorphic) Get() *OutputPolymorphic {
	return v.value
}

func (v *NullableOutputPolymorphic) Set(val *OutputPolymorphic) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputPolymorphic) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputPolymorphic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputPolymorphic(val *OutputPolymorphic) *NullableOutputPolymorphic {
	return &NullableOutputPolymorphic{value: val, isSet: true}
}

func (v NullableOutputPolymorphic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputPolymorphic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



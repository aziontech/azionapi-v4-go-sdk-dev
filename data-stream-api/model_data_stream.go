/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datastreamapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DataStream type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataStream{}

// DataStream struct for DataStream
type DataStream struct {
	Id int64 `json:"id"`
	Name string `json:"name" validate:"regexp=.*"`
	LastEditor string `json:"last_editor" validate:"regexp=.*"`
	LastModified time.Time `json:"last_modified"`
	ProductVersion string `json:"product_version" validate:"regexp=.*"`
	Active *bool `json:"active,omitempty"`
	Inputs []InputPolymorphicInputDataSourceAttributes `json:"inputs"`
	Transform []TransformPolymorphic `json:"transform"`
	Outputs []Output `json:"outputs"`
}

type _DataStream DataStream

// NewDataStream instantiates a new DataStream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStream(id int64, name string, lastEditor string, lastModified time.Time, productVersion string, inputs []InputPolymorphicInputDataSourceAttributes, transform []TransformPolymorphic, outputs []Output) *DataStream {
	this := DataStream{}
	this.Id = id
	this.Name = name
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	this.ProductVersion = productVersion
	this.Inputs = inputs
	this.Transform = transform
	this.Outputs = outputs
	return &this
}

// NewDataStreamWithDefaults instantiates a new DataStream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStreamWithDefaults() *DataStream {
	this := DataStream{}
	return &this
}

// GetId returns the Id field value
func (o *DataStream) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DataStream) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataStream) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DataStream) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataStream) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataStream) SetName(v string) {
	o.Name = v
}

// GetLastEditor returns the LastEditor field value
func (o *DataStream) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *DataStream) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *DataStream) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *DataStream) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *DataStream) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *DataStream) SetLastModified(v time.Time) {
	o.LastModified = v
}

// GetProductVersion returns the ProductVersion field value
func (o *DataStream) GetProductVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductVersion
}

// GetProductVersionOk returns a tuple with the ProductVersion field value
// and a boolean to check if the value has been set.
func (o *DataStream) GetProductVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductVersion, true
}

// SetProductVersion sets field value
func (o *DataStream) SetProductVersion(v string) {
	o.ProductVersion = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *DataStream) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStream) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *DataStream) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *DataStream) SetActive(v bool) {
	o.Active = &v
}

// GetInputs returns the Inputs field value
func (o *DataStream) GetInputs() []InputPolymorphicInputDataSourceAttributes {
	if o == nil {
		var ret []InputPolymorphicInputDataSourceAttributes
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *DataStream) GetInputsOk() ([]InputPolymorphicInputDataSourceAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *DataStream) SetInputs(v []InputPolymorphicInputDataSourceAttributes) {
	o.Inputs = v
}

// GetTransform returns the Transform field value
func (o *DataStream) GetTransform() []TransformPolymorphic {
	if o == nil {
		var ret []TransformPolymorphic
		return ret
	}

	return o.Transform
}

// GetTransformOk returns a tuple with the Transform field value
// and a boolean to check if the value has been set.
func (o *DataStream) GetTransformOk() ([]TransformPolymorphic, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transform, true
}

// SetTransform sets field value
func (o *DataStream) SetTransform(v []TransformPolymorphic) {
	o.Transform = v
}

// GetOutputs returns the Outputs field value
func (o *DataStream) GetOutputs() []Output {
	if o == nil {
		var ret []Output
		return ret
	}

	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value
// and a boolean to check if the value has been set.
func (o *DataStream) GetOutputsOk() ([]Output, bool) {
	if o == nil {
		return nil, false
	}
	return o.Outputs, true
}

// SetOutputs sets field value
func (o *DataStream) SetOutputs(v []Output) {
	o.Outputs = v
}

func (o DataStream) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataStream) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	toSerialize["product_version"] = o.ProductVersion
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["inputs"] = o.Inputs
	toSerialize["transform"] = o.Transform
	toSerialize["outputs"] = o.Outputs
	return toSerialize, nil
}

func (o *DataStream) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"last_editor",
		"last_modified",
		"product_version",
		"inputs",
		"transform",
		"outputs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataStream := _DataStream{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataStream)

	if err != nil {
		return err
	}

	*o = DataStream(varDataStream)

	return err
}

type NullableDataStream struct {
	value *DataStream
	isSet bool
}

func (v NullableDataStream) Get() *DataStream {
	return v.value
}

func (v *NullableDataStream) Set(val *DataStream) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStream) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStream(val *DataStream) *NullableDataStream {
	return &NullableDataStream{value: val, isSet: true}
}

func (v NullableDataStream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



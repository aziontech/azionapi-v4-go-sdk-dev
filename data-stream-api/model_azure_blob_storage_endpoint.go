/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datastreamapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureBlobStorageEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureBlobStorageEndpoint{}

// AzureBlobStorageEndpoint struct for AzureBlobStorageEndpoint
type AzureBlobStorageEndpoint struct {
	StorageAccount string `json:"storage_account"`
	ContainerName string `json:"container_name"`
	BlobSasToken string `json:"blob_sas_token"`
}

type _AzureBlobStorageEndpoint AzureBlobStorageEndpoint

// NewAzureBlobStorageEndpoint instantiates a new AzureBlobStorageEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureBlobStorageEndpoint(storageAccount string, containerName string, blobSasToken string) *AzureBlobStorageEndpoint {
	this := AzureBlobStorageEndpoint{}
	this.StorageAccount = storageAccount
	this.ContainerName = containerName
	this.BlobSasToken = blobSasToken
	return &this
}

// NewAzureBlobStorageEndpointWithDefaults instantiates a new AzureBlobStorageEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureBlobStorageEndpointWithDefaults() *AzureBlobStorageEndpoint {
	this := AzureBlobStorageEndpoint{}
	return &this
}

// GetStorageAccount returns the StorageAccount field value
func (o *AzureBlobStorageEndpoint) GetStorageAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageAccount
}

// GetStorageAccountOk returns a tuple with the StorageAccount field value
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageEndpoint) GetStorageAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageAccount, true
}

// SetStorageAccount sets field value
func (o *AzureBlobStorageEndpoint) SetStorageAccount(v string) {
	o.StorageAccount = v
}

// GetContainerName returns the ContainerName field value
func (o *AzureBlobStorageEndpoint) GetContainerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageEndpoint) GetContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerName, true
}

// SetContainerName sets field value
func (o *AzureBlobStorageEndpoint) SetContainerName(v string) {
	o.ContainerName = v
}

// GetBlobSasToken returns the BlobSasToken field value
func (o *AzureBlobStorageEndpoint) GetBlobSasToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlobSasToken
}

// GetBlobSasTokenOk returns a tuple with the BlobSasToken field value
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageEndpoint) GetBlobSasTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlobSasToken, true
}

// SetBlobSasToken sets field value
func (o *AzureBlobStorageEndpoint) SetBlobSasToken(v string) {
	o.BlobSasToken = v
}

func (o AzureBlobStorageEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureBlobStorageEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storage_account"] = o.StorageAccount
	toSerialize["container_name"] = o.ContainerName
	toSerialize["blob_sas_token"] = o.BlobSasToken
	return toSerialize, nil
}

func (o *AzureBlobStorageEndpoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"storage_account",
		"container_name",
		"blob_sas_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureBlobStorageEndpoint := _AzureBlobStorageEndpoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureBlobStorageEndpoint)

	if err != nil {
		return err
	}

	*o = AzureBlobStorageEndpoint(varAzureBlobStorageEndpoint)

	return err
}

type NullableAzureBlobStorageEndpoint struct {
	value *AzureBlobStorageEndpoint
	isSet bool
}

func (v NullableAzureBlobStorageEndpoint) Get() *AzureBlobStorageEndpoint {
	return v.value
}

func (v *NullableAzureBlobStorageEndpoint) Set(val *AzureBlobStorageEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureBlobStorageEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureBlobStorageEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureBlobStorageEndpoint(val *AzureBlobStorageEndpoint) *NullableAzureBlobStorageEndpoint {
	return &NullableAzureBlobStorageEndpoint{value: val, isSet: true}
}

func (v NullableAzureBlobStorageEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureBlobStorageEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data-stream-api

import (
	"encoding/json"
)

// checks if the PatchedDataStreamRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedDataStreamRequest{}

// PatchedDataStreamRequest struct for PatchedDataStreamRequest
type PatchedDataStreamRequest struct {
	Name *string `json:"name,omitempty" validate:"regexp=.*"`
	Active *bool `json:"active,omitempty"`
	Inputs []InputPolymorphicInputDataSourceAttributesRequest `json:"inputs,omitempty"`
	Transform []TransformPolymorphicRequest `json:"transform,omitempty"`
}

// NewPatchedDataStreamRequest instantiates a new PatchedDataStreamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedDataStreamRequest() *PatchedDataStreamRequest {
	this := PatchedDataStreamRequest{}
	return &this
}

// NewPatchedDataStreamRequestWithDefaults instantiates a new PatchedDataStreamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedDataStreamRequestWithDefaults() *PatchedDataStreamRequest {
	this := PatchedDataStreamRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedDataStreamRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDataStreamRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedDataStreamRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedDataStreamRequest) SetName(v string) {
	o.Name = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PatchedDataStreamRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDataStreamRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PatchedDataStreamRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PatchedDataStreamRequest) SetActive(v bool) {
	o.Active = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *PatchedDataStreamRequest) GetInputs() []InputPolymorphicInputDataSourceAttributesRequest {
	if o == nil || IsNil(o.Inputs) {
		var ret []InputPolymorphicInputDataSourceAttributesRequest
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDataStreamRequest) GetInputsOk() ([]InputPolymorphicInputDataSourceAttributesRequest, bool) {
	if o == nil || IsNil(o.Inputs) {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *PatchedDataStreamRequest) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []InputPolymorphicInputDataSourceAttributesRequest and assigns it to the Inputs field.
func (o *PatchedDataStreamRequest) SetInputs(v []InputPolymorphicInputDataSourceAttributesRequest) {
	o.Inputs = v
}

// GetTransform returns the Transform field value if set, zero value otherwise.
func (o *PatchedDataStreamRequest) GetTransform() []TransformPolymorphicRequest {
	if o == nil || IsNil(o.Transform) {
		var ret []TransformPolymorphicRequest
		return ret
	}
	return o.Transform
}

// GetTransformOk returns a tuple with the Transform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDataStreamRequest) GetTransformOk() ([]TransformPolymorphicRequest, bool) {
	if o == nil || IsNil(o.Transform) {
		return nil, false
	}
	return o.Transform, true
}

// HasTransform returns a boolean if a field has been set.
func (o *PatchedDataStreamRequest) HasTransform() bool {
	if o != nil && !IsNil(o.Transform) {
		return true
	}

	return false
}

// SetTransform gets a reference to the given []TransformPolymorphicRequest and assigns it to the Transform field.
func (o *PatchedDataStreamRequest) SetTransform(v []TransformPolymorphicRequest) {
	o.Transform = v
}

func (o PatchedDataStreamRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedDataStreamRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Inputs) {
		toSerialize["inputs"] = o.Inputs
	}
	if !IsNil(o.Transform) {
		toSerialize["transform"] = o.Transform
	}
	return toSerialize, nil
}

type NullablePatchedDataStreamRequest struct {
	value *PatchedDataStreamRequest
	isSet bool
}

func (v NullablePatchedDataStreamRequest) Get() *PatchedDataStreamRequest {
	return v.value
}

func (v *NullablePatchedDataStreamRequest) Set(val *PatchedDataStreamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedDataStreamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedDataStreamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedDataStreamRequest(val *PatchedDataStreamRequest) *NullablePatchedDataStreamRequest {
	return &NullablePatchedDataStreamRequest{value: val, isSet: true}
}

func (v NullablePatchedDataStreamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedDataStreamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



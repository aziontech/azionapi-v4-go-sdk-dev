/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data-stream-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JSONAPIErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONAPIErrorResponse{}

// JSONAPIErrorResponse Serializer for a JSON:API error response.
type JSONAPIErrorResponse struct {
	// Array of error objects
	Errors []JSONAPIErrorObject `json:"errors"`
}

type _JSONAPIErrorResponse JSONAPIErrorResponse

// NewJSONAPIErrorResponse instantiates a new JSONAPIErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONAPIErrorResponse(errors []JSONAPIErrorObject) *JSONAPIErrorResponse {
	this := JSONAPIErrorResponse{}
	this.Errors = errors
	return &this
}

// NewJSONAPIErrorResponseWithDefaults instantiates a new JSONAPIErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONAPIErrorResponseWithDefaults() *JSONAPIErrorResponse {
	this := JSONAPIErrorResponse{}
	return &this
}

// GetErrors returns the Errors field value
func (o *JSONAPIErrorResponse) GetErrors() []JSONAPIErrorObject {
	if o == nil {
		var ret []JSONAPIErrorObject
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *JSONAPIErrorResponse) GetErrorsOk() ([]JSONAPIErrorObject, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *JSONAPIErrorResponse) SetErrors(v []JSONAPIErrorObject) {
	o.Errors = v
}

func (o JSONAPIErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONAPIErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errors"] = o.Errors
	return toSerialize, nil
}

func (o *JSONAPIErrorResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJSONAPIErrorResponse := _JSONAPIErrorResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJSONAPIErrorResponse)

	if err != nil {
		return err
	}

	*o = JSONAPIErrorResponse(varJSONAPIErrorResponse)

	return err
}

type NullableJSONAPIErrorResponse struct {
	value *JSONAPIErrorResponse
	isSet bool
}

func (v NullableJSONAPIErrorResponse) Get() *JSONAPIErrorResponse {
	return v.value
}

func (v *NullableJSONAPIErrorResponse) Set(val *JSONAPIErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONAPIErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONAPIErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONAPIErrorResponse(val *JSONAPIErrorResponse) *NullableJSONAPIErrorResponse {
	return &NullableJSONAPIErrorResponse{value: val, isSet: true}
}

func (v NullableJSONAPIErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONAPIErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



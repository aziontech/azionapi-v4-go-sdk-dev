/*
AI-Studio-API

REST API OpenAPI documentation for the AI-Studio-API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aistudioapi

import (
	"encoding/json"
)

// checks if the PaginatedToolList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedToolList{}

// PaginatedToolList struct for PaginatedToolList
type PaginatedToolList struct {
	Count *int64 `json:"count,omitempty"`
	Results []Tool `json:"results,omitempty"`
}

// NewPaginatedToolList instantiates a new PaginatedToolList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedToolList() *PaginatedToolList {
	this := PaginatedToolList{}
	return &this
}

// NewPaginatedToolListWithDefaults instantiates a new PaginatedToolList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedToolListWithDefaults() *PaginatedToolList {
	this := PaginatedToolList{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PaginatedToolList) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedToolList) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PaginatedToolList) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *PaginatedToolList) SetCount(v int64) {
	o.Count = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *PaginatedToolList) GetResults() []Tool {
	if o == nil || IsNil(o.Results) {
		var ret []Tool
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedToolList) GetResultsOk() ([]Tool, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *PaginatedToolList) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []Tool and assigns it to the Results field.
func (o *PaginatedToolList) SetResults(v []Tool) {
	o.Results = v
}

func (o PaginatedToolList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedToolList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullablePaginatedToolList struct {
	value *PaginatedToolList
	isSet bool
}

func (v NullablePaginatedToolList) Get() *PaginatedToolList {
	return v.value
}

func (v *NullablePaginatedToolList) Set(val *PaginatedToolList) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedToolList) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedToolList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedToolList(val *PaginatedToolList) *NullablePaginatedToolList {
	return &NullablePaginatedToolList{value: val, isSet: true}
}

func (v NullablePaginatedToolList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedToolList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



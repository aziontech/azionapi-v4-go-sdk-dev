/*
ai-studio-api

REST API OpenAPI documentation for the ai-studio-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aistudioapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolKBLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolKBLink{}

// ToolKBLink struct for ToolKBLink
type ToolKBLink struct {
	ToolKbId int64 `json:"tool_kb_id"`
	KbId int64 `json:"kb_id"`
}

type _ToolKBLink ToolKBLink

// NewToolKBLink instantiates a new ToolKBLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolKBLink(toolKbId int64, kbId int64) *ToolKBLink {
	this := ToolKBLink{}
	this.ToolKbId = toolKbId
	this.KbId = kbId
	return &this
}

// NewToolKBLinkWithDefaults instantiates a new ToolKBLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolKBLinkWithDefaults() *ToolKBLink {
	this := ToolKBLink{}
	return &this
}

// GetToolKbId returns the ToolKbId field value
func (o *ToolKBLink) GetToolKbId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ToolKbId
}

// GetToolKbIdOk returns a tuple with the ToolKbId field value
// and a boolean to check if the value has been set.
func (o *ToolKBLink) GetToolKbIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolKbId, true
}

// SetToolKbId sets field value
func (o *ToolKBLink) SetToolKbId(v int64) {
	o.ToolKbId = v
}

// GetKbId returns the KbId field value
func (o *ToolKBLink) GetKbId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.KbId
}

// GetKbIdOk returns a tuple with the KbId field value
// and a boolean to check if the value has been set.
func (o *ToolKBLink) GetKbIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KbId, true
}

// SetKbId sets field value
func (o *ToolKBLink) SetKbId(v int64) {
	o.KbId = v
}

func (o ToolKBLink) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolKBLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tool_kb_id"] = o.ToolKbId
	toSerialize["kb_id"] = o.KbId
	return toSerialize, nil
}

func (o *ToolKBLink) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tool_kb_id",
		"kb_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolKBLink := _ToolKBLink{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolKBLink)

	if err != nil {
		return err
	}

	*o = ToolKBLink(varToolKBLink)

	return err
}

type NullableToolKBLink struct {
	value *ToolKBLink
	isSet bool
}

func (v NullableToolKBLink) Get() *ToolKBLink {
	return v.value
}

func (v *NullableToolKBLink) Set(val *ToolKBLink) {
	v.value = val
	v.isSet = true
}

func (v NullableToolKBLink) IsSet() bool {
	return v.isSet
}

func (v *NullableToolKBLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolKBLink(val *ToolKBLink) *NullableToolKBLink {
	return &NullableToolKBLink{value: val, isSet: true}
}

func (v NullableToolKBLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolKBLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



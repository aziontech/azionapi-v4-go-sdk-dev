/*
AI-Studio-API

Testing ThreadsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package aistudioapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_aistudioapi_ThreadsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ThreadsAPIService ThreadsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ThreadsAPI.ThreadsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService ThreadsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var threadId string

		httpRes, err := apiClient.ThreadsAPI.ThreadsDestroy(context.Background(), threadId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService ThreadsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ThreadsAPI.ThreadsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService ThreadsMessagesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.ThreadsMessagesCreate(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService ThreadsMessagesDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId string
		var threadId string

		httpRes, err := apiClient.ThreadsAPI.ThreadsMessagesDestroy(context.Background(), messageId, threadId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService ThreadsMessagesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.ThreadsMessagesList(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService ThreadsMessagesRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId string
		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.ThreadsMessagesRetrieve(context.Background(), messageId, threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService ThreadsMessagesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId string
		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.ThreadsMessagesUpdate(context.Background(), messageId, threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService ThreadsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.ThreadsPartialUpdate(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService ThreadsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.ThreadsRetrieve(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService ThreadsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.ThreadsUpdate(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

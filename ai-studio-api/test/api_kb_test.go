/*
AI-Studio-API

Testing KbAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package aistudioapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_aistudioapi_KbAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KbAPIService KbCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.KbAPI.KbCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KbAPIService KbDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kbId string

		httpRes, err := apiClient.KbAPI.KbDestroy(context.Background(), kbId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KbAPIService KbDocumentsChunksRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string
		var kbId string

		httpRes, err := apiClient.KbAPI.KbDocumentsChunksRetrieve(context.Background(), documentId, kbId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KbAPIService KbDocumentsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kbId string

		resp, httpRes, err := apiClient.KbAPI.KbDocumentsCreate(context.Background(), kbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KbAPIService KbDocumentsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string
		var kbId string

		httpRes, err := apiClient.KbAPI.KbDocumentsDestroy(context.Background(), documentId, kbId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KbAPIService KbDocumentsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kbId string

		resp, httpRes, err := apiClient.KbAPI.KbDocumentsList(context.Background(), kbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KbAPIService KbDocumentsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string
		var kbId string

		resp, httpRes, err := apiClient.KbAPI.KbDocumentsRetrieve(context.Background(), documentId, kbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KbAPIService KbDocumentsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string
		var kbId string

		resp, httpRes, err := apiClient.KbAPI.KbDocumentsUpdate(context.Background(), documentId, kbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KbAPIService KbList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.KbAPI.KbList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KbAPIService KbPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kbId string

		resp, httpRes, err := apiClient.KbAPI.KbPartialUpdate(context.Background(), kbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KbAPIService KbRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kbId string

		resp, httpRes, err := apiClient.KbAPI.KbRetrieve(context.Background(), kbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KbAPIService KbUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kbId string

		resp, httpRes, err := apiClient.KbAPI.KbUpdate(context.Background(), kbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

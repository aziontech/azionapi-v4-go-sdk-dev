/*
ai-studio-api

Testing AIStudioToolsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package aistudioapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_aistudioapi_AIStudioToolsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AIStudioToolsAPIService AddKnowledgeBaseToATool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.AIStudioToolsAPI.AddKnowledgeBaseToATool(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIStudioToolsAPIService CreateTool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AIStudioToolsAPI.CreateTool(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIStudioToolsAPIService DestroyATool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.AIStudioToolsAPI.DestroyATool(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIStudioToolsAPIService ListKnowledgeBasesLinkedToATool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.AIStudioToolsAPI.ListKnowledgeBasesLinkedToATool(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIStudioToolsAPIService ListTools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AIStudioToolsAPI.ListTools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIStudioToolsAPIService PartialUpdateTool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.AIStudioToolsAPI.PartialUpdateTool(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIStudioToolsAPIService RemoveKnowledgeBaseFromATool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kbId string
		var toolId string

		httpRes, err := apiClient.AIStudioToolsAPI.RemoveKnowledgeBaseFromATool(context.Background(), kbId, toolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIStudioToolsAPIService RetriveTool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.AIStudioToolsAPI.RetriveTool(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIStudioToolsAPIService UpdateTool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.AIStudioToolsAPI.UpdateTool(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

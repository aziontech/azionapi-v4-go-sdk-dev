/*
AI-Studio-API

Testing ToolsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package aistudioapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_aistudioapi_ToolsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ToolsAPIService ToolsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ToolsAPI.ToolsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		httpRes, err := apiClient.ToolsAPI.ToolsDestroy(context.Background(), toolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsKbCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.ToolsAPI.ToolsKbCreate(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsKbDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kbId string
		var toolId string

		httpRes, err := apiClient.ToolsAPI.ToolsKbDestroy(context.Background(), kbId, toolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsKbRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.ToolsAPI.ToolsKbRetrieve(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ToolsAPI.ToolsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.ToolsAPI.ToolsPartialUpdate(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.ToolsAPI.ToolsRetrieve(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.ToolsAPI.ToolsUpdate(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
ai-studio-api

REST API OpenAPI documentation for the ai-studio-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aistudioapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Document type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Document{}

// Document struct for Document
type Document struct {
	DocumentId string `json:"document_id"`
	KbId string `json:"kb_id"`
	LastEditor string `json:"last_editor"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Type *string `json:"type,omitempty"`
	SourceUri *string `json:"source_uri,omitempty"`
	ChunkStrategy map[string]interface{} `json:"chunk_strategy,omitempty"`
	// * `creating` - creating * `processing` - processing * `created` - created * `error` - error
	Status string `json:"status"`
	LastModified time.Time `json:"last_modified"`
}

type _Document Document

// NewDocument instantiates a new Document object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocument(documentId string, kbId string, lastEditor string, status string, lastModified time.Time) *Document {
	this := Document{}
	this.DocumentId = documentId
	this.KbId = kbId
	this.LastEditor = lastEditor
	this.Status = status
	this.LastModified = lastModified
	return &this
}

// NewDocumentWithDefaults instantiates a new Document object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentWithDefaults() *Document {
	this := Document{}
	return &this
}

// GetDocumentId returns the DocumentId field value
func (o *Document) GetDocumentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value
// and a boolean to check if the value has been set.
func (o *Document) GetDocumentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentId, true
}

// SetDocumentId sets field value
func (o *Document) SetDocumentId(v string) {
	o.DocumentId = v
}

// GetKbId returns the KbId field value
func (o *Document) GetKbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KbId
}

// GetKbIdOk returns a tuple with the KbId field value
// and a boolean to check if the value has been set.
func (o *Document) GetKbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KbId, true
}

// SetKbId sets field value
func (o *Document) SetKbId(v string) {
	o.KbId = v
}

// GetLastEditor returns the LastEditor field value
func (o *Document) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *Document) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *Document) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Document) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Document) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Document) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Document) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Document) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Document) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Document) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Document) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Document) SetType(v string) {
	o.Type = &v
}

// GetSourceUri returns the SourceUri field value if set, zero value otherwise.
func (o *Document) GetSourceUri() string {
	if o == nil || IsNil(o.SourceUri) {
		var ret string
		return ret
	}
	return *o.SourceUri
}

// GetSourceUriOk returns a tuple with the SourceUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetSourceUriOk() (*string, bool) {
	if o == nil || IsNil(o.SourceUri) {
		return nil, false
	}
	return o.SourceUri, true
}

// HasSourceUri returns a boolean if a field has been set.
func (o *Document) HasSourceUri() bool {
	if o != nil && !IsNil(o.SourceUri) {
		return true
	}

	return false
}

// SetSourceUri gets a reference to the given string and assigns it to the SourceUri field.
func (o *Document) SetSourceUri(v string) {
	o.SourceUri = &v
}

// GetChunkStrategy returns the ChunkStrategy field value if set, zero value otherwise.
func (o *Document) GetChunkStrategy() map[string]interface{} {
	if o == nil || IsNil(o.ChunkStrategy) {
		var ret map[string]interface{}
		return ret
	}
	return o.ChunkStrategy
}

// GetChunkStrategyOk returns a tuple with the ChunkStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetChunkStrategyOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ChunkStrategy) {
		return map[string]interface{}{}, false
	}
	return o.ChunkStrategy, true
}

// HasChunkStrategy returns a boolean if a field has been set.
func (o *Document) HasChunkStrategy() bool {
	if o != nil && !IsNil(o.ChunkStrategy) {
		return true
	}

	return false
}

// SetChunkStrategy gets a reference to the given map[string]interface{} and assigns it to the ChunkStrategy field.
func (o *Document) SetChunkStrategy(v map[string]interface{}) {
	o.ChunkStrategy = v
}

// GetStatus returns the Status field value
func (o *Document) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Document) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Document) SetStatus(v string) {
	o.Status = v
}

// GetLastModified returns the LastModified field value
func (o *Document) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *Document) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *Document) SetLastModified(v time.Time) {
	o.LastModified = v
}

func (o Document) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Document) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["document_id"] = o.DocumentId
	toSerialize["kb_id"] = o.KbId
	toSerialize["last_editor"] = o.LastEditor
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SourceUri) {
		toSerialize["source_uri"] = o.SourceUri
	}
	if !IsNil(o.ChunkStrategy) {
		toSerialize["chunk_strategy"] = o.ChunkStrategy
	}
	toSerialize["status"] = o.Status
	toSerialize["last_modified"] = o.LastModified
	return toSerialize, nil
}

func (o *Document) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"document_id",
		"kb_id",
		"last_editor",
		"status",
		"last_modified",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocument := _Document{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocument)

	if err != nil {
		return err
	}

	*o = Document(varDocument)

	return err
}

type NullableDocument struct {
	value *Document
	isSet bool
}

func (v NullableDocument) Get() *Document {
	return v.value
}

func (v *NullableDocument) Set(val *Document) {
	v.value = val
	v.isSet = true
}

func (v NullableDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocument(val *Document) *NullableDocument {
	return &NullableDocument{value: val, isSet: true}
}

func (v NullableDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
ai-studio-api

REST API OpenAPI documentation for the ai-studio-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aistudioapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Tool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tool{}

// Tool struct for Tool
type Tool struct {
	ToolId int64 `json:"tool_id"`
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Type string `json:"type"`
	JsonSchema map[string]interface{} `json:"json_schema,omitempty"`
	Active *bool `json:"active,omitempty"`
	Kbs string `json:"kbs"`
	LastModified time.Time `json:"last_modified"`
	LastEditor string `json:"last_editor"`
}

type _Tool Tool

// NewTool instantiates a new Tool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTool(toolId int64, name string, type_ string, kbs string, lastModified time.Time, lastEditor string) *Tool {
	this := Tool{}
	this.ToolId = toolId
	this.Name = name
	this.Type = type_
	this.Kbs = kbs
	this.LastModified = lastModified
	this.LastEditor = lastEditor
	return &this
}

// NewToolWithDefaults instantiates a new Tool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolWithDefaults() *Tool {
	this := Tool{}
	return &this
}

// GetToolId returns the ToolId field value
func (o *Tool) GetToolId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ToolId
}

// GetToolIdOk returns a tuple with the ToolId field value
// and a boolean to check if the value has been set.
func (o *Tool) GetToolIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolId, true
}

// SetToolId sets field value
func (o *Tool) SetToolId(v int64) {
	o.ToolId = v
}

// GetName returns the Name field value
func (o *Tool) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tool) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tool) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Tool) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tool) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Tool) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Tool) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *Tool) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Tool) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Tool) SetType(v string) {
	o.Type = v
}

// GetJsonSchema returns the JsonSchema field value if set, zero value otherwise.
func (o *Tool) GetJsonSchema() map[string]interface{} {
	if o == nil || IsNil(o.JsonSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.JsonSchema
}

// GetJsonSchemaOk returns a tuple with the JsonSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tool) GetJsonSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.JsonSchema) {
		return map[string]interface{}{}, false
	}
	return o.JsonSchema, true
}

// HasJsonSchema returns a boolean if a field has been set.
func (o *Tool) HasJsonSchema() bool {
	if o != nil && !IsNil(o.JsonSchema) {
		return true
	}

	return false
}

// SetJsonSchema gets a reference to the given map[string]interface{} and assigns it to the JsonSchema field.
func (o *Tool) SetJsonSchema(v map[string]interface{}) {
	o.JsonSchema = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Tool) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tool) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Tool) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Tool) SetActive(v bool) {
	o.Active = &v
}

// GetKbs returns the Kbs field value
func (o *Tool) GetKbs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kbs
}

// GetKbsOk returns a tuple with the Kbs field value
// and a boolean to check if the value has been set.
func (o *Tool) GetKbsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kbs, true
}

// SetKbs sets field value
func (o *Tool) SetKbs(v string) {
	o.Kbs = v
}

// GetLastModified returns the LastModified field value
func (o *Tool) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *Tool) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *Tool) SetLastModified(v time.Time) {
	o.LastModified = v
}

// GetLastEditor returns the LastEditor field value
func (o *Tool) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *Tool) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *Tool) SetLastEditor(v string) {
	o.LastEditor = v
}

func (o Tool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tool_id"] = o.ToolId
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.JsonSchema) {
		toSerialize["json_schema"] = o.JsonSchema
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["kbs"] = o.Kbs
	toSerialize["last_modified"] = o.LastModified
	toSerialize["last_editor"] = o.LastEditor
	return toSerialize, nil
}

func (o *Tool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tool_id",
		"name",
		"type",
		"kbs",
		"last_modified",
		"last_editor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTool := _Tool{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTool)

	if err != nil {
		return err
	}

	*o = Tool(varTool)

	return err
}

type NullableTool struct {
	value *Tool
	isSet bool
}

func (v NullableTool) Get() *Tool {
	return v.value
}

func (v *NullableTool) Set(val *Tool) {
	v.value = val
	v.isSet = true
}

func (v NullableTool) IsSet() bool {
	return v.isSet
}

func (v *NullableTool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTool(val *Tool) *NullableTool {
	return &NullableTool{value: val, isSet: true}
}

func (v NullableTool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



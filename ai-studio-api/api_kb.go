/*
AI-Studio-API

REST API OpenAPI documentation for the AI-Studio-API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aistudioapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// KbAPIService KbAPI service
type KbAPIService service

type ApiKbCreateRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	knowledgeBaseRequest *KnowledgeBaseRequest
}

func (r ApiKbCreateRequest) KnowledgeBaseRequest(knowledgeBaseRequest KnowledgeBaseRequest) ApiKbCreateRequest {
	r.knowledgeBaseRequest = &knowledgeBaseRequest
	return r
}

func (r ApiKbCreateRequest) Execute() (*KnowledgeBase, *http.Response, error) {
	return r.ApiService.KbCreateExecute(r)
}

/*
KbCreate Method for KbCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiKbCreateRequest
*/
func (a *KbAPIService) KbCreate(ctx context.Context) ApiKbCreateRequest {
	return ApiKbCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KnowledgeBase
func (a *KbAPIService) KbCreateExecute(r ApiKbCreateRequest) (*KnowledgeBase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeBaseRequest == nil {
		return localVarReturnValue, nil, reportError("knowledgeBaseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeBaseRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKbDestroyRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	kbId string
}

func (r ApiKbDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.KbDestroyExecute(r)
}

/*
KbDestroy Method for KbDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kbId A UUID string identifying this knowledge base.
 @return ApiKbDestroyRequest
*/
func (a *KbAPIService) KbDestroy(ctx context.Context, kbId string) ApiKbDestroyRequest {
	return ApiKbDestroyRequest{
		ApiService: a,
		ctx: ctx,
		kbId: kbId,
	}
}

// Execute executes the request
func (a *KbAPIService) KbDestroyExecute(r ApiKbDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb/{kbId}"
	localVarPath = strings.Replace(localVarPath, "{"+"kbId"+"}", url.PathEscape(parameterValueToString(r.kbId, "kbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKbDocumentsChunksRetrieveRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	documentId string
	kbId string
}

func (r ApiKbDocumentsChunksRetrieveRequest) Execute() (*http.Response, error) {
	return r.ApiService.KbDocumentsChunksRetrieveExecute(r)
}

/*
KbDocumentsChunksRetrieve Method for KbDocumentsChunksRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param documentId
 @param kbId
 @return ApiKbDocumentsChunksRetrieveRequest
*/
func (a *KbAPIService) KbDocumentsChunksRetrieve(ctx context.Context, documentId string, kbId string) ApiKbDocumentsChunksRetrieveRequest {
	return ApiKbDocumentsChunksRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		documentId: documentId,
		kbId: kbId,
	}
}

// Execute executes the request
func (a *KbAPIService) KbDocumentsChunksRetrieveExecute(r ApiKbDocumentsChunksRetrieveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbDocumentsChunksRetrieve")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb/{kbId}/documents/{documentId}/chunks"
	localVarPath = strings.Replace(localVarPath, "{"+"documentId"+"}", url.PathEscape(parameterValueToString(r.documentId, "documentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kbId"+"}", url.PathEscape(parameterValueToString(r.kbId, "kbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKbDocumentsCreateRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	kbId string
	name *string
	description *string
	type_ *string
	sourceUri *string
	chunkStrategy *map[string]interface{}
}

func (r ApiKbDocumentsCreateRequest) Name(name string) ApiKbDocumentsCreateRequest {
	r.name = &name
	return r
}

func (r ApiKbDocumentsCreateRequest) Description(description string) ApiKbDocumentsCreateRequest {
	r.description = &description
	return r
}

func (r ApiKbDocumentsCreateRequest) Type_(type_ string) ApiKbDocumentsCreateRequest {
	r.type_ = &type_
	return r
}

func (r ApiKbDocumentsCreateRequest) SourceUri(sourceUri string) ApiKbDocumentsCreateRequest {
	r.sourceUri = &sourceUri
	return r
}

func (r ApiKbDocumentsCreateRequest) ChunkStrategy(chunkStrategy map[string]interface{}) ApiKbDocumentsCreateRequest {
	r.chunkStrategy = &chunkStrategy
	return r
}

func (r ApiKbDocumentsCreateRequest) Execute() (*Document, *http.Response, error) {
	return r.ApiService.KbDocumentsCreateExecute(r)
}

/*
KbDocumentsCreate Method for KbDocumentsCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kbId
 @return ApiKbDocumentsCreateRequest
*/
func (a *KbAPIService) KbDocumentsCreate(ctx context.Context, kbId string) ApiKbDocumentsCreateRequest {
	return ApiKbDocumentsCreateRequest{
		ApiService: a,
		ctx: ctx,
		kbId: kbId,
	}
}

// Execute executes the request
//  @return Document
func (a *KbAPIService) KbDocumentsCreateExecute(r ApiKbDocumentsCreateRequest) (*Document, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Document
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbDocumentsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb/{kbId}/documents"
	localVarPath = strings.Replace(localVarPath, "{"+"kbId"+"}", url.PathEscape(parameterValueToString(r.kbId, "kbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data", "application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "description", r.description, "", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "", "")
	}
	if r.sourceUri != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "source_uri", r.sourceUri, "", "")
	}
	if r.chunkStrategy != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "chunk_strategy", r.chunkStrategy, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKbDocumentsDestroyRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	documentId string
	kbId string
}

func (r ApiKbDocumentsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.KbDocumentsDestroyExecute(r)
}

/*
KbDocumentsDestroy Method for KbDocumentsDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param documentId
 @param kbId
 @return ApiKbDocumentsDestroyRequest
*/
func (a *KbAPIService) KbDocumentsDestroy(ctx context.Context, documentId string, kbId string) ApiKbDocumentsDestroyRequest {
	return ApiKbDocumentsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		documentId: documentId,
		kbId: kbId,
	}
}

// Execute executes the request
func (a *KbAPIService) KbDocumentsDestroyExecute(r ApiKbDocumentsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbDocumentsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb/{kbId}/documents/{documentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"documentId"+"}", url.PathEscape(parameterValueToString(r.documentId, "documentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kbId"+"}", url.PathEscape(parameterValueToString(r.kbId, "kbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKbDocumentsListRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	kbId string
	ordering *string
	page *int64
	pageSize *int64
	search *string
}

// Which field to use when ordering the results.
func (r ApiKbDocumentsListRequest) Ordering(ordering string) ApiKbDocumentsListRequest {
	r.ordering = &ordering
	return r
}

// A page number within the paginated result set.
func (r ApiKbDocumentsListRequest) Page(page int64) ApiKbDocumentsListRequest {
	r.page = &page
	return r
}

// Number of results to return per page.
func (r ApiKbDocumentsListRequest) PageSize(pageSize int64) ApiKbDocumentsListRequest {
	r.pageSize = &pageSize
	return r
}

// A search term.
func (r ApiKbDocumentsListRequest) Search(search string) ApiKbDocumentsListRequest {
	r.search = &search
	return r
}

func (r ApiKbDocumentsListRequest) Execute() (*PaginatedDocumentList, *http.Response, error) {
	return r.ApiService.KbDocumentsListExecute(r)
}

/*
KbDocumentsList Method for KbDocumentsList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kbId
 @return ApiKbDocumentsListRequest
*/
func (a *KbAPIService) KbDocumentsList(ctx context.Context, kbId string) ApiKbDocumentsListRequest {
	return ApiKbDocumentsListRequest{
		ApiService: a,
		ctx: ctx,
		kbId: kbId,
	}
}

// Execute executes the request
//  @return PaginatedDocumentList
func (a *KbAPIService) KbDocumentsListExecute(r ApiKbDocumentsListRequest) (*PaginatedDocumentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDocumentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbDocumentsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb/{kbId}/documents"
	localVarPath = strings.Replace(localVarPath, "{"+"kbId"+"}", url.PathEscape(parameterValueToString(r.kbId, "kbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKbDocumentsRetrieveRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	documentId string
	kbId string
}

func (r ApiKbDocumentsRetrieveRequest) Execute() (*Document, *http.Response, error) {
	return r.ApiService.KbDocumentsRetrieveExecute(r)
}

/*
KbDocumentsRetrieve Method for KbDocumentsRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param documentId
 @param kbId
 @return ApiKbDocumentsRetrieveRequest
*/
func (a *KbAPIService) KbDocumentsRetrieve(ctx context.Context, documentId string, kbId string) ApiKbDocumentsRetrieveRequest {
	return ApiKbDocumentsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		documentId: documentId,
		kbId: kbId,
	}
}

// Execute executes the request
//  @return Document
func (a *KbAPIService) KbDocumentsRetrieveExecute(r ApiKbDocumentsRetrieveRequest) (*Document, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Document
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbDocumentsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb/{kbId}/documents/{documentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"documentId"+"}", url.PathEscape(parameterValueToString(r.documentId, "documentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kbId"+"}", url.PathEscape(parameterValueToString(r.kbId, "kbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKbDocumentsUpdateRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	documentId string
	kbId string
	name *string
	description *string
	type_ *string
	sourceUri *string
	chunkStrategy *map[string]interface{}
}

func (r ApiKbDocumentsUpdateRequest) Name(name string) ApiKbDocumentsUpdateRequest {
	r.name = &name
	return r
}

func (r ApiKbDocumentsUpdateRequest) Description(description string) ApiKbDocumentsUpdateRequest {
	r.description = &description
	return r
}

func (r ApiKbDocumentsUpdateRequest) Type_(type_ string) ApiKbDocumentsUpdateRequest {
	r.type_ = &type_
	return r
}

func (r ApiKbDocumentsUpdateRequest) SourceUri(sourceUri string) ApiKbDocumentsUpdateRequest {
	r.sourceUri = &sourceUri
	return r
}

func (r ApiKbDocumentsUpdateRequest) ChunkStrategy(chunkStrategy map[string]interface{}) ApiKbDocumentsUpdateRequest {
	r.chunkStrategy = &chunkStrategy
	return r
}

func (r ApiKbDocumentsUpdateRequest) Execute() (*Document, *http.Response, error) {
	return r.ApiService.KbDocumentsUpdateExecute(r)
}

/*
KbDocumentsUpdate Method for KbDocumentsUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param documentId
 @param kbId
 @return ApiKbDocumentsUpdateRequest
*/
func (a *KbAPIService) KbDocumentsUpdate(ctx context.Context, documentId string, kbId string) ApiKbDocumentsUpdateRequest {
	return ApiKbDocumentsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		documentId: documentId,
		kbId: kbId,
	}
}

// Execute executes the request
//  @return Document
func (a *KbAPIService) KbDocumentsUpdateExecute(r ApiKbDocumentsUpdateRequest) (*Document, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Document
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbDocumentsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb/{kbId}/documents/{documentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"documentId"+"}", url.PathEscape(parameterValueToString(r.documentId, "documentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kbId"+"}", url.PathEscape(parameterValueToString(r.kbId, "kbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data", "application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "description", r.description, "", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "", "")
	}
	if r.sourceUri != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "source_uri", r.sourceUri, "", "")
	}
	if r.chunkStrategy != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "chunk_strategy", r.chunkStrategy, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKbListRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	ordering *string
	page *int64
	pageSize *int64
	search *string
}

// Which field to use when ordering the results.
func (r ApiKbListRequest) Ordering(ordering string) ApiKbListRequest {
	r.ordering = &ordering
	return r
}

// A page number within the paginated result set.
func (r ApiKbListRequest) Page(page int64) ApiKbListRequest {
	r.page = &page
	return r
}

// Number of results to return per page.
func (r ApiKbListRequest) PageSize(pageSize int64) ApiKbListRequest {
	r.pageSize = &pageSize
	return r
}

// A search term.
func (r ApiKbListRequest) Search(search string) ApiKbListRequest {
	r.search = &search
	return r
}

func (r ApiKbListRequest) Execute() (*PaginatedKnowledgeBaseList, *http.Response, error) {
	return r.ApiService.KbListExecute(r)
}

/*
KbList Method for KbList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiKbListRequest
*/
func (a *KbAPIService) KbList(ctx context.Context) ApiKbListRequest {
	return ApiKbListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedKnowledgeBaseList
func (a *KbAPIService) KbListExecute(r ApiKbListRequest) (*PaginatedKnowledgeBaseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedKnowledgeBaseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKbPartialUpdateRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	kbId string
	patchedKnowledgeBaseRequest *PatchedKnowledgeBaseRequest
}

func (r ApiKbPartialUpdateRequest) PatchedKnowledgeBaseRequest(patchedKnowledgeBaseRequest PatchedKnowledgeBaseRequest) ApiKbPartialUpdateRequest {
	r.patchedKnowledgeBaseRequest = &patchedKnowledgeBaseRequest
	return r
}

func (r ApiKbPartialUpdateRequest) Execute() (*KnowledgeBase, *http.Response, error) {
	return r.ApiService.KbPartialUpdateExecute(r)
}

/*
KbPartialUpdate Method for KbPartialUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kbId A UUID string identifying this knowledge base.
 @return ApiKbPartialUpdateRequest
*/
func (a *KbAPIService) KbPartialUpdate(ctx context.Context, kbId string) ApiKbPartialUpdateRequest {
	return ApiKbPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		kbId: kbId,
	}
}

// Execute executes the request
//  @return KnowledgeBase
func (a *KbAPIService) KbPartialUpdateExecute(r ApiKbPartialUpdateRequest) (*KnowledgeBase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb/{kbId}"
	localVarPath = strings.Replace(localVarPath, "{"+"kbId"+"}", url.PathEscape(parameterValueToString(r.kbId, "kbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedKnowledgeBaseRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKbRetrieveRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	kbId string
}

func (r ApiKbRetrieveRequest) Execute() (*KnowledgeBase, *http.Response, error) {
	return r.ApiService.KbRetrieveExecute(r)
}

/*
KbRetrieve Method for KbRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kbId A UUID string identifying this knowledge base.
 @return ApiKbRetrieveRequest
*/
func (a *KbAPIService) KbRetrieve(ctx context.Context, kbId string) ApiKbRetrieveRequest {
	return ApiKbRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		kbId: kbId,
	}
}

// Execute executes the request
//  @return KnowledgeBase
func (a *KbAPIService) KbRetrieveExecute(r ApiKbRetrieveRequest) (*KnowledgeBase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb/{kbId}"
	localVarPath = strings.Replace(localVarPath, "{"+"kbId"+"}", url.PathEscape(parameterValueToString(r.kbId, "kbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKbUpdateRequest struct {
	ctx context.Context
	ApiService *KbAPIService
	kbId string
	knowledgeBaseRequest *KnowledgeBaseRequest
}

func (r ApiKbUpdateRequest) KnowledgeBaseRequest(knowledgeBaseRequest KnowledgeBaseRequest) ApiKbUpdateRequest {
	r.knowledgeBaseRequest = &knowledgeBaseRequest
	return r
}

func (r ApiKbUpdateRequest) Execute() (*KnowledgeBase, *http.Response, error) {
	return r.ApiService.KbUpdateExecute(r)
}

/*
KbUpdate Method for KbUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kbId A UUID string identifying this knowledge base.
 @return ApiKbUpdateRequest
*/
func (a *KbAPIService) KbUpdate(ctx context.Context, kbId string) ApiKbUpdateRequest {
	return ApiKbUpdateRequest{
		ApiService: a,
		ctx: ctx,
		kbId: kbId,
	}
}

// Execute executes the request
//  @return KnowledgeBase
func (a *KbAPIService) KbUpdateExecute(r ApiKbUpdateRequest) (*KnowledgeBase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KbAPIService.KbUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/workspace/ai/kb/{kbId}"
	localVarPath = strings.Replace(localVarPath, "{"+"kbId"+"}", url.PathEscape(parameterValueToString(r.kbId, "kbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeBaseRequest == nil {
		return localVarReturnValue, nil, reportError("knowledgeBaseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeBaseRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ai-studio-api

REST API OpenAPI documentation for the ai-studio-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aistudioapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Chunk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Chunk{}

// Chunk struct for Chunk
type Chunk struct {
	ChunkId int64 `json:"chunk_id"`
	DocumentId string `json:"document_id"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Embedding map[string]interface{} `json:"embedding,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Content string `json:"content"`
}

type _Chunk Chunk

// NewChunk instantiates a new Chunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChunk(chunkId int64, documentId string, content string) *Chunk {
	this := Chunk{}
	this.ChunkId = chunkId
	this.DocumentId = documentId
	this.Content = content
	return &this
}

// NewChunkWithDefaults instantiates a new Chunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChunkWithDefaults() *Chunk {
	this := Chunk{}
	return &this
}

// GetChunkId returns the ChunkId field value
func (o *Chunk) GetChunkId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ChunkId
}

// GetChunkIdOk returns a tuple with the ChunkId field value
// and a boolean to check if the value has been set.
func (o *Chunk) GetChunkIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChunkId, true
}

// SetChunkId sets field value
func (o *Chunk) SetChunkId(v int64) {
	o.ChunkId = v
}

// GetDocumentId returns the DocumentId field value
func (o *Chunk) GetDocumentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value
// and a boolean to check if the value has been set.
func (o *Chunk) GetDocumentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentId, true
}

// SetDocumentId sets field value
func (o *Chunk) SetDocumentId(v string) {
	o.DocumentId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Chunk) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chunk) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Chunk) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Chunk) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Chunk) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chunk) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Chunk) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Chunk) SetDescription(v string) {
	o.Description = &v
}

// GetEmbedding returns the Embedding field value if set, zero value otherwise.
func (o *Chunk) GetEmbedding() map[string]interface{} {
	if o == nil || IsNil(o.Embedding) {
		var ret map[string]interface{}
		return ret
	}
	return o.Embedding
}

// GetEmbeddingOk returns a tuple with the Embedding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chunk) GetEmbeddingOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Embedding) {
		return map[string]interface{}{}, false
	}
	return o.Embedding, true
}

// HasEmbedding returns a boolean if a field has been set.
func (o *Chunk) HasEmbedding() bool {
	if o != nil && !IsNil(o.Embedding) {
		return true
	}

	return false
}

// SetEmbedding gets a reference to the given map[string]interface{} and assigns it to the Embedding field.
func (o *Chunk) SetEmbedding(v map[string]interface{}) {
	o.Embedding = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Chunk) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chunk) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Chunk) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Chunk) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetContent returns the Content field value
func (o *Chunk) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Chunk) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Chunk) SetContent(v string) {
	o.Content = v
}

func (o Chunk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Chunk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chunk_id"] = o.ChunkId
	toSerialize["document_id"] = o.DocumentId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Embedding) {
		toSerialize["embedding"] = o.Embedding
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

func (o *Chunk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chunk_id",
		"document_id",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChunk := _Chunk{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChunk)

	if err != nil {
		return err
	}

	*o = Chunk(varChunk)

	return err
}

type NullableChunk struct {
	value *Chunk
	isSet bool
}

func (v NullableChunk) Get() *Chunk {
	return v.value
}

func (v *NullableChunk) Set(val *Chunk) {
	v.value = val
	v.isSet = true
}

func (v NullableChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChunk(val *Chunk) *NullableChunk {
	return &NullableChunk{value: val, isSet: true}
}

func (v NullableChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



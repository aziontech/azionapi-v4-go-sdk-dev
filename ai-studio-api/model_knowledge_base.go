/*
ai-studio-api

REST API OpenAPI documentation for the ai-studio-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aistudioapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the KnowledgeBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KnowledgeBase{}

// KnowledgeBase struct for KnowledgeBase
type KnowledgeBase struct {
	KbId string `json:"kb_id"`
	AccountId NullableInt64 `json:"account_id"`
	LastEditor string `json:"last_editor"`
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	// * `text-embedding-3-small` - text-embedding-3-small
	EmbeddingModel *string `json:"embedding_model,omitempty"`
	EdgesqlDbId string `json:"edgesql_db_id"`
	LastModified time.Time `json:"last_modified"`
}

type _KnowledgeBase KnowledgeBase

// NewKnowledgeBase instantiates a new KnowledgeBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKnowledgeBase(kbId string, accountId NullableInt64, lastEditor string, name string, edgesqlDbId string, lastModified time.Time) *KnowledgeBase {
	this := KnowledgeBase{}
	this.KbId = kbId
	this.AccountId = accountId
	this.LastEditor = lastEditor
	this.Name = name
	this.EdgesqlDbId = edgesqlDbId
	this.LastModified = lastModified
	return &this
}

// NewKnowledgeBaseWithDefaults instantiates a new KnowledgeBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKnowledgeBaseWithDefaults() *KnowledgeBase {
	this := KnowledgeBase{}
	return &this
}

// GetKbId returns the KbId field value
func (o *KnowledgeBase) GetKbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KbId
}

// GetKbIdOk returns a tuple with the KbId field value
// and a boolean to check if the value has been set.
func (o *KnowledgeBase) GetKbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KbId, true
}

// SetKbId sets field value
func (o *KnowledgeBase) SetKbId(v string) {
	o.KbId = v
}

// GetAccountId returns the AccountId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *KnowledgeBase) GetAccountId() int64 {
	if o == nil || o.AccountId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KnowledgeBase) GetAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// SetAccountId sets field value
func (o *KnowledgeBase) SetAccountId(v int64) {
	o.AccountId.Set(&v)
}

// GetLastEditor returns the LastEditor field value
func (o *KnowledgeBase) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *KnowledgeBase) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *KnowledgeBase) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetName returns the Name field value
func (o *KnowledgeBase) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KnowledgeBase) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KnowledgeBase) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *KnowledgeBase) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBase) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *KnowledgeBase) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *KnowledgeBase) SetDescription(v string) {
	o.Description = &v
}

// GetEmbeddingModel returns the EmbeddingModel field value if set, zero value otherwise.
func (o *KnowledgeBase) GetEmbeddingModel() string {
	if o == nil || IsNil(o.EmbeddingModel) {
		var ret string
		return ret
	}
	return *o.EmbeddingModel
}

// GetEmbeddingModelOk returns a tuple with the EmbeddingModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBase) GetEmbeddingModelOk() (*string, bool) {
	if o == nil || IsNil(o.EmbeddingModel) {
		return nil, false
	}
	return o.EmbeddingModel, true
}

// HasEmbeddingModel returns a boolean if a field has been set.
func (o *KnowledgeBase) HasEmbeddingModel() bool {
	if o != nil && !IsNil(o.EmbeddingModel) {
		return true
	}

	return false
}

// SetEmbeddingModel gets a reference to the given string and assigns it to the EmbeddingModel field.
func (o *KnowledgeBase) SetEmbeddingModel(v string) {
	o.EmbeddingModel = &v
}

// GetEdgesqlDbId returns the EdgesqlDbId field value
func (o *KnowledgeBase) GetEdgesqlDbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EdgesqlDbId
}

// GetEdgesqlDbIdOk returns a tuple with the EdgesqlDbId field value
// and a boolean to check if the value has been set.
func (o *KnowledgeBase) GetEdgesqlDbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EdgesqlDbId, true
}

// SetEdgesqlDbId sets field value
func (o *KnowledgeBase) SetEdgesqlDbId(v string) {
	o.EdgesqlDbId = v
}

// GetLastModified returns the LastModified field value
func (o *KnowledgeBase) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *KnowledgeBase) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *KnowledgeBase) SetLastModified(v time.Time) {
	o.LastModified = v
}

func (o KnowledgeBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KnowledgeBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kb_id"] = o.KbId
	toSerialize["account_id"] = o.AccountId.Get()
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EmbeddingModel) {
		toSerialize["embedding_model"] = o.EmbeddingModel
	}
	toSerialize["edgesql_db_id"] = o.EdgesqlDbId
	toSerialize["last_modified"] = o.LastModified
	return toSerialize, nil
}

func (o *KnowledgeBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kb_id",
		"account_id",
		"last_editor",
		"name",
		"edgesql_db_id",
		"last_modified",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKnowledgeBase := _KnowledgeBase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKnowledgeBase)

	if err != nil {
		return err
	}

	*o = KnowledgeBase(varKnowledgeBase)

	return err
}

type NullableKnowledgeBase struct {
	value *KnowledgeBase
	isSet bool
}

func (v NullableKnowledgeBase) Get() *KnowledgeBase {
	return v.value
}

func (v *NullableKnowledgeBase) Set(val *KnowledgeBase) {
	v.value = val
	v.isSet = true
}

func (v NullableKnowledgeBase) IsSet() bool {
	return v.isSet
}

func (v *NullableKnowledgeBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKnowledgeBase(val *KnowledgeBase) *NullableKnowledgeBase {
	return &NullableKnowledgeBase{value: val, isSet: true}
}

func (v NullableKnowledgeBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKnowledgeBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



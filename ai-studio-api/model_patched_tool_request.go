/*
AI-Studio-API

REST API OpenAPI documentation for the AI-Studio-API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aistudioapi

import (
	"encoding/json"
)

// checks if the PatchedToolRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedToolRequest{}

// PatchedToolRequest struct for PatchedToolRequest
type PatchedToolRequest struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Type *string `json:"type,omitempty"`
	JsonSchema map[string]interface{} `json:"json_schema,omitempty"`
	Active *bool `json:"active,omitempty"`
}

// NewPatchedToolRequest instantiates a new PatchedToolRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedToolRequest() *PatchedToolRequest {
	this := PatchedToolRequest{}
	return &this
}

// NewPatchedToolRequestWithDefaults instantiates a new PatchedToolRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedToolRequestWithDefaults() *PatchedToolRequest {
	this := PatchedToolRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedToolRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedToolRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedToolRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedToolRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchedToolRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedToolRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedToolRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchedToolRequest) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PatchedToolRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedToolRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PatchedToolRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PatchedToolRequest) SetType(v string) {
	o.Type = &v
}

// GetJsonSchema returns the JsonSchema field value if set, zero value otherwise.
func (o *PatchedToolRequest) GetJsonSchema() map[string]interface{} {
	if o == nil || IsNil(o.JsonSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.JsonSchema
}

// GetJsonSchemaOk returns a tuple with the JsonSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedToolRequest) GetJsonSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.JsonSchema) {
		return map[string]interface{}{}, false
	}
	return o.JsonSchema, true
}

// HasJsonSchema returns a boolean if a field has been set.
func (o *PatchedToolRequest) HasJsonSchema() bool {
	if o != nil && !IsNil(o.JsonSchema) {
		return true
	}

	return false
}

// SetJsonSchema gets a reference to the given map[string]interface{} and assigns it to the JsonSchema field.
func (o *PatchedToolRequest) SetJsonSchema(v map[string]interface{}) {
	o.JsonSchema = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PatchedToolRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedToolRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PatchedToolRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PatchedToolRequest) SetActive(v bool) {
	o.Active = &v
}

func (o PatchedToolRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedToolRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.JsonSchema) {
		toSerialize["json_schema"] = o.JsonSchema
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullablePatchedToolRequest struct {
	value *PatchedToolRequest
	isSet bool
}

func (v NullablePatchedToolRequest) Get() *PatchedToolRequest {
	return v.value
}

func (v *NullablePatchedToolRequest) Set(val *PatchedToolRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedToolRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedToolRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedToolRequest(val *PatchedToolRequest) *NullablePatchedToolRequest {
	return &NullablePatchedToolRequest{value: val, isSet: true}
}

func (v NullablePatchedToolRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedToolRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
dns-api

REST API OpenAPI documentation for the DNS API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsapi

import (
	"encoding/json"
)

// checks if the PatchedRecordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedRecordRequest{}

// PatchedRecordRequest struct for PatchedRecordRequest
type PatchedRecordRequest struct {
	Description *string `json:"description,omitempty" validate:"regexp=.*"`
	Name *string `json:"name,omitempty" validate:"regexp=^(?:(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_])\\\\.)*(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_]))|@)$"`
	Ttl *int64 `json:"ttl,omitempty"`
	// * `A` - A * `AAAA` - AAAA * `ANAME` - ANAME * `CNAME` - CNAME * `MX` - MX * `NS` - NS * `PTR` - PTR * `SRV` - SRV * `TXT` - TXT * `CAA` - CAA * `DS` - DS
	Type *string `json:"type,omitempty"`
	Rdata []string `json:"rdata,omitempty"`
	// * `simple` - simple * `weighted` - weighted
	Policy *string `json:"policy,omitempty"`
	Weight *int64 `json:"weight,omitempty"`
}

// NewPatchedRecordRequest instantiates a new PatchedRecordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedRecordRequest() *PatchedRecordRequest {
	this := PatchedRecordRequest{}
	return &this
}

// NewPatchedRecordRequestWithDefaults instantiates a new PatchedRecordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedRecordRequestWithDefaults() *PatchedRecordRequest {
	this := PatchedRecordRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchedRecordRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRecordRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedRecordRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchedRecordRequest) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedRecordRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRecordRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedRecordRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedRecordRequest) SetName(v string) {
	o.Name = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *PatchedRecordRequest) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRecordRequest) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *PatchedRecordRequest) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *PatchedRecordRequest) SetTtl(v int64) {
	o.Ttl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PatchedRecordRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRecordRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PatchedRecordRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PatchedRecordRequest) SetType(v string) {
	o.Type = &v
}

// GetRdata returns the Rdata field value if set, zero value otherwise.
func (o *PatchedRecordRequest) GetRdata() []string {
	if o == nil || IsNil(o.Rdata) {
		var ret []string
		return ret
	}
	return o.Rdata
}

// GetRdataOk returns a tuple with the Rdata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRecordRequest) GetRdataOk() ([]string, bool) {
	if o == nil || IsNil(o.Rdata) {
		return nil, false
	}
	return o.Rdata, true
}

// HasRdata returns a boolean if a field has been set.
func (o *PatchedRecordRequest) HasRdata() bool {
	if o != nil && !IsNil(o.Rdata) {
		return true
	}

	return false
}

// SetRdata gets a reference to the given []string and assigns it to the Rdata field.
func (o *PatchedRecordRequest) SetRdata(v []string) {
	o.Rdata = v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *PatchedRecordRequest) GetPolicy() string {
	if o == nil || IsNil(o.Policy) {
		var ret string
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRecordRequest) GetPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *PatchedRecordRequest) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given string and assigns it to the Policy field.
func (o *PatchedRecordRequest) SetPolicy(v string) {
	o.Policy = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *PatchedRecordRequest) GetWeight() int64 {
	if o == nil || IsNil(o.Weight) {
		var ret int64
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRecordRequest) GetWeightOk() (*int64, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *PatchedRecordRequest) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int64 and assigns it to the Weight field.
func (o *PatchedRecordRequest) SetWeight(v int64) {
	o.Weight = &v
}

func (o PatchedRecordRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedRecordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Rdata) {
		toSerialize["rdata"] = o.Rdata
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return toSerialize, nil
}

type NullablePatchedRecordRequest struct {
	value *PatchedRecordRequest
	isSet bool
}

func (v NullablePatchedRecordRequest) Get() *PatchedRecordRequest {
	return v.value
}

func (v *NullablePatchedRecordRequest) Set(val *PatchedRecordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedRecordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedRecordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedRecordRequest(val *PatchedRecordRequest) *NullablePatchedRecordRequest {
	return &NullablePatchedRecordRequest{value: val, isSet: true}
}

func (v NullablePatchedRecordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedRecordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



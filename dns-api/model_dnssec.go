/*
dns-api

REST API OpenAPI documentation for the DNS API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DNSSEC type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSSEC{}

// DNSSEC struct for DNSSEC
type DNSSEC struct {
	Enabled bool `json:"enabled"`
	// * `unconfigured` - unconfigured * `waiting` - waiting * `ready` - ready
	Status string `json:"status"`
	DelegationSigner NullableDelegationSigner `json:"delegation_signer"`
}

type _DNSSEC DNSSEC

// NewDNSSEC instantiates a new DNSSEC object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSSEC(enabled bool, status string, delegationSigner NullableDelegationSigner) *DNSSEC {
	this := DNSSEC{}
	this.Enabled = enabled
	this.Status = status
	this.DelegationSigner = delegationSigner
	return &this
}

// NewDNSSECWithDefaults instantiates a new DNSSEC object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSSECWithDefaults() *DNSSEC {
	this := DNSSEC{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *DNSSEC) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DNSSEC) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DNSSEC) SetEnabled(v bool) {
	o.Enabled = v
}

// GetStatus returns the Status field value
func (o *DNSSEC) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DNSSEC) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DNSSEC) SetStatus(v string) {
	o.Status = v
}

// GetDelegationSigner returns the DelegationSigner field value
// If the value is explicit nil, the zero value for DelegationSigner will be returned
func (o *DNSSEC) GetDelegationSigner() DelegationSigner {
	if o == nil || o.DelegationSigner.Get() == nil {
		var ret DelegationSigner
		return ret
	}

	return *o.DelegationSigner.Get()
}

// GetDelegationSignerOk returns a tuple with the DelegationSigner field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DNSSEC) GetDelegationSignerOk() (*DelegationSigner, bool) {
	if o == nil {
		return nil, false
	}
	return o.DelegationSigner.Get(), o.DelegationSigner.IsSet()
}

// SetDelegationSigner sets field value
func (o *DNSSEC) SetDelegationSigner(v DelegationSigner) {
	o.DelegationSigner.Set(&v)
}

func (o DNSSEC) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSSEC) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["status"] = o.Status
	toSerialize["delegation_signer"] = o.DelegationSigner.Get()
	return toSerialize, nil
}

func (o *DNSSEC) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"status",
		"delegation_signer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDNSSEC := _DNSSEC{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDNSSEC)

	if err != nil {
		return err
	}

	*o = DNSSEC(varDNSSEC)

	return err
}

type NullableDNSSEC struct {
	value *DNSSEC
	isSet bool
}

func (v NullableDNSSEC) Get() *DNSSEC {
	return v.value
}

func (v *NullableDNSSEC) Set(val *DNSSEC) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSSEC) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSSEC) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSSEC(val *DNSSEC) *NullableDNSSEC {
	return &NullableDNSSEC{value: val, isSet: true}
}

func (v NullableDNSSEC) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSSEC) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



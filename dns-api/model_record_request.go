/*
dns-api

REST API OpenAPI documentation for the DNS API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordRequest{}

// RecordRequest struct for RecordRequest
type RecordRequest struct {
	Description *string `json:"description,omitempty" validate:"regexp=.*"`
	Name string `json:"name" validate:"regexp=^(?:(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_])\\\\.)*(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_]))|@)$"`
	Ttl *int64 `json:"ttl,omitempty"`
	// * `A` - A * `AAAA` - AAAA * `ANAME` - ANAME * `CNAME` - CNAME * `MX` - MX * `NS` - NS * `PTR` - PTR * `SRV` - SRV * `TXT` - TXT * `CAA` - CAA * `DS` - DS
	Type string `json:"type"`
	Rdata []string `json:"rdata"`
	// * `simple` - simple * `weighted` - weighted
	Policy *string `json:"policy,omitempty"`
	Weight *int64 `json:"weight,omitempty"`
}

type _RecordRequest RecordRequest

// NewRecordRequest instantiates a new RecordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordRequest(name string, type_ string, rdata []string) *RecordRequest {
	this := RecordRequest{}
	this.Name = name
	this.Type = type_
	this.Rdata = rdata
	return &this
}

// NewRecordRequestWithDefaults instantiates a new RecordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordRequestWithDefaults() *RecordRequest {
	this := RecordRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RecordRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RecordRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RecordRequest) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *RecordRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RecordRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RecordRequest) SetName(v string) {
	o.Name = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordRequest) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRequest) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordRequest) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *RecordRequest) SetTtl(v int64) {
	o.Ttl = &v
}

// GetType returns the Type field value
func (o *RecordRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RecordRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RecordRequest) SetType(v string) {
	o.Type = v
}

// GetRdata returns the Rdata field value
func (o *RecordRequest) GetRdata() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Rdata
}

// GetRdataOk returns a tuple with the Rdata field value
// and a boolean to check if the value has been set.
func (o *RecordRequest) GetRdataOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rdata, true
}

// SetRdata sets field value
func (o *RecordRequest) SetRdata(v []string) {
	o.Rdata = v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *RecordRequest) GetPolicy() string {
	if o == nil || IsNil(o.Policy) {
		var ret string
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRequest) GetPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *RecordRequest) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given string and assigns it to the Policy field.
func (o *RecordRequest) SetPolicy(v string) {
	o.Policy = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *RecordRequest) GetWeight() int64 {
	if o == nil || IsNil(o.Weight) {
		var ret int64
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRequest) GetWeightOk() (*int64, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *RecordRequest) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int64 and assigns it to the Weight field.
func (o *RecordRequest) SetWeight(v int64) {
	o.Weight = &v
}

func (o RecordRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	toSerialize["type"] = o.Type
	toSerialize["rdata"] = o.Rdata
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return toSerialize, nil
}

func (o *RecordRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"rdata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecordRequest := _RecordRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecordRequest)

	if err != nil {
		return err
	}

	*o = RecordRequest(varRecordRequest)

	return err
}

type NullableRecordRequest struct {
	value *RecordRequest
	isSet bool
}

func (v NullableRecordRequest) Get() *RecordRequest {
	return v.value
}

func (v *NullableRecordRequest) Set(val *RecordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordRequest(val *RecordRequest) *NullableRecordRequest {
	return &NullableRecordRequest{value: val, isSet: true}
}

func (v NullableRecordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



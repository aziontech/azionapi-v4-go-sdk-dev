/*
dns-api

REST API OpenAPI documentation for the DNS API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DelegationSigner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelegationSigner{}

// DelegationSigner struct for DelegationSigner
type DelegationSigner struct {
	AlgorithmType AlgType `json:"algorithm_type"`
	Digest string `json:"digest"`
	DigestType AlgType `json:"digest_type"`
	KeyTag int64 `json:"key_tag"`
}

type _DelegationSigner DelegationSigner

// NewDelegationSigner instantiates a new DelegationSigner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelegationSigner(algorithmType AlgType, digest string, digestType AlgType, keyTag int64) *DelegationSigner {
	this := DelegationSigner{}
	this.AlgorithmType = algorithmType
	this.Digest = digest
	this.DigestType = digestType
	this.KeyTag = keyTag
	return &this
}

// NewDelegationSignerWithDefaults instantiates a new DelegationSigner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelegationSignerWithDefaults() *DelegationSigner {
	this := DelegationSigner{}
	return &this
}

// GetAlgorithmType returns the AlgorithmType field value
func (o *DelegationSigner) GetAlgorithmType() AlgType {
	if o == nil {
		var ret AlgType
		return ret
	}

	return o.AlgorithmType
}

// GetAlgorithmTypeOk returns a tuple with the AlgorithmType field value
// and a boolean to check if the value has been set.
func (o *DelegationSigner) GetAlgorithmTypeOk() (*AlgType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlgorithmType, true
}

// SetAlgorithmType sets field value
func (o *DelegationSigner) SetAlgorithmType(v AlgType) {
	o.AlgorithmType = v
}

// GetDigest returns the Digest field value
func (o *DelegationSigner) GetDigest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Digest
}

// GetDigestOk returns a tuple with the Digest field value
// and a boolean to check if the value has been set.
func (o *DelegationSigner) GetDigestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digest, true
}

// SetDigest sets field value
func (o *DelegationSigner) SetDigest(v string) {
	o.Digest = v
}

// GetDigestType returns the DigestType field value
func (o *DelegationSigner) GetDigestType() AlgType {
	if o == nil {
		var ret AlgType
		return ret
	}

	return o.DigestType
}

// GetDigestTypeOk returns a tuple with the DigestType field value
// and a boolean to check if the value has been set.
func (o *DelegationSigner) GetDigestTypeOk() (*AlgType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DigestType, true
}

// SetDigestType sets field value
func (o *DelegationSigner) SetDigestType(v AlgType) {
	o.DigestType = v
}

// GetKeyTag returns the KeyTag field value
func (o *DelegationSigner) GetKeyTag() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.KeyTag
}

// GetKeyTagOk returns a tuple with the KeyTag field value
// and a boolean to check if the value has been set.
func (o *DelegationSigner) GetKeyTagOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyTag, true
}

// SetKeyTag sets field value
func (o *DelegationSigner) SetKeyTag(v int64) {
	o.KeyTag = v
}

func (o DelegationSigner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelegationSigner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["algorithm_type"] = o.AlgorithmType
	toSerialize["digest"] = o.Digest
	toSerialize["digest_type"] = o.DigestType
	toSerialize["key_tag"] = o.KeyTag
	return toSerialize, nil
}

func (o *DelegationSigner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"algorithm_type",
		"digest",
		"digest_type",
		"key_tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDelegationSigner := _DelegationSigner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDelegationSigner)

	if err != nil {
		return err
	}

	*o = DelegationSigner(varDelegationSigner)

	return err
}

type NullableDelegationSigner struct {
	value *DelegationSigner
	isSet bool
}

func (v NullableDelegationSigner) Get() *DelegationSigner {
	return v.value
}

func (v *NullableDelegationSigner) Set(val *DelegationSigner) {
	v.value = val
	v.isSet = true
}

func (v NullableDelegationSigner) IsSet() bool {
	return v.isSet
}

func (v *NullableDelegationSigner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelegationSigner(val *DelegationSigner) *NullableDelegationSigner {
	return &NullableDelegationSigner{value: val, isSet: true}
}

func (v NullableDelegationSigner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelegationSigner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



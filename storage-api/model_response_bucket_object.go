/*
storage-api

REST API OpenAPI documentation for the Storage

API version: 1.0.0 (v1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storageapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResponseBucketObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseBucketObject{}

// ResponseBucketObject struct for ResponseBucketObject
type ResponseBucketObject struct {
	ContinuationToken NullableString `json:"continuation_token"`
	Results []BucketObject `json:"results"`
}

type _ResponseBucketObject ResponseBucketObject

// NewResponseBucketObject instantiates a new ResponseBucketObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseBucketObject(continuationToken NullableString, results []BucketObject) *ResponseBucketObject {
	this := ResponseBucketObject{}
	this.ContinuationToken = continuationToken
	this.Results = results
	return &this
}

// NewResponseBucketObjectWithDefaults instantiates a new ResponseBucketObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseBucketObjectWithDefaults() *ResponseBucketObject {
	this := ResponseBucketObject{}
	return &this
}

// GetContinuationToken returns the ContinuationToken field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResponseBucketObject) GetContinuationToken() string {
	if o == nil || o.ContinuationToken.Get() == nil {
		var ret string
		return ret
	}

	return *o.ContinuationToken.Get()
}

// GetContinuationTokenOk returns a tuple with the ContinuationToken field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseBucketObject) GetContinuationTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinuationToken.Get(), o.ContinuationToken.IsSet()
}

// SetContinuationToken sets field value
func (o *ResponseBucketObject) SetContinuationToken(v string) {
	o.ContinuationToken.Set(&v)
}

// GetResults returns the Results field value
func (o *ResponseBucketObject) GetResults() []BucketObject {
	if o == nil {
		var ret []BucketObject
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *ResponseBucketObject) GetResultsOk() ([]BucketObject, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *ResponseBucketObject) SetResults(v []BucketObject) {
	o.Results = v
}

func (o ResponseBucketObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseBucketObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["continuation_token"] = o.ContinuationToken.Get()
	toSerialize["results"] = o.Results
	return toSerialize, nil
}

func (o *ResponseBucketObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"continuation_token",
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseBucketObject := _ResponseBucketObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResponseBucketObject)

	if err != nil {
		return err
	}

	*o = ResponseBucketObject(varResponseBucketObject)

	return err
}

type NullableResponseBucketObject struct {
	value *ResponseBucketObject
	isSet bool
}

func (v NullableResponseBucketObject) Get() *ResponseBucketObject {
	return v.value
}

func (v *NullableResponseBucketObject) Set(val *ResponseBucketObject) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseBucketObject) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseBucketObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseBucketObject(val *ResponseBucketObject) *NullableResponseBucketObject {
	return &NullableResponseBucketObject{value: val, isSet: true}
}

func (v NullableResponseBucketObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseBucketObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



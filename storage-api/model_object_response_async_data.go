/*
storage-api

REST API OpenAPI documentation for the Storage

API version: 1.0.0 (v1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storageapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectResponseAsyncData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectResponseAsyncData{}

// ObjectResponseAsyncData struct for ObjectResponseAsyncData
type ObjectResponseAsyncData struct {
	ObjectKey string `json:"object_key"`
}

type _ObjectResponseAsyncData ObjectResponseAsyncData

// NewObjectResponseAsyncData instantiates a new ObjectResponseAsyncData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectResponseAsyncData(objectKey string) *ObjectResponseAsyncData {
	this := ObjectResponseAsyncData{}
	this.ObjectKey = objectKey
	return &this
}

// NewObjectResponseAsyncDataWithDefaults instantiates a new ObjectResponseAsyncData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectResponseAsyncDataWithDefaults() *ObjectResponseAsyncData {
	this := ObjectResponseAsyncData{}
	return &this
}

// GetObjectKey returns the ObjectKey field value
func (o *ObjectResponseAsyncData) GetObjectKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectKey
}

// GetObjectKeyOk returns a tuple with the ObjectKey field value
// and a boolean to check if the value has been set.
func (o *ObjectResponseAsyncData) GetObjectKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectKey, true
}

// SetObjectKey sets field value
func (o *ObjectResponseAsyncData) SetObjectKey(v string) {
	o.ObjectKey = v
}

func (o ObjectResponseAsyncData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectResponseAsyncData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object_key"] = o.ObjectKey
	return toSerialize, nil
}

func (o *ObjectResponseAsyncData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectResponseAsyncData := _ObjectResponseAsyncData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectResponseAsyncData)

	if err != nil {
		return err
	}

	*o = ObjectResponseAsyncData(varObjectResponseAsyncData)

	return err
}

type NullableObjectResponseAsyncData struct {
	value *ObjectResponseAsyncData
	isSet bool
}

func (v NullableObjectResponseAsyncData) Get() *ObjectResponseAsyncData {
	return v.value
}

func (v *NullableObjectResponseAsyncData) Set(val *ObjectResponseAsyncData) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectResponseAsyncData) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectResponseAsyncData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectResponseAsyncData(val *ObjectResponseAsyncData) *NullableObjectResponseAsyncData {
	return &NullableObjectResponseAsyncData{value: val, isSet: true}
}

func (v NullableObjectResponseAsyncData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectResponseAsyncData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
storage-api

REST API OpenAPI documentation for the Storage

API version: 1.0.0 (v1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storageapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the BucketCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BucketCreate{}

// BucketCreate struct for BucketCreate
type BucketCreate struct {
	Name string `json:"name"`
	// * `read_only` - read_only * `read_write` - read_write * `restricted` - restricted
	EdgeAccess string `json:"edge_access"`
	LastEditor string `json:"last_editor"`
	LastModified time.Time `json:"last_modified"`
	ProductVersion string `json:"product_version"`
}

type _BucketCreate BucketCreate

// NewBucketCreate instantiates a new BucketCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketCreate(name string, edgeAccess string, lastEditor string, lastModified time.Time, productVersion string) *BucketCreate {
	this := BucketCreate{}
	this.Name = name
	this.EdgeAccess = edgeAccess
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	this.ProductVersion = productVersion
	return &this
}

// NewBucketCreateWithDefaults instantiates a new BucketCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketCreateWithDefaults() *BucketCreate {
	this := BucketCreate{}
	return &this
}

// GetName returns the Name field value
func (o *BucketCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BucketCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BucketCreate) SetName(v string) {
	o.Name = v
}

// GetEdgeAccess returns the EdgeAccess field value
func (o *BucketCreate) GetEdgeAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EdgeAccess
}

// GetEdgeAccessOk returns a tuple with the EdgeAccess field value
// and a boolean to check if the value has been set.
func (o *BucketCreate) GetEdgeAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EdgeAccess, true
}

// SetEdgeAccess sets field value
func (o *BucketCreate) SetEdgeAccess(v string) {
	o.EdgeAccess = v
}

// GetLastEditor returns the LastEditor field value
func (o *BucketCreate) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *BucketCreate) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *BucketCreate) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *BucketCreate) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *BucketCreate) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *BucketCreate) SetLastModified(v time.Time) {
	o.LastModified = v
}

// GetProductVersion returns the ProductVersion field value
func (o *BucketCreate) GetProductVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductVersion
}

// GetProductVersionOk returns a tuple with the ProductVersion field value
// and a boolean to check if the value has been set.
func (o *BucketCreate) GetProductVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductVersion, true
}

// SetProductVersion sets field value
func (o *BucketCreate) SetProductVersion(v string) {
	o.ProductVersion = v
}

func (o BucketCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BucketCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["edge_access"] = o.EdgeAccess
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	toSerialize["product_version"] = o.ProductVersion
	return toSerialize, nil
}

func (o *BucketCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"edge_access",
		"last_editor",
		"last_modified",
		"product_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBucketCreate := _BucketCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBucketCreate)

	if err != nil {
		return err
	}

	*o = BucketCreate(varBucketCreate)

	return err
}

type NullableBucketCreate struct {
	value *BucketCreate
	isSet bool
}

func (v NullableBucketCreate) Get() *BucketCreate {
	return v.value
}

func (v *NullableBucketCreate) Set(val *BucketCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketCreate(val *BucketCreate) *NullableBucketCreate {
	return &NullableBucketCreate{value: val, isSet: true}
}

func (v NullableBucketCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServiceResourceId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceResourceId{}

// ServiceResourceId struct for ServiceResourceId
type ServiceResourceId struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	ContentHash string `json:"content_hash"`
	ContentType *string `json:"content_type,omitempty"`
	Trigger *ServiceResourceIdTrigger `json:"trigger,omitempty"`
	Content *string `json:"content,omitempty"`
	IsTemplate bool `json:"is_template"`
	Active bool `json:"active"`
	FileGroup string `json:"file_group"`
	FileMode string `json:"file_mode"`
	FileOwner string `json:"file_owner"`
	LastEditor string `json:"last_editor"`
	LastModified string `json:"last_modified"`
}

type _ServiceResourceId ServiceResourceId

// NewServiceResourceId instantiates a new ServiceResourceId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceResourceId(id int64, name string, contentHash string, isTemplate bool, active bool, fileGroup string, fileMode string, fileOwner string, lastEditor string, lastModified string) *ServiceResourceId {
	this := ServiceResourceId{}
	this.Id = id
	this.Name = name
	this.ContentHash = contentHash
	this.IsTemplate = isTemplate
	this.Active = active
	this.FileGroup = fileGroup
	this.FileMode = fileMode
	this.FileOwner = fileOwner
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	return &this
}

// NewServiceResourceIdWithDefaults instantiates a new ServiceResourceId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceResourceIdWithDefaults() *ServiceResourceId {
	this := ServiceResourceId{}
	return &this
}

// GetId returns the Id field value
func (o *ServiceResourceId) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceResourceId) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ServiceResourceId) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServiceResourceId) SetName(v string) {
	o.Name = v
}

// GetContentHash returns the ContentHash field value
func (o *ServiceResourceId) GetContentHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentHash
}

// GetContentHashOk returns a tuple with the ContentHash field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetContentHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentHash, true
}

// SetContentHash sets field value
func (o *ServiceResourceId) SetContentHash(v string) {
	o.ContentHash = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *ServiceResourceId) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *ServiceResourceId) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *ServiceResourceId) SetContentType(v string) {
	o.ContentType = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *ServiceResourceId) GetTrigger() ServiceResourceIdTrigger {
	if o == nil || IsNil(o.Trigger) {
		var ret ServiceResourceIdTrigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetTriggerOk() (*ServiceResourceIdTrigger, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *ServiceResourceId) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given ServiceResourceIdTrigger and assigns it to the Trigger field.
func (o *ServiceResourceId) SetTrigger(v ServiceResourceIdTrigger) {
	o.Trigger = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ServiceResourceId) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ServiceResourceId) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ServiceResourceId) SetContent(v string) {
	o.Content = &v
}

// GetIsTemplate returns the IsTemplate field value
func (o *ServiceResourceId) GetIsTemplate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTemplate
}

// GetIsTemplateOk returns a tuple with the IsTemplate field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetIsTemplateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTemplate, true
}

// SetIsTemplate sets field value
func (o *ServiceResourceId) SetIsTemplate(v bool) {
	o.IsTemplate = v
}

// GetActive returns the Active field value
func (o *ServiceResourceId) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *ServiceResourceId) SetActive(v bool) {
	o.Active = v
}

// GetFileGroup returns the FileGroup field value
func (o *ServiceResourceId) GetFileGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileGroup
}

// GetFileGroupOk returns a tuple with the FileGroup field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetFileGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileGroup, true
}

// SetFileGroup sets field value
func (o *ServiceResourceId) SetFileGroup(v string) {
	o.FileGroup = v
}

// GetFileMode returns the FileMode field value
func (o *ServiceResourceId) GetFileMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileMode
}

// GetFileModeOk returns a tuple with the FileMode field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetFileModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileMode, true
}

// SetFileMode sets field value
func (o *ServiceResourceId) SetFileMode(v string) {
	o.FileMode = v
}

// GetFileOwner returns the FileOwner field value
func (o *ServiceResourceId) GetFileOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileOwner
}

// GetFileOwnerOk returns a tuple with the FileOwner field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetFileOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileOwner, true
}

// SetFileOwner sets field value
func (o *ServiceResourceId) SetFileOwner(v string) {
	o.FileOwner = v
}

// GetLastEditor returns the LastEditor field value
func (o *ServiceResourceId) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *ServiceResourceId) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *ServiceResourceId) GetLastModified() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceId) GetLastModifiedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *ServiceResourceId) SetLastModified(v string) {
	o.LastModified = v
}

func (o ServiceResourceId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceResourceId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["content_hash"] = o.ContentHash
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	toSerialize["is_template"] = o.IsTemplate
	toSerialize["active"] = o.Active
	toSerialize["file_group"] = o.FileGroup
	toSerialize["file_mode"] = o.FileMode
	toSerialize["file_owner"] = o.FileOwner
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	return toSerialize, nil
}

func (o *ServiceResourceId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"content_hash",
		"is_template",
		"active",
		"file_group",
		"file_mode",
		"file_owner",
		"last_editor",
		"last_modified",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceResourceId := _ServiceResourceId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceResourceId)

	if err != nil {
		return err
	}

	*o = ServiceResourceId(varServiceResourceId)

	return err
}

type NullableServiceResourceId struct {
	value *ServiceResourceId
	isSet bool
}

func (v NullableServiceResourceId) Get() *ServiceResourceId {
	return v.value
}

func (v *NullableServiceResourceId) Set(val *ServiceResourceId) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceResourceId) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceResourceId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceResourceId(val *ServiceResourceId) *NullableServiceResourceId {
	return &NullableServiceResourceId{value: val, isSet: true}
}

func (v NullableServiceResourceId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceResourceId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



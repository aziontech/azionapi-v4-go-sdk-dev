/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResponseListNodes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseListNodes{}

// ResponseListNodes struct for ResponseListNodes
type ResponseListNodes struct {
	Id int64 `json:"id"`
	HashId string `json:"hash_id"`
	Name string `json:"name"`
	// * `waiting_authorization` - waiting_authorization * `authorized` - authorized
	Status string `json:"status"`
	Active bool `json:"active"`
	LastEditor string `json:"last_editor"`
	LastModified string `json:"last_modified"`
	Modules interface{} `json:"modules,omitempty"`
	ProductVersion string `json:"product_version"`
}

type _ResponseListNodes ResponseListNodes

// NewResponseListNodes instantiates a new ResponseListNodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseListNodes(id int64, hashId string, name string, status string, active bool, lastEditor string, lastModified string, productVersion string) *ResponseListNodes {
	this := ResponseListNodes{}
	this.Id = id
	this.HashId = hashId
	this.Name = name
	this.Status = status
	this.Active = active
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	this.ProductVersion = productVersion
	return &this
}

// NewResponseListNodesWithDefaults instantiates a new ResponseListNodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseListNodesWithDefaults() *ResponseListNodes {
	this := ResponseListNodes{}
	return &this
}

// GetId returns the Id field value
func (o *ResponseListNodes) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResponseListNodes) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResponseListNodes) SetId(v int64) {
	o.Id = v
}

// GetHashId returns the HashId field value
func (o *ResponseListNodes) GetHashId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HashId
}

// GetHashIdOk returns a tuple with the HashId field value
// and a boolean to check if the value has been set.
func (o *ResponseListNodes) GetHashIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HashId, true
}

// SetHashId sets field value
func (o *ResponseListNodes) SetHashId(v string) {
	o.HashId = v
}

// GetName returns the Name field value
func (o *ResponseListNodes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ResponseListNodes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ResponseListNodes) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *ResponseListNodes) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ResponseListNodes) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ResponseListNodes) SetStatus(v string) {
	o.Status = v
}

// GetActive returns the Active field value
func (o *ResponseListNodes) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *ResponseListNodes) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *ResponseListNodes) SetActive(v bool) {
	o.Active = v
}

// GetLastEditor returns the LastEditor field value
func (o *ResponseListNodes) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *ResponseListNodes) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *ResponseListNodes) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *ResponseListNodes) GetLastModified() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *ResponseListNodes) GetLastModifiedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *ResponseListNodes) SetLastModified(v string) {
	o.LastModified = v
}

// GetModules returns the Modules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseListNodes) GetModules() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Modules
}

// GetModulesOk returns a tuple with the Modules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseListNodes) GetModulesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Modules) {
		return nil, false
	}
	return &o.Modules, true
}

// HasModules returns a boolean if a field has been set.
func (o *ResponseListNodes) HasModules() bool {
	if o != nil && !IsNil(o.Modules) {
		return true
	}

	return false
}

// SetModules gets a reference to the given interface{} and assigns it to the Modules field.
func (o *ResponseListNodes) SetModules(v interface{}) {
	o.Modules = v
}

// GetProductVersion returns the ProductVersion field value
func (o *ResponseListNodes) GetProductVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductVersion
}

// GetProductVersionOk returns a tuple with the ProductVersion field value
// and a boolean to check if the value has been set.
func (o *ResponseListNodes) GetProductVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductVersion, true
}

// SetProductVersion sets field value
func (o *ResponseListNodes) SetProductVersion(v string) {
	o.ProductVersion = v
}

func (o ResponseListNodes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseListNodes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["hash_id"] = o.HashId
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["active"] = o.Active
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	if o.Modules != nil {
		toSerialize["modules"] = o.Modules
	}
	toSerialize["product_version"] = o.ProductVersion
	return toSerialize, nil
}

func (o *ResponseListNodes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"hash_id",
		"name",
		"status",
		"active",
		"last_editor",
		"last_modified",
		"product_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseListNodes := _ResponseListNodes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResponseListNodes)

	if err != nil {
		return err
	}

	*o = ResponseListNodes(varResponseListNodes)

	return err
}

type NullableResponseListNodes struct {
	value *ResponseListNodes
	isSet bool
}

func (v NullableResponseListNodes) Get() *ResponseListNodes {
	return v.value
}

func (v *NullableResponseListNodes) Set(val *ResponseListNodes) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseListNodes) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseListNodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseListNodes(val *ResponseListNodes) *NullableResponseListNodes {
	return &NullableResponseListNodes{value: val, isSet: true}
}

func (v NullableResponseListNodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseListNodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



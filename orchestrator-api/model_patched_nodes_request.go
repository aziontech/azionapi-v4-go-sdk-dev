/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
)

// checks if the PatchedNodesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedNodesRequest{}

// PatchedNodesRequest struct for PatchedNodesRequest
type PatchedNodesRequest struct {
	Name *string `json:"name,omitempty"`
	// * `waiting_authorization` - waiting_authorization * `authorized` - authorized
	Status *string `json:"status,omitempty"`
	Modules interface{} `json:"modules,omitempty"`
}

// NewPatchedNodesRequest instantiates a new PatchedNodesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedNodesRequest() *PatchedNodesRequest {
	this := PatchedNodesRequest{}
	return &this
}

// NewPatchedNodesRequestWithDefaults instantiates a new PatchedNodesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedNodesRequestWithDefaults() *PatchedNodesRequest {
	this := PatchedNodesRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedNodesRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNodesRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedNodesRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedNodesRequest) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PatchedNodesRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNodesRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PatchedNodesRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PatchedNodesRequest) SetStatus(v string) {
	o.Status = &v
}

// GetModules returns the Modules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNodesRequest) GetModules() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Modules
}

// GetModulesOk returns a tuple with the Modules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNodesRequest) GetModulesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Modules) {
		return nil, false
	}
	return &o.Modules, true
}

// HasModules returns a boolean if a field has been set.
func (o *PatchedNodesRequest) HasModules() bool {
	if o != nil && !IsNil(o.Modules) {
		return true
	}

	return false
}

// SetModules gets a reference to the given interface{} and assigns it to the Modules field.
func (o *PatchedNodesRequest) SetModules(v interface{}) {
	o.Modules = v
}

func (o PatchedNodesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedNodesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Modules != nil {
		toSerialize["modules"] = o.Modules
	}
	return toSerialize, nil
}

type NullablePatchedNodesRequest struct {
	value *PatchedNodesRequest
	isSet bool
}

func (v NullablePatchedNodesRequest) Get() *PatchedNodesRequest {
	return v.value
}

func (v *NullablePatchedNodesRequest) Set(val *PatchedNodesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedNodesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedNodesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedNodesRequest(val *PatchedNodesRequest) *NullablePatchedNodesRequest {
	return &NullablePatchedNodesRequest{value: val, isSet: true}
}

func (v NullablePatchedNodesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedNodesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeServiceBind type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeServiceBind{}

// NodeServiceBind struct for NodeServiceBind
type NodeServiceBind struct {
	Id int64 `json:"id"`
	ServiceName string `json:"service_name"`
	ServiceId int64 `json:"service_id"`
	Active bool `json:"active"`
	LastEditor string `json:"last_editor"`
	LastModified string `json:"last_modified"`
}

type _NodeServiceBind NodeServiceBind

// NewNodeServiceBind instantiates a new NodeServiceBind object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeServiceBind(id int64, serviceName string, serviceId int64, active bool, lastEditor string, lastModified string) *NodeServiceBind {
	this := NodeServiceBind{}
	this.Id = id
	this.ServiceName = serviceName
	this.ServiceId = serviceId
	this.Active = active
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	return &this
}

// NewNodeServiceBindWithDefaults instantiates a new NodeServiceBind object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeServiceBindWithDefaults() *NodeServiceBind {
	this := NodeServiceBind{}
	return &this
}

// GetId returns the Id field value
func (o *NodeServiceBind) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NodeServiceBind) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NodeServiceBind) SetId(v int64) {
	o.Id = v
}

// GetServiceName returns the ServiceName field value
func (o *NodeServiceBind) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *NodeServiceBind) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *NodeServiceBind) SetServiceName(v string) {
	o.ServiceName = v
}

// GetServiceId returns the ServiceId field value
func (o *NodeServiceBind) GetServiceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *NodeServiceBind) GetServiceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *NodeServiceBind) SetServiceId(v int64) {
	o.ServiceId = v
}

// GetActive returns the Active field value
func (o *NodeServiceBind) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *NodeServiceBind) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *NodeServiceBind) SetActive(v bool) {
	o.Active = v
}

// GetLastEditor returns the LastEditor field value
func (o *NodeServiceBind) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *NodeServiceBind) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *NodeServiceBind) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *NodeServiceBind) GetLastModified() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *NodeServiceBind) GetLastModifiedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *NodeServiceBind) SetLastModified(v string) {
	o.LastModified = v
}

func (o NodeServiceBind) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeServiceBind) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["service_name"] = o.ServiceName
	toSerialize["service_id"] = o.ServiceId
	toSerialize["active"] = o.Active
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	return toSerialize, nil
}

func (o *NodeServiceBind) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"service_name",
		"service_id",
		"active",
		"last_editor",
		"last_modified",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeServiceBind := _NodeServiceBind{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeServiceBind)

	if err != nil {
		return err
	}

	*o = NodeServiceBind(varNodeServiceBind)

	return err
}

type NullableNodeServiceBind struct {
	value *NodeServiceBind
	isSet bool
}

func (v NullableNodeServiceBind) Get() *NodeServiceBind {
	return v.value
}

func (v *NullableNodeServiceBind) Set(val *NodeServiceBind) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeServiceBind) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeServiceBind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeServiceBind(val *NodeServiceBind) *NullableNodeServiceBind {
	return &NullableNodeServiceBind{value: val, isSet: true}
}

func (v NullableNodeServiceBind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeServiceBind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



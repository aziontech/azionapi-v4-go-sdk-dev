/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServiceResourceIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceResourceIdRequest{}

// ServiceResourceIdRequest struct for ServiceResourceIdRequest
type ServiceResourceIdRequest struct {
	Name string `json:"name"`
	ContentType *string `json:"content_type,omitempty"`
	Trigger *ServiceResourceIdTrigger `json:"trigger,omitempty"`
	Content *string `json:"content,omitempty"`
	FileGroup string `json:"file_group"`
	FileMode string `json:"file_mode"`
	FileOwner string `json:"file_owner"`
}

type _ServiceResourceIdRequest ServiceResourceIdRequest

// NewServiceResourceIdRequest instantiates a new ServiceResourceIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceResourceIdRequest(name string, fileGroup string, fileMode string, fileOwner string) *ServiceResourceIdRequest {
	this := ServiceResourceIdRequest{}
	this.Name = name
	this.FileGroup = fileGroup
	this.FileMode = fileMode
	this.FileOwner = fileOwner
	return &this
}

// NewServiceResourceIdRequestWithDefaults instantiates a new ServiceResourceIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceResourceIdRequestWithDefaults() *ServiceResourceIdRequest {
	this := ServiceResourceIdRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ServiceResourceIdRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceIdRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServiceResourceIdRequest) SetName(v string) {
	o.Name = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *ServiceResourceIdRequest) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceResourceIdRequest) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *ServiceResourceIdRequest) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *ServiceResourceIdRequest) SetContentType(v string) {
	o.ContentType = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *ServiceResourceIdRequest) GetTrigger() ServiceResourceIdTrigger {
	if o == nil || IsNil(o.Trigger) {
		var ret ServiceResourceIdTrigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceResourceIdRequest) GetTriggerOk() (*ServiceResourceIdTrigger, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *ServiceResourceIdRequest) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given ServiceResourceIdTrigger and assigns it to the Trigger field.
func (o *ServiceResourceIdRequest) SetTrigger(v ServiceResourceIdTrigger) {
	o.Trigger = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ServiceResourceIdRequest) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceResourceIdRequest) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ServiceResourceIdRequest) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ServiceResourceIdRequest) SetContent(v string) {
	o.Content = &v
}

// GetFileGroup returns the FileGroup field value
func (o *ServiceResourceIdRequest) GetFileGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileGroup
}

// GetFileGroupOk returns a tuple with the FileGroup field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceIdRequest) GetFileGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileGroup, true
}

// SetFileGroup sets field value
func (o *ServiceResourceIdRequest) SetFileGroup(v string) {
	o.FileGroup = v
}

// GetFileMode returns the FileMode field value
func (o *ServiceResourceIdRequest) GetFileMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileMode
}

// GetFileModeOk returns a tuple with the FileMode field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceIdRequest) GetFileModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileMode, true
}

// SetFileMode sets field value
func (o *ServiceResourceIdRequest) SetFileMode(v string) {
	o.FileMode = v
}

// GetFileOwner returns the FileOwner field value
func (o *ServiceResourceIdRequest) GetFileOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileOwner
}

// GetFileOwnerOk returns a tuple with the FileOwner field value
// and a boolean to check if the value has been set.
func (o *ServiceResourceIdRequest) GetFileOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileOwner, true
}

// SetFileOwner sets field value
func (o *ServiceResourceIdRequest) SetFileOwner(v string) {
	o.FileOwner = v
}

func (o ServiceResourceIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceResourceIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	toSerialize["file_group"] = o.FileGroup
	toSerialize["file_mode"] = o.FileMode
	toSerialize["file_owner"] = o.FileOwner
	return toSerialize, nil
}

func (o *ServiceResourceIdRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"file_group",
		"file_mode",
		"file_owner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceResourceIdRequest := _ServiceResourceIdRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceResourceIdRequest)

	if err != nil {
		return err
	}

	*o = ServiceResourceIdRequest(varServiceResourceIdRequest)

	return err
}

type NullableServiceResourceIdRequest struct {
	value *ServiceResourceIdRequest
	isSet bool
}

func (v NullableServiceResourceIdRequest) Get() *ServiceResourceIdRequest {
	return v.value
}

func (v *NullableServiceResourceIdRequest) Set(val *ServiceResourceIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceResourceIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceResourceIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceResourceIdRequest(val *ServiceResourceIdRequest) *NullableServiceResourceIdRequest {
	return &NullableServiceResourceIdRequest{value: val, isSet: true}
}

func (v NullableServiceResourceIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceResourceIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
)

// checks if the ResponseBadRequestServices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseBadRequestServices{}

// ResponseBadRequestServices struct for ResponseBadRequestServices
type ResponseBadRequestServices struct {
	Id []string `json:"id,omitempty"`
	Name []string `json:"name,omitempty"`
	Active []string `json:"active,omitempty"`
	MinVersion []string `json:"min_version,omitempty"`
	Permissions []string `json:"permissions,omitempty"`
	LastEditor []string `json:"last_editor,omitempty"`
	LastModified []string `json:"last_modified,omitempty"`
	RefCount []string `json:"ref_count,omitempty"`
	ProductVersion []string `json:"product_version,omitempty"`
	Detail *string `json:"detail,omitempty"`
}

// NewResponseBadRequestServices instantiates a new ResponseBadRequestServices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseBadRequestServices() *ResponseBadRequestServices {
	this := ResponseBadRequestServices{}
	return &this
}

// NewResponseBadRequestServicesWithDefaults instantiates a new ResponseBadRequestServices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseBadRequestServicesWithDefaults() *ResponseBadRequestServices {
	this := ResponseBadRequestServices{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponseBadRequestServices) GetId() []string {
	if o == nil || IsNil(o.Id) {
		var ret []string
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestServices) GetIdOk() ([]string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponseBadRequestServices) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given []string and assigns it to the Id field.
func (o *ResponseBadRequestServices) SetId(v []string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponseBadRequestServices) GetName() []string {
	if o == nil || IsNil(o.Name) {
		var ret []string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestServices) GetNameOk() ([]string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponseBadRequestServices) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []string and assigns it to the Name field.
func (o *ResponseBadRequestServices) SetName(v []string) {
	o.Name = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ResponseBadRequestServices) GetActive() []string {
	if o == nil || IsNil(o.Active) {
		var ret []string
		return ret
	}
	return o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestServices) GetActiveOk() ([]string, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ResponseBadRequestServices) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given []string and assigns it to the Active field.
func (o *ResponseBadRequestServices) SetActive(v []string) {
	o.Active = v
}

// GetMinVersion returns the MinVersion field value if set, zero value otherwise.
func (o *ResponseBadRequestServices) GetMinVersion() []string {
	if o == nil || IsNil(o.MinVersion) {
		var ret []string
		return ret
	}
	return o.MinVersion
}

// GetMinVersionOk returns a tuple with the MinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestServices) GetMinVersionOk() ([]string, bool) {
	if o == nil || IsNil(o.MinVersion) {
		return nil, false
	}
	return o.MinVersion, true
}

// HasMinVersion returns a boolean if a field has been set.
func (o *ResponseBadRequestServices) HasMinVersion() bool {
	if o != nil && !IsNil(o.MinVersion) {
		return true
	}

	return false
}

// SetMinVersion gets a reference to the given []string and assigns it to the MinVersion field.
func (o *ResponseBadRequestServices) SetMinVersion(v []string) {
	o.MinVersion = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ResponseBadRequestServices) GetPermissions() []string {
	if o == nil || IsNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestServices) GetPermissionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ResponseBadRequestServices) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *ResponseBadRequestServices) SetPermissions(v []string) {
	o.Permissions = v
}

// GetLastEditor returns the LastEditor field value if set, zero value otherwise.
func (o *ResponseBadRequestServices) GetLastEditor() []string {
	if o == nil || IsNil(o.LastEditor) {
		var ret []string
		return ret
	}
	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestServices) GetLastEditorOk() ([]string, bool) {
	if o == nil || IsNil(o.LastEditor) {
		return nil, false
	}
	return o.LastEditor, true
}

// HasLastEditor returns a boolean if a field has been set.
func (o *ResponseBadRequestServices) HasLastEditor() bool {
	if o != nil && !IsNil(o.LastEditor) {
		return true
	}

	return false
}

// SetLastEditor gets a reference to the given []string and assigns it to the LastEditor field.
func (o *ResponseBadRequestServices) SetLastEditor(v []string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *ResponseBadRequestServices) GetLastModified() []string {
	if o == nil || IsNil(o.LastModified) {
		var ret []string
		return ret
	}
	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestServices) GetLastModifiedOk() ([]string, bool) {
	if o == nil || IsNil(o.LastModified) {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *ResponseBadRequestServices) HasLastModified() bool {
	if o != nil && !IsNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given []string and assigns it to the LastModified field.
func (o *ResponseBadRequestServices) SetLastModified(v []string) {
	o.LastModified = v
}

// GetRefCount returns the RefCount field value if set, zero value otherwise.
func (o *ResponseBadRequestServices) GetRefCount() []string {
	if o == nil || IsNil(o.RefCount) {
		var ret []string
		return ret
	}
	return o.RefCount
}

// GetRefCountOk returns a tuple with the RefCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestServices) GetRefCountOk() ([]string, bool) {
	if o == nil || IsNil(o.RefCount) {
		return nil, false
	}
	return o.RefCount, true
}

// HasRefCount returns a boolean if a field has been set.
func (o *ResponseBadRequestServices) HasRefCount() bool {
	if o != nil && !IsNil(o.RefCount) {
		return true
	}

	return false
}

// SetRefCount gets a reference to the given []string and assigns it to the RefCount field.
func (o *ResponseBadRequestServices) SetRefCount(v []string) {
	o.RefCount = v
}

// GetProductVersion returns the ProductVersion field value if set, zero value otherwise.
func (o *ResponseBadRequestServices) GetProductVersion() []string {
	if o == nil || IsNil(o.ProductVersion) {
		var ret []string
		return ret
	}
	return o.ProductVersion
}

// GetProductVersionOk returns a tuple with the ProductVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestServices) GetProductVersionOk() ([]string, bool) {
	if o == nil || IsNil(o.ProductVersion) {
		return nil, false
	}
	return o.ProductVersion, true
}

// HasProductVersion returns a boolean if a field has been set.
func (o *ResponseBadRequestServices) HasProductVersion() bool {
	if o != nil && !IsNil(o.ProductVersion) {
		return true
	}

	return false
}

// SetProductVersion gets a reference to the given []string and assigns it to the ProductVersion field.
func (o *ResponseBadRequestServices) SetProductVersion(v []string) {
	o.ProductVersion = v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *ResponseBadRequestServices) GetDetail() string {
	if o == nil || IsNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestServices) GetDetailOk() (*string, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *ResponseBadRequestServices) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *ResponseBadRequestServices) SetDetail(v string) {
	o.Detail = &v
}

func (o ResponseBadRequestServices) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseBadRequestServices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.MinVersion) {
		toSerialize["min_version"] = o.MinVersion
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.LastEditor) {
		toSerialize["last_editor"] = o.LastEditor
	}
	if !IsNil(o.LastModified) {
		toSerialize["last_modified"] = o.LastModified
	}
	if !IsNil(o.RefCount) {
		toSerialize["ref_count"] = o.RefCount
	}
	if !IsNil(o.ProductVersion) {
		toSerialize["product_version"] = o.ProductVersion
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	return toSerialize, nil
}

type NullableResponseBadRequestServices struct {
	value *ResponseBadRequestServices
	isSet bool
}

func (v NullableResponseBadRequestServices) Get() *ResponseBadRequestServices {
	return v.value
}

func (v *NullableResponseBadRequestServices) Set(val *ResponseBadRequestServices) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseBadRequestServices) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseBadRequestServices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseBadRequestServices(val *ResponseBadRequestServices) *NullableResponseBadRequestServices {
	return &NullableResponseBadRequestServices{value: val, isSet: true}
}

func (v NullableResponseBadRequestServices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseBadRequestServices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



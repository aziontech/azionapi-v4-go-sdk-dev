/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServiceResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceResource{}

// ServiceResource struct for ServiceResource
type ServiceResource struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	ContentHash string `json:"content_hash"`
	ContentType string `json:"content_type"`
	FileGroup string `json:"file_group"`
	FileMode string `json:"file_mode"`
	FileOwner string `json:"file_owner"`
	IsTemplate bool `json:"is_template"`
	Active bool `json:"active"`
	LastEditor string `json:"last_editor"`
	LastModified string `json:"last_modified"`
	RefCount int64 `json:"ref_count"`
}

type _ServiceResource ServiceResource

// NewServiceResource instantiates a new ServiceResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceResource(id int64, name string, contentHash string, contentType string, fileGroup string, fileMode string, fileOwner string, isTemplate bool, active bool, lastEditor string, lastModified string, refCount int64) *ServiceResource {
	this := ServiceResource{}
	this.Id = id
	this.Name = name
	this.ContentHash = contentHash
	this.ContentType = contentType
	this.FileGroup = fileGroup
	this.FileMode = fileMode
	this.FileOwner = fileOwner
	this.IsTemplate = isTemplate
	this.Active = active
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	this.RefCount = refCount
	return &this
}

// NewServiceResourceWithDefaults instantiates a new ServiceResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceResourceWithDefaults() *ServiceResource {
	this := ServiceResource{}
	return &this
}

// GetId returns the Id field value
func (o *ServiceResource) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceResource) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ServiceResource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServiceResource) SetName(v string) {
	o.Name = v
}

// GetContentHash returns the ContentHash field value
func (o *ServiceResource) GetContentHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentHash
}

// GetContentHashOk returns a tuple with the ContentHash field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetContentHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentHash, true
}

// SetContentHash sets field value
func (o *ServiceResource) SetContentHash(v string) {
	o.ContentHash = v
}

// GetContentType returns the ContentType field value
func (o *ServiceResource) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *ServiceResource) SetContentType(v string) {
	o.ContentType = v
}

// GetFileGroup returns the FileGroup field value
func (o *ServiceResource) GetFileGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileGroup
}

// GetFileGroupOk returns a tuple with the FileGroup field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetFileGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileGroup, true
}

// SetFileGroup sets field value
func (o *ServiceResource) SetFileGroup(v string) {
	o.FileGroup = v
}

// GetFileMode returns the FileMode field value
func (o *ServiceResource) GetFileMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileMode
}

// GetFileModeOk returns a tuple with the FileMode field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetFileModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileMode, true
}

// SetFileMode sets field value
func (o *ServiceResource) SetFileMode(v string) {
	o.FileMode = v
}

// GetFileOwner returns the FileOwner field value
func (o *ServiceResource) GetFileOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileOwner
}

// GetFileOwnerOk returns a tuple with the FileOwner field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetFileOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileOwner, true
}

// SetFileOwner sets field value
func (o *ServiceResource) SetFileOwner(v string) {
	o.FileOwner = v
}

// GetIsTemplate returns the IsTemplate field value
func (o *ServiceResource) GetIsTemplate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTemplate
}

// GetIsTemplateOk returns a tuple with the IsTemplate field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetIsTemplateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTemplate, true
}

// SetIsTemplate sets field value
func (o *ServiceResource) SetIsTemplate(v bool) {
	o.IsTemplate = v
}

// GetActive returns the Active field value
func (o *ServiceResource) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *ServiceResource) SetActive(v bool) {
	o.Active = v
}

// GetLastEditor returns the LastEditor field value
func (o *ServiceResource) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *ServiceResource) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *ServiceResource) GetLastModified() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetLastModifiedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *ServiceResource) SetLastModified(v string) {
	o.LastModified = v
}

// GetRefCount returns the RefCount field value
func (o *ServiceResource) GetRefCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RefCount
}

// GetRefCountOk returns a tuple with the RefCount field value
// and a boolean to check if the value has been set.
func (o *ServiceResource) GetRefCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefCount, true
}

// SetRefCount sets field value
func (o *ServiceResource) SetRefCount(v int64) {
	o.RefCount = v
}

func (o ServiceResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["content_hash"] = o.ContentHash
	toSerialize["content_type"] = o.ContentType
	toSerialize["file_group"] = o.FileGroup
	toSerialize["file_mode"] = o.FileMode
	toSerialize["file_owner"] = o.FileOwner
	toSerialize["is_template"] = o.IsTemplate
	toSerialize["active"] = o.Active
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	toSerialize["ref_count"] = o.RefCount
	return toSerialize, nil
}

func (o *ServiceResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"content_hash",
		"content_type",
		"file_group",
		"file_mode",
		"file_owner",
		"is_template",
		"active",
		"last_editor",
		"last_modified",
		"ref_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceResource := _ServiceResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceResource)

	if err != nil {
		return err
	}

	*o = ServiceResource(varServiceResource)

	return err
}

type NullableServiceResource struct {
	value *ServiceResource
	isSet bool
}

func (v NullableServiceResource) Get() *ServiceResource {
	return v.value
}

func (v *NullableServiceResource) Set(val *ServiceResource) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceResource) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceResource(val *ServiceResource) *NullableServiceResource {
	return &NullableServiceResource{value: val, isSet: true}
}

func (v NullableServiceResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



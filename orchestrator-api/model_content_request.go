/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentRequest{}

// ContentRequest struct for ContentRequest
type ContentRequest struct {
	Name string `json:"name"`
	ContentType string `json:"content_type"`
	ContentHash string `json:"content_hash"`
}

type _ContentRequest ContentRequest

// NewContentRequest instantiates a new ContentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentRequest(name string, contentType string, contentHash string) *ContentRequest {
	this := ContentRequest{}
	this.Name = name
	this.ContentType = contentType
	this.ContentHash = contentHash
	return &this
}

// NewContentRequestWithDefaults instantiates a new ContentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentRequestWithDefaults() *ContentRequest {
	this := ContentRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ContentRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContentRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContentRequest) SetName(v string) {
	o.Name = v
}

// GetContentType returns the ContentType field value
func (o *ContentRequest) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *ContentRequest) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *ContentRequest) SetContentType(v string) {
	o.ContentType = v
}

// GetContentHash returns the ContentHash field value
func (o *ContentRequest) GetContentHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentHash
}

// GetContentHashOk returns a tuple with the ContentHash field value
// and a boolean to check if the value has been set.
func (o *ContentRequest) GetContentHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentHash, true
}

// SetContentHash sets field value
func (o *ContentRequest) SetContentHash(v string) {
	o.ContentHash = v
}

func (o ContentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["content_type"] = o.ContentType
	toSerialize["content_hash"] = o.ContentHash
	return toSerialize, nil
}

func (o *ContentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"content_type",
		"content_hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentRequest := _ContentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentRequest)

	if err != nil {
		return err
	}

	*o = ContentRequest(varContentRequest)

	return err
}

type NullableContentRequest struct {
	value *ContentRequest
	isSet bool
}

func (v NullableContentRequest) Get() *ContentRequest {
	return v.value
}

func (v *NullableContentRequest) Set(val *ContentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableContentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableContentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentRequest(val *ContentRequest) *NullableContentRequest {
	return &NullableContentRequest{value: val, isSet: true}
}

func (v NullableContentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



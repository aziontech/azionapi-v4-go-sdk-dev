/*
Orchestrator

Testing OrchestratorEdgeNodeServicesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package orchestratorapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_orchestratorapi_OrchestratorEdgeNodeServicesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrchestratorEdgeNodeServicesAPIService BindEdgeNodeServices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId int64

		resp, httpRes, err := apiClient.OrchestratorEdgeNodeServicesAPI.BindEdgeNodeServices(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrchestratorEdgeNodeServicesAPIService ListEdgeNodeServices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId int64

		resp, httpRes, err := apiClient.OrchestratorEdgeNodeServicesAPI.ListEdgeNodeServices(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrchestratorEdgeNodeServicesAPIService RetrieveEdgeNodeServiceBind", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bindId int64
		var nodeId int64

		resp, httpRes, err := apiClient.OrchestratorEdgeNodeServicesAPI.RetrieveEdgeNodeServiceBind(context.Background(), bindId, nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrchestratorEdgeNodeServicesAPIService UnbindEdgeNodeService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bindId int64
		var nodeId int64

		resp, httpRes, err := apiClient.OrchestratorEdgeNodeServicesAPI.UnbindEdgeNodeService(context.Background(), bindId, nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

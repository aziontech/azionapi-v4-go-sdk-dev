/*
Orchestrator

Testing OrchestratorEdgeServiceResourcesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package orchestratorapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_orchestratorapi_OrchestratorEdgeServiceResourcesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrchestratorEdgeServiceResourcesAPIService CreateResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId int64

		resp, httpRes, err := apiClient.OrchestratorEdgeServiceResourcesAPI.CreateResource(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrchestratorEdgeServiceResourcesAPIService DeleteResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId int64
		var serviceId int64

		httpRes, err := apiClient.OrchestratorEdgeServiceResourcesAPI.DeleteResource(context.Background(), resourceId, serviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrchestratorEdgeServiceResourcesAPIService ListResourcesOfAService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId int64

		resp, httpRes, err := apiClient.OrchestratorEdgeServiceResourcesAPI.ListResourcesOfAService(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrchestratorEdgeServiceResourcesAPIService RetrieveResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId int64
		var serviceId int64

		resp, httpRes, err := apiClient.OrchestratorEdgeServiceResourcesAPI.RetrieveResource(context.Background(), resourceId, serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrchestratorEdgeServiceResourcesAPIService RetrieveResourceContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId int64
		var serviceId int64

		resp, httpRes, err := apiClient.OrchestratorEdgeServiceResourcesAPI.RetrieveResourceContent(context.Background(), resourceId, serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrchestratorEdgeServiceResourcesAPIService UpdateResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId int64
		var serviceId int64

		resp, httpRes, err := apiClient.OrchestratorEdgeServiceResourcesAPI.UpdateResource(context.Background(), resourceId, serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrchestratorEdgeServiceResourcesAPIService UploadResourceContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId int64
		var serviceId int64

		resp, httpRes, err := apiClient.OrchestratorEdgeServiceResourcesAPI.UploadResourceContent(context.Background(), resourceId, serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

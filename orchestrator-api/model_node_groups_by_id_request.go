/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
)

// checks if the NodeGroupsByIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeGroupsByIdRequest{}

// NodeGroupsByIdRequest struct for NodeGroupsByIdRequest
type NodeGroupsByIdRequest struct {
	Name *string `json:"name,omitempty"`
	NodeGroup *int64 `json:"node_group,omitempty"`
}

// NewNodeGroupsByIdRequest instantiates a new NodeGroupsByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeGroupsByIdRequest() *NodeGroupsByIdRequest {
	this := NodeGroupsByIdRequest{}
	return &this
}

// NewNodeGroupsByIdRequestWithDefaults instantiates a new NodeGroupsByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeGroupsByIdRequestWithDefaults() *NodeGroupsByIdRequest {
	this := NodeGroupsByIdRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NodeGroupsByIdRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeGroupsByIdRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NodeGroupsByIdRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NodeGroupsByIdRequest) SetName(v string) {
	o.Name = &v
}

// GetNodeGroup returns the NodeGroup field value if set, zero value otherwise.
func (o *NodeGroupsByIdRequest) GetNodeGroup() int64 {
	if o == nil || IsNil(o.NodeGroup) {
		var ret int64
		return ret
	}
	return *o.NodeGroup
}

// GetNodeGroupOk returns a tuple with the NodeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeGroupsByIdRequest) GetNodeGroupOk() (*int64, bool) {
	if o == nil || IsNil(o.NodeGroup) {
		return nil, false
	}
	return o.NodeGroup, true
}

// HasNodeGroup returns a boolean if a field has been set.
func (o *NodeGroupsByIdRequest) HasNodeGroup() bool {
	if o != nil && !IsNil(o.NodeGroup) {
		return true
	}

	return false
}

// SetNodeGroup gets a reference to the given int64 and assigns it to the NodeGroup field.
func (o *NodeGroupsByIdRequest) SetNodeGroup(v int64) {
	o.NodeGroup = &v
}

func (o NodeGroupsByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeGroupsByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NodeGroup) {
		toSerialize["node_group"] = o.NodeGroup
	}
	return toSerialize, nil
}

type NullableNodeGroupsByIdRequest struct {
	value *NodeGroupsByIdRequest
	isSet bool
}

func (v NullableNodeGroupsByIdRequest) Get() *NodeGroupsByIdRequest {
	return v.value
}

func (v *NullableNodeGroupsByIdRequest) Set(val *NodeGroupsByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeGroupsByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeGroupsByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeGroupsByIdRequest(val *NodeGroupsByIdRequest) *NullableNodeGroupsByIdRequest {
	return &NullableNodeGroupsByIdRequest{value: val, isSet: true}
}

func (v NullableNodeGroupsByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeGroupsByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



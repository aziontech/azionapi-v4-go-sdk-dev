/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodesRequest{}

// NodesRequest struct for NodesRequest
type NodesRequest struct {
	Name string `json:"name"`
	// * `waiting_authorization` - waiting_authorization * `authorized` - authorized
	Status string `json:"status"`
	Modules interface{} `json:"modules,omitempty"`
}

type _NodesRequest NodesRequest

// NewNodesRequest instantiates a new NodesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodesRequest(name string, status string) *NodesRequest {
	this := NodesRequest{}
	this.Name = name
	this.Status = status
	return &this
}

// NewNodesRequestWithDefaults instantiates a new NodesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodesRequestWithDefaults() *NodesRequest {
	this := NodesRequest{}
	return &this
}

// GetName returns the Name field value
func (o *NodesRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NodesRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NodesRequest) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *NodesRequest) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NodesRequest) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NodesRequest) SetStatus(v string) {
	o.Status = v
}

// GetModules returns the Modules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodesRequest) GetModules() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Modules
}

// GetModulesOk returns a tuple with the Modules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodesRequest) GetModulesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Modules) {
		return nil, false
	}
	return &o.Modules, true
}

// HasModules returns a boolean if a field has been set.
func (o *NodesRequest) HasModules() bool {
	if o != nil && !IsNil(o.Modules) {
		return true
	}

	return false
}

// SetModules gets a reference to the given interface{} and assigns it to the Modules field.
func (o *NodesRequest) SetModules(v interface{}) {
	o.Modules = v
}

func (o NodesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	if o.Modules != nil {
		toSerialize["modules"] = o.Modules
	}
	return toSerialize, nil
}

func (o *NodesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodesRequest := _NodesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodesRequest)

	if err != nil {
		return err
	}

	*o = NodesRequest(varNodesRequest)

	return err
}

type NullableNodesRequest struct {
	value *NodesRequest
	isSet bool
}

func (v NullableNodesRequest) Get() *NodesRequest {
	return v.value
}

func (v *NullableNodesRequest) Set(val *NodesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodesRequest(val *NodesRequest) *NullableNodesRequest {
	return &NullableNodesRequest{value: val, isSet: true}
}

func (v NullableNodesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



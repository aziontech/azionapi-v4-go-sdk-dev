/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeServicesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeServicesRequest{}

// NodeServicesRequest struct for NodeServicesRequest
type NodeServicesRequest struct {
	Id *int64 `json:"id,omitempty"`
	ServiceName *string `json:"service_name,omitempty"`
	ServiceId int64 `json:"service_id"`
	Active *bool `json:"active,omitempty"`
}

type _NodeServicesRequest NodeServicesRequest

// NewNodeServicesRequest instantiates a new NodeServicesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeServicesRequest(serviceId int64) *NodeServicesRequest {
	this := NodeServicesRequest{}
	this.ServiceId = serviceId
	return &this
}

// NewNodeServicesRequestWithDefaults instantiates a new NodeServicesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeServicesRequestWithDefaults() *NodeServicesRequest {
	this := NodeServicesRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NodeServicesRequest) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeServicesRequest) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NodeServicesRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *NodeServicesRequest) SetId(v int64) {
	o.Id = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *NodeServicesRequest) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeServicesRequest) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *NodeServicesRequest) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *NodeServicesRequest) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetServiceId returns the ServiceId field value
func (o *NodeServicesRequest) GetServiceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *NodeServicesRequest) GetServiceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *NodeServicesRequest) SetServiceId(v int64) {
	o.ServiceId = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *NodeServicesRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeServicesRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *NodeServicesRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *NodeServicesRequest) SetActive(v bool) {
	o.Active = &v
}

func (o NodeServicesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeServicesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ServiceName) {
		toSerialize["service_name"] = o.ServiceName
	}
	toSerialize["service_id"] = o.ServiceId
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

func (o *NodeServicesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeServicesRequest := _NodeServicesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeServicesRequest)

	if err != nil {
		return err
	}

	*o = NodeServicesRequest(varNodeServicesRequest)

	return err
}

type NullableNodeServicesRequest struct {
	value *NodeServicesRequest
	isSet bool
}

func (v NullableNodeServicesRequest) Get() *NodeServicesRequest {
	return v.value
}

func (v *NullableNodeServicesRequest) Set(val *NodeServicesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeServicesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeServicesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeServicesRequest(val *NodeServicesRequest) *NullableNodeServicesRequest {
	return &NullableNodeServicesRequest{value: val, isSet: true}
}

func (v NullableNodeServicesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeServicesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResponseListNodeGroupsById type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseListNodeGroupsById{}

// ResponseListNodeGroupsById struct for ResponseListNodeGroupsById
type ResponseListNodeGroupsById struct {
	Id int64 `json:"id"`
	Name *string `json:"name,omitempty"`
}

type _ResponseListNodeGroupsById ResponseListNodeGroupsById

// NewResponseListNodeGroupsById instantiates a new ResponseListNodeGroupsById object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseListNodeGroupsById(id int64) *ResponseListNodeGroupsById {
	this := ResponseListNodeGroupsById{}
	this.Id = id
	return &this
}

// NewResponseListNodeGroupsByIdWithDefaults instantiates a new ResponseListNodeGroupsById object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseListNodeGroupsByIdWithDefaults() *ResponseListNodeGroupsById {
	this := ResponseListNodeGroupsById{}
	return &this
}

// GetId returns the Id field value
func (o *ResponseListNodeGroupsById) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResponseListNodeGroupsById) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResponseListNodeGroupsById) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponseListNodeGroupsById) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseListNodeGroupsById) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponseListNodeGroupsById) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResponseListNodeGroupsById) SetName(v string) {
	o.Name = &v
}

func (o ResponseListNodeGroupsById) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseListNodeGroupsById) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

func (o *ResponseListNodeGroupsById) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseListNodeGroupsById := _ResponseListNodeGroupsById{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResponseListNodeGroupsById)

	if err != nil {
		return err
	}

	*o = ResponseListNodeGroupsById(varResponseListNodeGroupsById)

	return err
}

type NullableResponseListNodeGroupsById struct {
	value *ResponseListNodeGroupsById
	isSet bool
}

func (v NullableResponseListNodeGroupsById) Get() *ResponseListNodeGroupsById {
	return v.value
}

func (v *NullableResponseListNodeGroupsById) Set(val *ResponseListNodeGroupsById) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseListNodeGroupsById) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseListNodeGroupsById) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseListNodeGroupsById(val *ResponseListNodeGroupsById) *NullableResponseListNodeGroupsById {
	return &NullableResponseListNodeGroupsById{value: val, isSet: true}
}

func (v NullableResponseListNodeGroupsById) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseListNodeGroupsById) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResponseListServices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseListServices{}

// ResponseListServices struct for ResponseListServices
type ResponseListServices struct {
	Id int64 `json:"id"`
	Name *string `json:"name,omitempty"`
	Active *bool `json:"active,omitempty"`
	MinVersion *string `json:"min_version,omitempty"`
	Permissions *int64 `json:"permissions,omitempty"`
	LastEditor string `json:"last_editor"`
	LastModified string `json:"last_modified"`
	RefCount int64 `json:"ref_count"`
	ProductVersion string `json:"product_version"`
}

type _ResponseListServices ResponseListServices

// NewResponseListServices instantiates a new ResponseListServices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseListServices(id int64, lastEditor string, lastModified string, refCount int64, productVersion string) *ResponseListServices {
	this := ResponseListServices{}
	this.Id = id
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	this.RefCount = refCount
	this.ProductVersion = productVersion
	return &this
}

// NewResponseListServicesWithDefaults instantiates a new ResponseListServices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseListServicesWithDefaults() *ResponseListServices {
	this := ResponseListServices{}
	return &this
}

// GetId returns the Id field value
func (o *ResponseListServices) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResponseListServices) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResponseListServices) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponseListServices) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseListServices) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponseListServices) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResponseListServices) SetName(v string) {
	o.Name = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ResponseListServices) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseListServices) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ResponseListServices) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ResponseListServices) SetActive(v bool) {
	o.Active = &v
}

// GetMinVersion returns the MinVersion field value if set, zero value otherwise.
func (o *ResponseListServices) GetMinVersion() string {
	if o == nil || IsNil(o.MinVersion) {
		var ret string
		return ret
	}
	return *o.MinVersion
}

// GetMinVersionOk returns a tuple with the MinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseListServices) GetMinVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MinVersion) {
		return nil, false
	}
	return o.MinVersion, true
}

// HasMinVersion returns a boolean if a field has been set.
func (o *ResponseListServices) HasMinVersion() bool {
	if o != nil && !IsNil(o.MinVersion) {
		return true
	}

	return false
}

// SetMinVersion gets a reference to the given string and assigns it to the MinVersion field.
func (o *ResponseListServices) SetMinVersion(v string) {
	o.MinVersion = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ResponseListServices) GetPermissions() int64 {
	if o == nil || IsNil(o.Permissions) {
		var ret int64
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseListServices) GetPermissionsOk() (*int64, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ResponseListServices) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given int64 and assigns it to the Permissions field.
func (o *ResponseListServices) SetPermissions(v int64) {
	o.Permissions = &v
}

// GetLastEditor returns the LastEditor field value
func (o *ResponseListServices) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *ResponseListServices) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *ResponseListServices) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *ResponseListServices) GetLastModified() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *ResponseListServices) GetLastModifiedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *ResponseListServices) SetLastModified(v string) {
	o.LastModified = v
}

// GetRefCount returns the RefCount field value
func (o *ResponseListServices) GetRefCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RefCount
}

// GetRefCountOk returns a tuple with the RefCount field value
// and a boolean to check if the value has been set.
func (o *ResponseListServices) GetRefCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefCount, true
}

// SetRefCount sets field value
func (o *ResponseListServices) SetRefCount(v int64) {
	o.RefCount = v
}

// GetProductVersion returns the ProductVersion field value
func (o *ResponseListServices) GetProductVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductVersion
}

// GetProductVersionOk returns a tuple with the ProductVersion field value
// and a boolean to check if the value has been set.
func (o *ResponseListServices) GetProductVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductVersion, true
}

// SetProductVersion sets field value
func (o *ResponseListServices) SetProductVersion(v string) {
	o.ProductVersion = v
}

func (o ResponseListServices) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseListServices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.MinVersion) {
		toSerialize["min_version"] = o.MinVersion
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	toSerialize["ref_count"] = o.RefCount
	toSerialize["product_version"] = o.ProductVersion
	return toSerialize, nil
}

func (o *ResponseListServices) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"last_editor",
		"last_modified",
		"ref_count",
		"product_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseListServices := _ResponseListServices{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResponseListServices)

	if err != nil {
		return err
	}

	*o = ResponseListServices(varResponseListServices)

	return err
}

type NullableResponseListServices struct {
	value *ResponseListServices
	isSet bool
}

func (v NullableResponseListServices) Get() *ResponseListServices {
	return v.value
}

func (v *NullableResponseListServices) Set(val *ResponseListServices) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseListServices) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseListServices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseListServices(val *ResponseListServices) *NullableResponseListServices {
	return &NullableResponseListServices{value: val, isSet: true}
}

func (v NullableResponseListServices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseListServices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
)

// checks if the ServicesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesRequest{}

// ServicesRequest struct for ServicesRequest
type ServicesRequest struct {
	Name *string `json:"name,omitempty"`
	Active *bool `json:"active,omitempty"`
	MinVersion *string `json:"min_version,omitempty"`
	Permissions *int64 `json:"permissions,omitempty"`
}

// NewServicesRequest instantiates a new ServicesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesRequest() *ServicesRequest {
	this := ServicesRequest{}
	return &this
}

// NewServicesRequestWithDefaults instantiates a new ServicesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesRequestWithDefaults() *ServicesRequest {
	this := ServicesRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServicesRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServicesRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ServicesRequest) SetName(v string) {
	o.Name = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ServicesRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ServicesRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ServicesRequest) SetActive(v bool) {
	o.Active = &v
}

// GetMinVersion returns the MinVersion field value if set, zero value otherwise.
func (o *ServicesRequest) GetMinVersion() string {
	if o == nil || IsNil(o.MinVersion) {
		var ret string
		return ret
	}
	return *o.MinVersion
}

// GetMinVersionOk returns a tuple with the MinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesRequest) GetMinVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MinVersion) {
		return nil, false
	}
	return o.MinVersion, true
}

// HasMinVersion returns a boolean if a field has been set.
func (o *ServicesRequest) HasMinVersion() bool {
	if o != nil && !IsNil(o.MinVersion) {
		return true
	}

	return false
}

// SetMinVersion gets a reference to the given string and assigns it to the MinVersion field.
func (o *ServicesRequest) SetMinVersion(v string) {
	o.MinVersion = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ServicesRequest) GetPermissions() int64 {
	if o == nil || IsNil(o.Permissions) {
		var ret int64
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesRequest) GetPermissionsOk() (*int64, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ServicesRequest) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given int64 and assigns it to the Permissions field.
func (o *ServicesRequest) SetPermissions(v int64) {
	o.Permissions = &v
}

func (o ServicesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.MinVersion) {
		toSerialize["min_version"] = o.MinVersion
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableServicesRequest struct {
	value *ServicesRequest
	isSet bool
}

func (v NullableServicesRequest) Get() *ServicesRequest {
	return v.value
}

func (v *NullableServicesRequest) Set(val *ServicesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesRequest(val *ServicesRequest) *NullableServicesRequest {
	return &NullableServicesRequest{value: val, isSet: true}
}

func (v NullableServicesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Orchestrator

REST API OpenAPI documentation for the Orchestrator

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orchestratorapi

import (
	"encoding/json"
)

// checks if the ResponseBadRequestNodeGroupsById type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseBadRequestNodeGroupsById{}

// ResponseBadRequestNodeGroupsById struct for ResponseBadRequestNodeGroupsById
type ResponseBadRequestNodeGroupsById struct {
	Id []string `json:"id,omitempty"`
	Name []string `json:"name,omitempty"`
	NodeGroup []string `json:"node_group,omitempty"`
	Detail *string `json:"detail,omitempty"`
}

// NewResponseBadRequestNodeGroupsById instantiates a new ResponseBadRequestNodeGroupsById object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseBadRequestNodeGroupsById() *ResponseBadRequestNodeGroupsById {
	this := ResponseBadRequestNodeGroupsById{}
	return &this
}

// NewResponseBadRequestNodeGroupsByIdWithDefaults instantiates a new ResponseBadRequestNodeGroupsById object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseBadRequestNodeGroupsByIdWithDefaults() *ResponseBadRequestNodeGroupsById {
	this := ResponseBadRequestNodeGroupsById{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponseBadRequestNodeGroupsById) GetId() []string {
	if o == nil || IsNil(o.Id) {
		var ret []string
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestNodeGroupsById) GetIdOk() ([]string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponseBadRequestNodeGroupsById) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given []string and assigns it to the Id field.
func (o *ResponseBadRequestNodeGroupsById) SetId(v []string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponseBadRequestNodeGroupsById) GetName() []string {
	if o == nil || IsNil(o.Name) {
		var ret []string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestNodeGroupsById) GetNameOk() ([]string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponseBadRequestNodeGroupsById) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []string and assigns it to the Name field.
func (o *ResponseBadRequestNodeGroupsById) SetName(v []string) {
	o.Name = v
}

// GetNodeGroup returns the NodeGroup field value if set, zero value otherwise.
func (o *ResponseBadRequestNodeGroupsById) GetNodeGroup() []string {
	if o == nil || IsNil(o.NodeGroup) {
		var ret []string
		return ret
	}
	return o.NodeGroup
}

// GetNodeGroupOk returns a tuple with the NodeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestNodeGroupsById) GetNodeGroupOk() ([]string, bool) {
	if o == nil || IsNil(o.NodeGroup) {
		return nil, false
	}
	return o.NodeGroup, true
}

// HasNodeGroup returns a boolean if a field has been set.
func (o *ResponseBadRequestNodeGroupsById) HasNodeGroup() bool {
	if o != nil && !IsNil(o.NodeGroup) {
		return true
	}

	return false
}

// SetNodeGroup gets a reference to the given []string and assigns it to the NodeGroup field.
func (o *ResponseBadRequestNodeGroupsById) SetNodeGroup(v []string) {
	o.NodeGroup = v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *ResponseBadRequestNodeGroupsById) GetDetail() string {
	if o == nil || IsNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestNodeGroupsById) GetDetailOk() (*string, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *ResponseBadRequestNodeGroupsById) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *ResponseBadRequestNodeGroupsById) SetDetail(v string) {
	o.Detail = &v
}

func (o ResponseBadRequestNodeGroupsById) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseBadRequestNodeGroupsById) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NodeGroup) {
		toSerialize["node_group"] = o.NodeGroup
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	return toSerialize, nil
}

type NullableResponseBadRequestNodeGroupsById struct {
	value *ResponseBadRequestNodeGroupsById
	isSet bool
}

func (v NullableResponseBadRequestNodeGroupsById) Get() *ResponseBadRequestNodeGroupsById {
	return v.value
}

func (v *NullableResponseBadRequestNodeGroupsById) Set(val *ResponseBadRequestNodeGroupsById) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseBadRequestNodeGroupsById) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseBadRequestNodeGroupsById) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseBadRequestNodeGroupsById(val *ResponseBadRequestNodeGroupsById) *NullableResponseBadRequestNodeGroupsById {
	return &NullableResponseBadRequestNodeGroupsById{value: val, isSet: true}
}

func (v NullableResponseBadRequestNodeGroupsById) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseBadRequestNodeGroupsById) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


